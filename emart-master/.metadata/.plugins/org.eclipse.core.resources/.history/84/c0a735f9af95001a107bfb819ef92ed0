package com.iiht.emart.category.functional;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.stream.Collectors;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.embedded.LocalServerPort;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;

import com.iiht.emart.category.CategoryApplication;

import junit.framework.Assert;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = CategoryApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class testCategoryController {

	private static final String RESOURCE_PATH_selectAll = "functional/address/selectAll";

    @LocalServerPort
    private int port;

    private URL base;

    @Autowired
    private TestRestTemplate restTemplate;

	private MockMvc mvc;

    @Before
    public void setUp() throws Exception {
        String url = String.format("http://localhost:%d/", port);
        System.out.println(String.format("port is : [%d]", port));
        this.base = new URL(url);
    }

	@Test
    public void case001TestFindAllCategory() throws Exception {
	    String expectedJson =
	            loadJsonAsString("cloud-category-service/src/test/java/com/iiht/emart/category/testRecourses/case001/response.json");
        ResponseEntity<String> response = this.restTemplate.getForEntity(
                this.base.toString() + "/api/category", String.class, "");
        Assert.assertEquals(response.getStatusCodeValue(), 200);
        Assert.assertEquals(response.getBody(), expectedJson);

        System.out.println(String.format("测试结果为：%s", response.getBody()));
    }

	  public static String loadJsonAsString(String path) throws IOException, URISyntaxException {
		    return Files.lines(Paths.get(
		        ClassLoader.getSystemResource(path).toURI()),
		        StandardCharsets.UTF_8).collect(Collectors.joining());
		  }

}
