<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Quarkus, a Kubernetes-native Java runtime, now fully supported by Red Hat</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XMTvt8ZxM4I/" /><category term="Cloud Native" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="kubernetes-native" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="reactive programming" scheme="searchisko:content:tags" /><author><name>jebeck</name></author><id>searchisko:content:id:jbossorg_blog-quarkus_a_kubernetes_native_java_runtime_now_fully_supported_by_red_hat</id><updated>2020-05-28T07:00:56Z</updated><published>2020-05-28T07:00:56Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; was introduced 25 years ago, and to this day, remains one of the most popular programming languages among developers. However, Java has developed a reputation for not being a good fit for &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/topics/cloud-native-apps"&gt;cloud-native applications&lt;/a&gt;. Developers look for (and often choose) alternative frameworks such as Go and &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt; to support their cloud-native development requirements.&lt;/p&gt; &lt;p&gt;Why learn another language when you can use your existing skills? &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; allows Java developers to leverage their expertise to develop cloud-native, &lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;event-driven&lt;/a&gt;, &lt;a href="https://developers.redhat.com/coderland/reactive/"&gt;reactive&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;serverless&lt;/a&gt; applications. Quarkus provides a cohesive Java platform that feels familiar but new at the same time. Not only does it leverage existing Java standards, but it also provides a number of features that optimize developer joy, including live coding, unified configuration, IDE plugins, and more.&lt;/p&gt; &lt;p&gt;Recently, &lt;a href="https://www.redhat.com/en/about/press-releases/red-hat-advances-java-kubernetes-delivers-quarkus-fully-supported-runtime-cloud-native-development?source=pressreleaselisting"&gt;Red Hat announced support for Quarkus&lt;/a&gt;. With Quarkus, Red Hat advances Java on &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; and bridges the gap between traditional Java applications and cloud-native environments.&lt;/p&gt; &lt;p&gt;&lt;span id="more-725657"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What is Quarkus?&lt;/h2&gt; &lt;p&gt;Quarkus is more than just a runtime. It is a Kubernetes-native Java stack for building fast, lightweight microservices and serverless applications. It is purpose-built to capitalize on the benefits of cloud-native applications. Quarkus delivers significant runtime efficiencies for applications deployed on Kubernetes with fast startup times, low memory utilization, and small image footprints.&lt;/p&gt; &lt;h2&gt;A modern Java stack&lt;/h2&gt; &lt;p&gt;One of the founding principles of &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt;the Quarkus project&lt;/a&gt; was to &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/vision/developer-joy"&gt;bring developer joy to enterprise Java developers&lt;/a&gt;. What does that mean, and how does Quarkus bring joy?&lt;/p&gt; &lt;h3&gt;Kubernetes-native Java&lt;/h3&gt; &lt;p&gt;Quarkus is a &lt;a href="https://developers.redhat.com/blog/2020/04/08/why-kubernetes-native-instead-of-cloud-native/"&gt;Kubernetes-native&lt;/a&gt; Java framework targeted for containers and serverless due to its fast startup, low memory, and small application size.&lt;/p&gt; &lt;h3&gt;Developer joy&lt;/h3&gt; &lt;p&gt;Quarkus works out of the box with popular Java standards, frameworks, and libraries. Developers familiar with these will &lt;a href="https://developers.redhat.com/blog/2019/10/24/bring-joy-to-development-with-quarkus-the-cloud-native-java-framework/"&gt;feel at home with Quarkus&lt;/a&gt;, which streamlines code for 80% of common use cases while providing the flexibility to cover the remaining 20%.&lt;/p&gt; &lt;p&gt;Quarkus also provides live coding for fast iteration during development, where code changes are automatically and immediately reflected in the running app.&lt;/p&gt; &lt;h3&gt;Unified imperative and reactive programming models&lt;/h3&gt; &lt;p&gt;Developers can choose &lt;a href="https://developers.redhat.com/blog/2019/11/18/how-quarkus-brings-imperative-and-reactive-programming-together/"&gt;the right programming model&lt;/a&gt; that best fits their use case, and easily integrate their code with other components in a reactive system—like reactive streams—with &lt;a target="_blank" rel="nofollow" href="https://vertx.io/"&gt;Vert.x&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://kafka.apache.org/"&gt;Kafka&lt;/a&gt;, reactive database APIs, and much more.&lt;/p&gt; &lt;h3&gt;90 standards and libraries&lt;/h3&gt; &lt;p&gt;The Quarkus community has developed &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/extensions/"&gt;over 90 extensions&lt;/a&gt; that provide additional enhancements and integrations to the framework, including the ability to compile an application into a native executable.&lt;/p&gt; &lt;h2&gt;&lt;b&gt;How does it work?&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Traditional Java stacks are optimized for monolithic applications where lots of work occurs when the application is started. This dynamic behavior creates unnecessary overhead in a Kubernetes environment where containers are scaled up or down quickly with relatively short lifespans. Quarkus moves as much of that processing to the build phase such as optimizing library frameworks, minimizing dependencies, and eliminating unused code to greatly reduce startup time and the memory needs of the application. &lt;/p&gt; &lt;p&gt;Developers can choose to deploy their applications in JVM mode or compiled and run in native mode. Both delivery modes provide significant performance improvements versus traditional java stacks. &lt;/p&gt; &lt;h2&gt;Why choose the Red Hat build of Quarkus?&lt;/h2&gt; &lt;p&gt;Red Hat has long been a leader in the Java community and remains committed to moving it forward through open, community-driven innovation. With the &lt;a href="https://developers.redhat.com/products/quarkus/overview"&gt;Red Hat build of Quarkus&lt;/a&gt;, developers are getting a fully supported technology that includes an active community, continuous updates, and a fast release cadence. Quarkus is advancing quickly and Red Hat is committed to supporting developers as they adopt, deploy, and maintain Kubernetes-native Java applications.&lt;/p&gt; &lt;p&gt;Quarkus support is available via &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/products/runtimes"&gt;Red Hat Runtimes&lt;/a&gt;, which provides top integrated products, migration tools, and components to create cloud-native applications while also speeding up development and delivery time. Red Hat Runtimes offers developers and architects the choice of the right tool for the right task through a collection of lightweight runtimes and frameworks for highly-distributed cloud architectures—like microservices—with in-memory caching for fast data access, and messaging for quick data transfer between existing applications.&lt;/p&gt; &lt;p&gt;Quarkus uses an extension framework that creates a vibrant ecosystem to integrate with other &lt;a href="https://developers.redhat.com/middleware/"&gt;Red Hat Middleware&lt;/a&gt; products such as &lt;a href="https://developers.redhat.com/products/amq/overview"&gt;Red Hat AMQ Streams&lt;/a&gt; (Kafka), &lt;a href="https://developers.redhat.com/products/fuse/overview"&gt;Red Hat Fuse&lt;/a&gt; (Camel K), and &lt;a href="https://developers.redhat.com/products/rhpam/overview"&gt;Red Hat Process Automation Manager&lt;/a&gt; (Kogito).&lt;/p&gt; &lt;p&gt;Quarkus is also optimized to run on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; providing an ideal hybrid-cloud application development environment for scalable, fast, and lightweight applications. Using Red Hat OpenShift and a cloud-native development toolchain including Quarkus, developers can significantly increase their productivity and ability to drive innovation.&lt;/p&gt; &lt;h2&gt;Red Hat support&lt;/h2&gt; &lt;p&gt;With a Red Hat subscription, you have access to a global network of the most experienced, motivated, and knowledgeable &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Linux&lt;/a&gt;, Kubernetes, and middleware support engineers. They can virtually extend your in-house expertise as you develop on Red Hat enterprise products. Support engineers are here to help you with advice and guidance throughout the development process.&lt;/p&gt; &lt;h2&gt;Additional resources&lt;/h2&gt; &lt;p&gt;Check out these resources for getting started with Red Hat&amp;#8217;s build of Quarkus:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://code.quarkus.redhat.com/"&gt;Start Coding&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_quarkus/1.3/"&gt;Documentation&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/4966181"&gt;Supported Configurations&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt;Participate&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#38;linkname=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fquarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat%2F&amp;#038;title=Quarkus%2C%20a%20Kubernetes-native%20Java%20runtime%2C%20now%20fully%20supported%20by%20Red%20Hat" data-a2a-url="https://developers.redhat.com/blog/2020/05/28/quarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat/" data-a2a-title="Quarkus, a Kubernetes-native Java runtime, now fully supported by Red Hat"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/28/quarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat/"&gt;Quarkus, a Kubernetes-native Java runtime, now fully supported by Red Hat&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XMTvt8ZxM4I" height="1" width="1" alt=""/&gt;</content><summary>Java was introduced 25 years ago, and to this day, remains one of the most popular programming languages among developers. However, Java has developed a reputation for not being a good fit for cloud-native applications. Developers look for (and often choose) alternative frameworks such as Go and Node.js to support their cloud-native development requirements. Why learn another language when you can...</summary><dc:creator>jebeck</dc:creator><dc:date>2020-05-28T07:00:56Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/28/quarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat/</feedburner:origLink></entry><entry><title>How the fabric8 Maven plug-in deploys Java applications to OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FntGijRVla0/" /><category term="apache maven" scheme="searchisko:content:tags" /><category term="builder image" scheme="searchisko:content:tags" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="fabric8" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>kboone</name></author><id>searchisko:content:id:jbossorg_blog-how_the_fabric8_maven_plug_in_deploys_java_applications_to_openshift</id><updated>2020-05-28T07:00:00Z</updated><published>2020-05-28T07:00:00Z</published><content type="html">&lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://fabric8.io/"&gt;fabric8 Maven plug-in&lt;/a&gt;, often abbreviated FMP, can be added to a Maven Java project and takes care of the administrative tasks involved in deploying the application to a &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt; cluster. These tasks include:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Creating an OpenShift build configuration (BC).&lt;/li&gt; &lt;li&gt;Coordinating the source-to-image (S2I) process to create a container image from the application&amp;#8217;s compiled bytecode.&lt;/li&gt; &lt;li&gt;Creating and instantiating a deployment configuration (DC) from information in the project.&lt;/li&gt; &lt;li&gt;Defining and instantiating OpenShift services and routes.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;All of the relevant components of this process are well-documented individually. This article pulls together documentation sources to create an overview of how the plug-in works, and the structure of the image it generates—which might make the plug-in easier to use and troubleshoot.&lt;/p&gt; &lt;p&gt;&lt;span id="more-718217"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;A note about versions&lt;/h2&gt; &lt;p&gt;There are subtly-different upstream and Red Hat versions of the fabric8 Maven plug-in. They differ not only in how they are configured and used but also in the set-up required on OpenShift. In particular, the plug-in assumes that certain container images will be available in the OpenShift installation. The Red Hat and upstream versions make different assumptions in this regard.&lt;/p&gt; &lt;p&gt;This article focuses on the Red Hat version. The OpenShift setup for this plug-in is &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.5/html-single/fuse_on_openshift_guide/index#install-fuse-on-openshift3"&gt;documented here for OpenShift 3&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.5/html-single/fuse_on_openshift_guide/index#install-fuse-on-openshift4"&gt;here for OpenShift 4&lt;/a&gt;, although later versions might be available.&lt;/p&gt; &lt;p&gt;Not all of the documented setup is required simply to use the deployment plug-in—the mandatory part is installing the image streams. Of course, you might need the rest of the installation for other purposes.&lt;/p&gt; &lt;p style="padding-left: 40px"&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also check out this quick &lt;a href="https://developers.redhat.com/blog/2020/05/20/getting-started-with-the-fabric8-kubernetes-java-client/"&gt;Getting started with the fabric8 Kubernetes Java client&lt;/a&gt; article for more information.&lt;/p&gt; &lt;h2 style="text-align: left"&gt;Adding the plug-in to a Maven project&lt;/h2&gt; &lt;p style="text-align: left"&gt;To use the FMP in zero-configuration mode, just add the &lt;code&gt;plugin&lt;/code&gt; specification to a Maven &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;build&amp;#62; &amp;#60;plugins&amp;#62; &amp;#60;plugin&amp;#62; &amp;#60;groupId&amp;#62;org.jboss.redhat-fuse&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;fabric8-maven-plugin&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${fuse.bom.version}&amp;#60;/version&amp;#62; &amp;#60;/plugin&amp;#62; &amp;#60;/plugins&amp;#62; ...&lt;/pre&gt; &lt;p style="text-align: left"&gt;Doing this makes the Maven operations &lt;code&gt;fabric8:deploy&lt;/code&gt;, &lt;code&gt;fabric8:build&lt;/code&gt;, etc., available. In order to make build and deployment a one-step operation, we can bind the various goals like this:&lt;/p&gt; &lt;pre&gt; &amp;#60;plugin&amp;#62; ... &amp;#60;executions&amp;#62; &amp;#60;execution&amp;#62; &amp;#60;id&amp;#62;fabric8&amp;#60;/id&amp;#62; &amp;#60;goals&amp;#62; &amp;#60;goal&amp;#62;resource&amp;#60;/goal&amp;#62; &amp;#60;goal&amp;#62;build&amp;#60;/goal&amp;#62; &amp;#60;/goals&amp;#62; &amp;#60;/execution&amp;#62; &amp;#60;/executions&amp;#62; &amp;#60;/plugin&amp;#62; ....&lt;/pre&gt; &lt;p style="text-align: left;padding-left: 40px"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Different versions of the Maven fabric8 plug-in have subtle differences in the dependencies between goals, and this binding configuration is not always needed.&lt;/p&gt; &lt;p style="text-align: left"&gt;In the zero-configuration mode of operations, the Maven fabric8 plug-in is (like everything else in Maven) &lt;em&gt;opinionated&lt;/em&gt;. This mode makes many assumptions about the structure of its input, and how it should operate. However, many configuration parameters are available to tune its behavior. For example, OpenShift resource limits can be set in the plug-in configuration in &lt;code&gt;pom.xml&lt;/code&gt; like this:&lt;/p&gt; &lt;pre&gt; &amp;#60;configuration&amp;#62; &amp;#60;resources&amp;#62; &amp;#60;openshiftBuildConfig&amp;#62; &amp;#60;limits&amp;#62; &amp;#60;cpu&amp;#62;100m&amp;#60;/cpu&amp;#62; &amp;#60;memory&amp;#62;256Mi&amp;#60;/memory&amp;#62; &amp;#60;/limits&amp;#62; &amp;#60;/openshiftBuildConfig&amp;#62; &amp;#60;/resources&amp;#62; &amp;#60;/configuration&amp;#62;&lt;/pre&gt; &lt;p style="text-align: left"&gt;An alternative approach to configuring the resulting OpenShift deployment is to include YAML fragments in the application source, as explained in the next section.&lt;/p&gt; &lt;h2 style="text-align: left"&gt;Starting a deployment&lt;/h2&gt; &lt;p style="text-align: left"&gt;In simple cases, we can initiate a full assembly and deployment to OpenShift like this:&lt;/p&gt; &lt;pre&gt;$ mvn fabric8:deploy&lt;/pre&gt; &lt;p style="text-align: left"&gt;After the regular Maven build, the fabric8 Maven plug-in creates (in due course) an OpenShift image and domain configuration. The DC specifies one replica (pod) by default. All of the OpenShift entities created will have names based on the Maven artifact ID in &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt; &lt;p style="text-align: left"&gt;Note that the plugin does not use the &lt;code&gt;oc&lt;/code&gt; command. However, unless we provide a specific configuration, fabric8 will use the information that &lt;code&gt;oc&lt;/code&gt; stores about the user credentials and OpenShift namespace. This information is typically stored in &lt;code&gt;$HOME/.kube/config&lt;/code&gt;. In practice, then, it is usual to run the Maven deployment after &lt;code&gt;oc login&lt;/code&gt; and &lt;code&gt;oc project&lt;/code&gt;.&lt;/p&gt; &lt;h2 style="text-align: left"&gt;The deployment process&lt;/h2&gt; &lt;p style="text-align: left"&gt;In outline, the FMP uses the binary source-to-image (binary S2I) process to create an OpenShift image containing the binaries supplied by the regular Maven build. In many cases, the application&amp;#8217;s binary will be a &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; &lt;em&gt;fat&lt;/em&gt; (self-contained) JAR. In such cases, the S2I process passes the fat JAR to a builder image, which creates a new image. This image contains the fat JAR, the JVM, and various scripts. Not all application types are supported by the plug-in result in a fat JAR. In some cases, the plug-in may have a more substantial assembly task before it can deploy anything to OpenShift.&lt;/p&gt; &lt;p style="text-align: left;padding-left: 40px"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;fabric8:deploy&lt;/code&gt; target implies &lt;code&gt;fabric8:build&lt;/code&gt;, &lt;code&gt;fabric8:resource&lt;/code&gt;, and &lt;code&gt;fabric8:apply&lt;/code&gt;.&lt;/p&gt; &lt;p style="text-align: left"&gt;The &lt;code&gt;fabric8:build&lt;/code&gt; step invokes OpenShift to generate an image stream for the application. The plug-in creates and installs an OpenShift build configuration (BC) whose name is the Maven artifact name with &lt;code&gt;-s2i&lt;/code&gt; appended. The BC specifies the base image for the build.&lt;/p&gt; &lt;p style="text-align: left"&gt;Examining a typical BC in YAML format, we see:&lt;/p&gt; &lt;pre&gt; strategy: sourceStrategy: from: kind: ImageStreamTag name: fuse7-java-openshift:1.5 namespace: openshift type: Source&lt;/pre&gt; &lt;p style="text-align: left"&gt;The BC indicates that OpenShift will build the image using the (binary) source-to-image strategy, with &lt;code&gt;fuse7-java-openshift&lt;/code&gt; as the builder image. This same builder image is used for all the fat-JAR project types.&lt;/p&gt; &lt;p style="text-align: left"&gt;When the plug-in has created the BC, it invokes a build on it. This results in a build pod being instantiated and executed. The build pod will have a name of the form:&lt;/p&gt; &lt;pre&gt; [artifact_id]-s2i-NNN-build &lt;/pre&gt; &lt;p style="text-align: left"&gt;where NNN is the build number. All being well, the build pod runs to completion and results in a new image. If this is the first build, it will create a new image stream for the image. However, the image cannot yet be instantiated into a pod, because there is no deployment configuration.&lt;/p&gt; &lt;p style="text-align: left"&gt;Regardless of the project type, by default, the application&amp;#8217;s compiled binaries end up in the generated pod&amp;#8217;s &lt;code&gt;/deployments&lt;/code&gt; directory. Other supporting infrastructure may also be placed in that directory if the project type requires it.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;fabric8:resource&lt;/code&gt; step generates the specific OpenShift resources needed to specify how the application is instantiated in a pod. These resources are written in YAML format and will always contain a deployment configuration. Other OpenShift resources, such as service definitions, can also be generated at this stage. The &lt;code&gt;fabric8:resource&lt;/code&gt; operation is primarily local &amp;#8212; it generates files in the project&amp;#8217;s &lt;code&gt;target/&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;fabric8:apply&lt;/code&gt; step takes the configuration generated by the &lt;code&gt;resource&lt;/code&gt; step and applies it to the OpenShift installation. The primary step here is the instantiation of the DC generated by the &lt;code&gt;resource&lt;/code&gt; step on OpenShift. This DC will have the same name as the Maven artifact, and specify the image generated by the builder as its container. This step should result in a single pod running the application.&lt;/p&gt; &lt;p&gt;It is a peculiarity of the S2I process that the image created by the builder is derived from the builder itself. The generated image will be almost an exact copy of the builder, with the addition of the executable application code and some configuration. As a result, the OpenShift images created by the FMP will contain a complete installation of Maven and a Java compiler, even though they will never be used. Various techniques are available for post-processing images to remove this unnecessary content.&lt;/p&gt; &lt;h2&gt;Generators&lt;/h2&gt; &lt;p&gt;The Maven fabric8 plug-in can produce images based on &lt;a href="https://developers.redhat.com/topics/spring-boot/"&gt;Spring Boot&lt;/a&gt;, Karaf, &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform (JBoss EAP)&lt;/a&gt;, plain Java, and other project types. Pluggable &lt;em&gt;generators&lt;/em&gt; are used to control the process of building OpenShift-ready binaries from the Maven project and providing the appropriate configuration. I will outline the Java, Spring Boot, and Karaf generators in particular because the similarities and differences between them are instructive.&lt;/p&gt; &lt;p&gt;Unless configured otherwise, all installed generators are available and will be activated through certain project features. For example, the Spring Boot generator is activated by the presence in the project of a &lt;code&gt;spring-boot-starter&lt;/code&gt; dependency. If none of the other, more specific generators are activated, the project may be treated as a plain Java executable. For a project to be treated as plain Java, it must produce a single JAR with a &lt;code&gt;Main-Class&lt;/code&gt; attribute in its manifest.&lt;/p&gt; &lt;p&gt;If the Maven project does not activate any generators, that mistake might not cause the build to fail, which can be rather confusing. The build might appear to succeed, yet not have any effect on OpenShift. As a result, you might see a warning message like this:&lt;/p&gt; &lt;pre&gt; [WARNING] F8: No image build configuration found or detected&lt;/pre&gt; &lt;p&gt;To some extent, the choice of generators can be controlled in configuration, if the plug-in does not select the correct one. Each generator has its own specific configuration that can be used to fine-tune its operation. Unless it is overridden in configuration, the generator will select the builder image to use.&lt;/p&gt; &lt;p&gt;At present all stand-alone Java applications, including Spring Boot, get &lt;code&gt;fuse7-java-openshift&lt;/code&gt; as the builder. Karaf- and EAP-applications get their own specific builders.&lt;/p&gt; &lt;h3&gt;Java generator&lt;/h3&gt; &lt;p&gt;Java is the most fundamental of all the supported project types. The generator can create a Maven deployment from any self-contained executable JAR file, creating a rudimentary DC that specifies a single replica (pod) with the rolling update strategy. The DC:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Exposes various ports: 9779 for the Prometheus monitoring tool and 8778 for the Jolokia JMX agent. These services are enabled by default in the generated image, as I will explain later.&lt;/li&gt; &lt;li&gt;Exposes port 8080, lacking any other configuration. It has no particular reason to do so, except that this is a popular port for applications that service HTTP requests.&lt;/li&gt; &lt;li&gt;Does not create liveness or readiness probes. The generator has no way to guess suitable values for these, if they even exist.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Spring Boot generator&lt;/h3&gt; &lt;p&gt;The Spring Boot generator is a specialization of the Java generator and shares most of the same configuration. Like the Java generator, the Spring Boot generator takes a fat JAR as its input. However, the Spring Boot generator is aware of certain conventions in the way Spring Boot applications are typically structured. It can thus provide a more effective DC for this type of application.&lt;/p&gt; &lt;p&gt;For example, if the &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt; dependency is included in the project, the generator assumes that the actuator health check endpoints can be used for liveness and readiness probes. The generated DC will contain the following additional configuration:&lt;/p&gt; &lt;pre&gt; readinessProbe: failureThreshold: 3 httpGet: path: /health port: 8080&lt;/pre&gt; &lt;p&gt;Port 8080 is the default, which might not be appropriate. If the actuator is enabled, the generator will also read &lt;code&gt;application.properties&lt;/code&gt; from the application&amp;#8217;s source, to determine if there is a setting like this:&lt;/p&gt; &lt;pre&gt;management.port=8081&lt;/pre&gt; &lt;p&gt;If this setting exists, it is used in the DC for the liveness/readiness probes. Other ports might be exposed in the DC if the Spring Boot configuration suggests them.&lt;/p&gt; &lt;p&gt;It should be clear that the Spring Boot generator relies on the developer following established conventions about source format. However, since the Spring Boot Maven build more-or-less enforces the use of these conventions, there is probably no additional work to do to use the plug-in.&lt;/p&gt; &lt;h3&gt;Karaf generator&lt;/h3&gt; &lt;p&gt;Unlike the Spring Boot and Java generators, the Karaf generator does not take a self-contained executable JAR as its input. Instead, it takes one or more OSGi bundles. These are still JAR files, but with specific OSGi-compliant meta-data that describes the interaction contract between the bundles.&lt;/p&gt; &lt;p&gt;OSGi applications need a supporting framework; that is the role played by Karaf.&lt;/p&gt; &lt;p&gt;The presence of specific metadata in the application JARs makes it impractical to deploy a single, self-contained JAR that also contains the Karaf framework. Instead, the Karaf generator copies an entire Karaf installation into &lt;code&gt;target/assembly/&lt;/code&gt;. It then transfers this setup to the generated image along with the application&amp;#8217;s JARs. All of this content ends up in the &lt;code&gt;/deployments&lt;/code&gt; directory, along with scripts for starting Karaf with the application&amp;#8217;s bundles.&lt;/p&gt; &lt;p&gt;The Karaf installation that is generated includes a general HTTP server on port 8181. This typically services not only application components, but also parts of the Karaf infrastructure. This port can be used for health checks, and the generated DC will specify liveness and readiness probes based on those health checks.&lt;/p&gt; &lt;h2&gt;Services and routes&lt;/h2&gt; &lt;p&gt;As we&amp;#8217;ve seen, the various generators will expose ports in the OpenShift DC, based either on information found by probing the project or on common defaults. These port assignments can be overridden in various ways, as explained in the FMP documentation.&lt;/p&gt; &lt;p&gt;However, merely exposing a port in the DC does not make the application available externally. For that, we need to create OpenShift services and routes. By default, FMP generators assume that there is a single web port that acts as the basis for a service and a route. For Karaf applications, the generator creates both the OpenShift DC &lt;em&gt;and&lt;/em&gt; the application&amp;#8217;s HTTP infrastructure. Consequently, the plug-in can always define a service correctly—provided, of course, that the developer actually wants to expose HTTP services.&lt;/p&gt; &lt;p&gt;The Spring Boot generator makes an assumption that the application will expose a single HTTP service, and it will either be on port 8080 or specified in &lt;code&gt;application.properties&lt;/code&gt;. Again, so long as there is one service, and it actually should be exposed, the generator will create the correct definition.&lt;/p&gt; &lt;p&gt;For plain Java projects, the generator just guesses that a service should be exposed on port 8080. If this setting isn&amp;#8217;t correct, you will need to override the generator&amp;#8217;s behavior or specify your own service definitions. Of course, it&amp;#8217;s possible to do this with the other generators as well.&lt;/p&gt; &lt;p&gt;Service definitions are generated in YAML format in the &lt;code&gt;target/classes/META-INF/&lt;/code&gt; directory during the &lt;code&gt;fabric8:resource&lt;/code&gt; step. They are installed on OpenShift during the &lt;code&gt;fabric8:apply&lt;/code&gt; step. Of course, these individual steps might well be subsumed into a single invocation of &lt;code&gt;fabric8:deploy&lt;/code&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Although the generated image will include Prometheus and Jolokia agents—each of which has an HTTP port—by default, these agents are not defined as services as they are used entirely in pod-to-pod communication.&lt;/p&gt; &lt;p&gt;By default the FMP creates services in such a way that they automatically create routes as well. The service definition that is instantiated contains the section:&lt;/p&gt; &lt;pre&gt; metadata: labels: expose: "true"&lt;/pre&gt; &lt;p&gt;The automatically created route will be unencrypted. This setup is often not what is required, and it&amp;#8217;s &lt;em&gt;definitely&lt;/em&gt; not what is required for any application that handles any other protocol than HTTP. Why? The OpenShift router cannot route other protocols without the Service Name Identification (SNI) information that is found in TLS-encrypted communications.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s possible to configure the FMP to create other kinds of routes, or no route at all. This capability is described in the &lt;a target="_blank" rel="nofollow" href="https://maven.fabric8.io/"&gt;fabric8 Maven plug-in documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Configuration using YAML fragments&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve seen how the FMP generates an OpenShift DC with sane defaults. However, it&amp;#8217;s often necessary to make at least slight modifications to the generated DC. To some extent, these modifications can be made to the plug-in configuration in &lt;code&gt;pom.xml&lt;/code&gt;, but a more flexible approach is to provide a complete or partial DC along with the application.&lt;/p&gt; &lt;p&gt;In most cases, providing a complete DC won&amp;#8217;t be convenient or appropriate. Instead, the FMP will merge a fragment of YAML code from the file &lt;code&gt;src/main/fabric8/deployment.yml&lt;/code&gt; into the DC it generates from the Maven project. Merging is done hierarchically: We can provide additions or modifications to multiple sections of the DC by placing the changes at the right point in the hierarchy.&lt;/p&gt; &lt;p&gt;Here is an example of a &lt;code&gt;deployment.xml&lt;/code&gt; that will specify resource limits for the pod:&lt;/p&gt; &lt;pre&gt; spec: template: spec: containers: - resources: requests: cpu: "0.2" memory: 128Mi limits: cpu: "1.0" memory: 512Mi&lt;/pre&gt; &lt;p&gt;Here is an example that sets an environment variable:&lt;/p&gt; &lt;pre&gt; spec: template: spec: containers: - env: - name: JAVA_OPTIONS value: '-verbose:gc'&lt;/pre&gt; &lt;p style="padding-left: 40px"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The YAML syntax is a bit fussy here. We often need to be careful to add to the relevant sections, rather than replacing them completely.&lt;/p&gt; &lt;p&gt;The ability to set environment variables in the DC can be important because the application does not directly control the JVM configuration—this is done by scripts in the generated image, as I will explain&lt;br /&gt; later.&lt;/p&gt; &lt;h2&gt;The generated image&lt;/h2&gt; &lt;p&gt;The generated image will contain the JVM, the application&amp;#8217;s binaries, any supporting infrastructure created by the FMP generator, and scripts to start the application. For the reasons I described earlier, it will also contain build tools that are not used at runtime, and which you will probably want to remove for production deployment.&lt;/p&gt; &lt;p&gt;For all project types, the image is configured to start execution by running the script:&lt;/p&gt; &lt;pre&gt;/usr/local/s2i/run&lt;/pre&gt; &lt;p&gt;The contents of this script vary according to the project type. For fat-JAR projects, the script will invoke:&lt;/p&gt; &lt;pre&gt;/opt/run-java/run-java.sh&lt;/pre&gt; &lt;p&gt;The&lt;code&gt;run-java.sh&lt;/code&gt; script is highly configurable using environment variables; but, unless a specific application is given, it will search the &lt;code&gt;/deployments&lt;/code&gt; directory for an executable JAR, and run that. The S2I process places the application&amp;#8217;s JAR in that directory when building the image.&lt;/p&gt; &lt;p&gt;The Karaf generator, by contrast, creates an image that executes:&lt;/p&gt; &lt;pre&gt;/deployments/karaf/bin/karaf&lt;/pre&gt; &lt;p&gt;That is, the image runs the Karaf framework, which loads the application&amp;#8217;s OSGi bundles.&lt;/p&gt; &lt;p&gt;Whatever the project type, JVM execution is controlled by environment variables. Although these variables are documented, the documentation is distributed across different sources, and it might be easier to log into the running pod and examine the scripts to see what configuration they accept. Then environment variables can be written into the DC as I explained above.&lt;/p&gt; &lt;p&gt;Regardless of the project type, the generated JVM invocation will, by default, install Java agents for the Prometheus monitoring framework, and for the Jolokia JMX agent. The operations for both these agents are controlled by configuration files in the builder image and are not easy to change. However, both of these agents are configured to be integrated into Red Hat&amp;#8217;s monitoring and management frameworks for OpenShift, so changing the configuration might be counterproductive anyway.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;run-java.sh&lt;/code&gt; script provides default JVM configuration settings that are broadly suitable for running in a container environment. It does some fairly complex interrogation of the container&amp;#8217;s resource limits to work out, for example, the number of garbage collector threads to allocate. No specific limits are set for JVM heap size; there is no &lt;code&gt;-Xmx&lt;/code&gt; setting, for example. This setup is usually appropriate in a container environment, where the JVM is the only process running in the container and will have access to all of the container&amp;#8217;s memory. However, it might sometimes be appropriate to fine-tune the heap management settings, such as by allocating different fractions of memory to different heap generations. These settings can be made through environment variables if necessary.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;The fabric8 Maven plug-in automates a number of quite complex tasks and can accommodate many different Java-based applications. However, its operation is comprehensible if we break it down into individual steps.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#38;linkname=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F28%2Fhow-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift%2F&amp;#038;title=How%20the%20fabric8%20Maven%20plug-in%20deploys%20Java%20applications%20to%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/05/28/how-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift/" data-a2a-title="How the fabric8 Maven plug-in deploys Java applications to OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/28/how-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift/"&gt;How the fabric8 Maven plug-in deploys Java applications to OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FntGijRVla0" height="1" width="1" alt=""/&gt;</content><summary>The fabric8 Maven plug-in, often abbreviated FMP, can be added to a Maven Java project and takes care of the administrative tasks involved in deploying the application to a Red Hat OpenShift cluster. These tasks include: Creating an OpenShift build configuration (BC). Coordinating the source-to-image (S2I) process to create a container image from the application’s compiled bytecode. Creating and i...</summary><dc:creator>kboone</dc:creator><dc:date>2020-05-28T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/27/how-the-fabric8-maven-plug-in-deploys-java-applications-to-openshift/</feedburner:origLink></entry><entry><title>Hot Rod URI</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HoCaD86v5PI/" /><category term="documentation" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-hot_rod_uri</id><updated>2020-05-27T04:47:47Z</updated><published>2020-05-26T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Traditionally, the Java Hot Rod client has always been configured either via a properties file or through a programmatic builder API.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;While both approaches offer a great amount of flexibility, they always felt a bit too complex for straightforward scenarios.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Starting with Infinispan 11 you will be able to specify the connection to an Infinispan Server via a URI, just like you’d connect to a database via a JDBC driver URL.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hot Rod URI allows you to specify the addresses of the server cluster, authentication parameters and any other property in a simple compact String format.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The URI specification is:&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;code&gt;hotrod[s]://[username:password]@host[:port][,host[:port]…​][?property=value[&amp;amp;property=value…​]]&lt;/code&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;the protocol can be either &lt;code&gt;hotrod&lt;/code&gt; (plain, unencrypted) or &lt;code&gt;hotrods&lt;/code&gt; (TLS/SSL, encrypted)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;if username and password are specified, they will be used to authenticate with the server&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;one or more addresses. If a port is not specified, the default &lt;code&gt;11222&lt;/code&gt; will be used&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;zero or more &lt;a href="https://docs.jboss.org/infinispan/11.0/apidocs/org/infinispan/client/hotrod/configuration/package-summary.html"&gt;properties&lt;/a&gt;, without the &lt;code&gt;infinispan.client.hotrod&lt;/code&gt; prefix, through which you can configure all other aspects such as connection pooling, authentication mechanisms, near caching, etc.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Here are some examples:&lt;/p&gt; &lt;/div&gt; &lt;div class="dlist"&gt; &lt;dl&gt; &lt;dt class="hdlist1"&gt;&lt;code&gt;hotrod://localhost&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;simple connection to a server running on &lt;code&gt;localhost&lt;/code&gt; using the default port&lt;/p&gt; &lt;/dd&gt; &lt;dt class="hdlist1"&gt;&lt;code&gt;hotrod://joe:secret@infinispan-host-1:11222,infinispan-host-2:11222&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;authenticated connection to &lt;code&gt;infinispan-host-1&lt;/code&gt; and &lt;code&gt;infinispan-host-2&lt;/code&gt; with explicit port&lt;/p&gt; &lt;/dd&gt; &lt;dt class="hdlist1"&gt;&lt;code&gt;hotrods://infinispan-host-1?socket_timeout=1000&amp;amp;connect_timeout=2000&lt;/code&gt;&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;TLS/SSL connection to &lt;code&gt;infinispan-host-1&lt;/code&gt; using the default port and with custom connection and socket timeouts&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The URI format can also be used as a starting point in your usual properties file or API configuration and further enriched using the traditional methods:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;infinispan.client.hotrod.uri=hotrod://joe:secret@infinispan-host-1:11222,infinispan-host-2:11222 infinispan.client.hotrod.connect_timeout=100 infinispan.client.hotrod.socket_timeout=100 infinispan.client.hotrod.tcp_keep_alive=true&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;ConfigurationBuilder builder = &lt;span class="keyword"&gt;new&lt;/span&gt; ConfigurationBuilder() .uri(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;hotrod://joe:secret@infinispan-host-1:11222,infinispan-host-2:11222&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;) .socketTimeout(&lt;span class="integer"&gt;100&lt;/span&gt;) .connectionTimeout(&lt;span class="integer"&gt;100&lt;/span&gt;) tcpKeepAlive(&lt;span class="predefined-constant"&gt;true&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We hope this makes configuration simpler.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Happy coding!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HoCaD86v5PI" height="1" width="1" alt=""/&gt;</content><summary>Traditionally, the Java Hot Rod client has always been configured either via a properties file or through a programmatic builder API. While both approaches offer a great amount of flexibility, they always felt a bit too complex for straightforward scenarios. Starting with Infinispan 11 you will be able to specify the connection to an Infinispan Server via a URI, just like you’d connect to a databa...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-05-26T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/05/26/hotrod-uri/</feedburner:origLink></entry><entry><title>Build a Go application using OpenShift Pipelines</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FDZe9k6dDBs/" /><category term="buildah" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Go" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="RESTful service" scheme="searchisko:content:tags" /><category term="Tekton" scheme="searchisko:content:tags" /><author><name>Don Schenck</name></author><id>searchisko:content:id:jbossorg_blog-build_a_go_application_using_openshift_pipelines</id><updated>2020-05-26T07:00:54Z</updated><published>2020-05-26T07:00:54Z</published><content type="html">&lt;p&gt;Go is an increasingly popular programming language, and frequently chosen for developing command-line utilities. Many tools used with &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; are written in &lt;a href="https://developers.redhat.com/blog/category/go/"&gt;Go&lt;/a&gt;, including the command-line interfaces (CLIs) for Tekton (&lt;code&gt;tkn&lt;/code&gt;), OpenShift (&lt;code&gt;oc&lt;/code&gt;), and Kubernetes (&lt;code&gt;kubectl&lt;/code&gt;). Also, developers can compile Go to a single executable for a broad range of operating systems. As a result, it&amp;#8217;s easy to develop and desk-test applications before putting them into containers and running those containers in OpenShift.&lt;/p&gt; &lt;p&gt;In a meta sort of way, this is an article about a tutorial, where I show you &lt;a target="_blank" rel="nofollow" href="https://redhat-developer-demos.github.io/openshift-pipelines-workshop"&gt;how to build and deliver a small Go RESTful service using OpenShift Pipelines&lt;/a&gt;. You could just jump to the tutorial now, but I suggest reading this article first. I&amp;#8217;ll quickly introduce the working environment for the tutorial, and I&amp;#8217;ll explain my logic for setting up the tutorial the way that I did.&lt;/p&gt; &lt;p&gt;&lt;span id="more-700937"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s included in the OpenShift Pipelines Workshop tutorial&lt;/h2&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://redhat-developer-demos.github.io/openshift-pipelines-workshop"&gt;OpenShift Pipelines Workshop tutorial&lt;/a&gt; includes two GitHub repositories. One repository contains the tutorial and two YAML files that you will use for the example application. The other repository contains the Go service that you will build. The tutorial also references the &lt;a target="_blank" rel="nofollow" href="https://github.com/openshift/pipelines-catalog"&gt;OpenShift Pipelines Catalog&lt;/a&gt;, an open source library of reusable pipeline assets. This catalog is an excellent example of the open source world and how it produces valuable community-wide solutions.&lt;/p&gt; &lt;p&gt;In the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/openshift-pipelines-workshop.git"&gt;tutorial repository&lt;/a&gt;, you&amp;#8217;ll find two YAML files: &lt;code&gt;qotd-pipeline.yaml&lt;/code&gt; and &lt;code&gt;sub.yaml&lt;/code&gt;. The &lt;code&gt;sub&lt;/code&gt; file creates the OpenShift Pipelines Operator, while &lt;code&gt;qotd-pipeline&lt;/code&gt; defines the pipeline to be used.&lt;/p&gt; &lt;p&gt;In the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/qotd.git"&gt;source code repository&lt;/a&gt;, you&amp;#8217;ll find the Go code for the service. You&amp;#8217;ll find a Dockerfile that you can use to create an image. You will also find three YAML files in the &lt;code&gt;/k8s&lt;/code&gt; directory. Those files define the &lt;code&gt;DeploymentConfig&lt;/code&gt;, &lt;code&gt;Service&lt;/code&gt;, and &lt;code&gt;Route&lt;/code&gt; that you will create. Keeping those artifacts in the same repo as the source code makes sense, and it puts all the related pieces in one, easily accessible spot.&lt;/p&gt; &lt;h2&gt;The build environment&lt;/h2&gt; &lt;p&gt;OpenShift Pipelines relies on Tekton, which is Knative&amp;#8217;s container-based build component. Tekton uses tasks to get work done, such as building the Linux Open Container Initiative (OCI)-compliant image. In this case, I call the image &amp;#8220;OCI-compliant&amp;#8221; because we don&amp;#8217;t use the &lt;code&gt;docker&lt;/code&gt; command to build anything. Instead, we&amp;#8217;ll use the open source &lt;code&gt;buildah&lt;/code&gt; system. The &lt;code&gt;buildah&lt;/code&gt; task is contained in the aforementioned OpenShift Pipelines Catalog and is included when you install the OpenShift Pipelines Operator. This is one of several cluster-wide tasks we&amp;#8217;ll use for this project. You can see a list of all the tasks by running &lt;code&gt;tkn clustertask ls&lt;/code&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;About OCI&lt;/strong&gt;: &lt;a target="_blank" rel="nofollow" href="https://www.opencontainers.org/about"&gt;Open Container Initiative (OCI)&lt;/a&gt; is an open governance structure for creating open industry standards around container formats and runtimes. OCI says, &amp;#8220;build an image according to these standards, and it&amp;#8217;ll run as promised.&amp;#8221;&lt;/p&gt; &lt;h3&gt;What&amp;#8217;s great about buildah&lt;/h3&gt; &lt;p&gt;&lt;code&gt;buildah&lt;/code&gt; puts you in control of what gets built and how it&amp;#8217;s built. As an example, I have a Dockerfile in my source code, and I can use that to build and desk-test code on my local machine, regardless of the operating system I am using. When I move everything to OpenShift and use the pipeline, I can use the same Dockerfile to perform the build. I can rest assured (no pun intended) that the created executable and image will match what&amp;#8217;s on my machine. No more, &amp;#8220;but it worked on my machine.&amp;#8221; Using &lt;code&gt;buildah&lt;/code&gt;, I can deploy my code at 4:59 p.m. Friday and go home without another worry. (I added that last sentence just to get the folks in Operations riled up.)&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This quick article has been an introduction to my longer tutorial. Now you know where to find the components you need and why I put them there. It&amp;#8217;s time to head over to the &lt;a target="_blank" rel="nofollow" href="https://redhat-developer-demos.github.io/openshift-pipelines-workshop"&gt;GitHub workshop&lt;/a&gt; and get started with the tutorial!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#038;title=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" data-a2a-url="https://developers.redhat.com/blog/2020/05/26/build-a-go-application-using-openshift-pipelines/" data-a2a-title="Build a Go application using OpenShift Pipelines"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/26/build-a-go-application-using-openshift-pipelines/"&gt;Build a Go application using OpenShift Pipelines&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FDZe9k6dDBs" height="1" width="1" alt=""/&gt;</content><summary>Go is an increasingly popular programming language, and frequently chosen for developing command-line utilities. Many tools used with Kubernetes and Red Hat OpenShift are written in Go, including the command-line interfaces (CLIs) for Tekton (tkn), OpenShift (oc), and Kubernetes (kubectl). Also, developers can compile Go to a single executable for a broad range of operating systems. As a result, i...</summary><dc:creator>Don Schenck</dc:creator><dc:date>2020-05-26T07:00:54Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/26/build-a-go-application-using-openshift-pipelines/</feedburner:origLink></entry><entry><title>Infinispan 11.0.0.CR1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EBThKIKXcdA/" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_11_0_0_cr1</id><updated>2020-05-27T04:47:47Z</updated><published>2020-05-25T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Dear Infinispan community,&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;we’ve just released 11.0.0.CR1 which comes loaded with quite a few features and improvements.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_cross_site_replication_improvements"&gt;&lt;a class="anchor" href="#_cross_site_replication_improvements" /&gt;Cross-Site Replication Improvements&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The cross-site replication feature received two major improvements:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Support for multiple site masters&lt;/p&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The new algorithm is able to take advantage of multiple site masters, distributing load between them. If your environment is capable, increase the number of site masters in RELAY2 configuration:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;relay.RELAY2&lt;/span&gt; &lt;span class="attribute-name"&gt;site&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;LON&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;max_site_masters&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;1000&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Conflict detection and resolution for Asynchronous Cross-Site Replication&lt;/p&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Taking advantage of vector clocks, in asynchronous mode, Infinispan is able to detect conflicts. A conflict happens when 2 or more sites update the same key at the same time. Conflicts are resolved based on the site’s names. Updates from the site lexicographically lower, take priority, in case of conflicts. As an example, if you have 3 sites, LON, NYC and SFO, conflicts between LON and NYC discards updates from NYC and keeps the updates from LON. You can choose the priority by prepending a number to the site name. For example, if you want updates from NYC to take priority, you can set the site name to “1-NYC”.&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In a future update, Infinispan will allow you to set a custom conflict resolution algorithm.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_non_blocking_internals"&gt;&lt;a class="anchor" href="#_non_blocking_internals" /&gt;Non-blocking internals&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All thread pools collapsed into two pools: blocking and non-blocking&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_persistence"&gt;&lt;a class="anchor" href="#_persistence" /&gt;Persistence&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A new non-blocking Store SPI&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_clustering"&gt;&lt;a class="anchor" href="#_clustering" /&gt;Clustering&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;More accurate segment rebalancing&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scaling without state-transfer (experimental)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_queryindexing"&gt;&lt;a class="anchor" href="#_queryindexing" /&gt;Query/Indexing&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;SearchManager, CacheQuery are deprecated. Users are encouraged to migrate to Ickle String queries obtained from Search.getQueryFactory&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_server_security"&gt;&lt;a class="anchor" href="#_server_security" /&gt;Server Security&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The server is now secure by default&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New encrypted properties realm&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Simplified authentication and authorization configuration to be as automatic as possible&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_other_server_changes"&gt;&lt;a class="anchor" href="#_other_server_changes" /&gt;Other Server changes&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Datasources&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Runtime logging configuration&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Server report&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_cli"&gt;&lt;a class="anchor" href="#_cli" /&gt;CLI&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;User Tool merged into CLI&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CLI can be compiled natively&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Non-interactive usage&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_console"&gt;&lt;a class="anchor" href="#_console" /&gt;Console&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Lots of UX improvements&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_kubernetesopenshift_operator"&gt;&lt;a class="anchor" href="#_kubernetesopenshift_operator" /&gt;Kubernetes/OpenShift operator&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cache CR&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Service .Expose with Ingress and Route&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_container_images"&gt;&lt;a class="anchor" href="#_container_images" /&gt;Container images&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Images based upon ubi-minimal:8.2&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Native generation of config files in all images&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Native server image available at &lt;code&gt;infinispan/server-native&lt;/code&gt; (Experimental)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_documentation"&gt;&lt;a class="anchor" href="#_documentation" /&gt;Documentation&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Added procedural content for rolling upgrades, Cache CR with the Operator, server patching, misc CLI commands, using RemoteCacheConfigurationBuilder.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Procedural content for different upgrade and migration tasks included in Upgrade Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Operator and Spring Boot Starter guides now provide stable and development versions from the index page.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updated index.html and throughout documentation to improve high-level context and aid retrievability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Getting Started content updated and streamlined.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Applied several modifications, additions, and removals to documentation via community feedback.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_get_it_use_it_ask_us"&gt;&lt;a class="anchor" href="#_get_it_use_it_ask_us" /&gt;Get it, Use it, Ask us!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please &lt;a href="https://infinispan.org/download/"&gt;download&lt;/a&gt;, &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;report bugs&lt;/a&gt;, &lt;a href="https://infinispan.zulipchat.com/"&gt;chat with us&lt;/a&gt;, ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EBThKIKXcdA" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispan community, we’ve just released 11.0.0.CR1 which comes loaded with quite a few features and improvements. Cross-Site Replication Improvements The cross-site replication feature received two major improvements: Support for multiple site masters The new algorithm is able to take advantage of multiple site masters, distributing load between them. If your environment is capable, increas...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-05-25T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/05/25/infinispan-11/</feedburner:origLink></entry><entry><title>Red Hat build of Eclipse Vert.x 3.9 brings Fluent API Query</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TaPG4DzyFBY/" /><category term="concurrency" scheme="searchisko:content:tags" /><category term="eclipse java" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="java application" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="reactive programming" scheme="searchisko:content:tags" /><category term="Stream Processing" scheme="searchisko:content:tags" /><author><name>Syed M Shaaf</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_build_of_eclipse_vert_x_3_9_brings_fluent_api_query</id><updated>2020-05-25T07:00:12Z</updated><published>2020-05-25T07:00:12Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/middleware/"&gt;Red Hat Runtimes&lt;/a&gt; provides a set of comprehensive frameworks, runtimes, and programming languages for developers, architects, and IT leaders with cloud-native application development needs. The latest update to Red Hat Runtimes has arrived with Red Hat&amp;#8217;s build of Eclipse Vert.x version 3.9. Red Hat Runtimes provides application developers with a variety of application runtimes and lets them run on the &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift Container Platform&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A fluent API is a common pattern throughout Vert.x, it lets multiple methods calls be chained together. For example:&lt;/p&gt; &lt;pre&gt;request.response().putHeader("Content-Type", "text/plain").write("some text").end();&lt;/pre&gt; &lt;p&gt;Chaining calls like this also allows you to write code that’s a bit less verbose.&lt;/p&gt; &lt;p&gt;With 3.9, you can now create prepared statements and collector queries with the inclusion of &lt;code&gt;Query&lt;/code&gt; in the Fluent API. If you are familiar with JDBC, &lt;code&gt;PreparedStatement&lt;/code&gt; lets you create and execute statements. Moreover, you can run multiple interactions, such as cursor or stream operations.&lt;/p&gt; &lt;p&gt;&lt;span id="more-723687"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Creating a prepared statement&lt;/h2&gt; &lt;p&gt;To create a prepared statement:&lt;/p&gt; &lt;pre&gt;connection.prepare(sql, ar1 -&amp;#62; {  if (ar1.succeded()) {   PreparedStatement ps = ar1.result();   PreparedQuery&amp;#60;RowSet&amp;#60;Row&amp;#62;&amp;#62; pq = ps.query();     pq.execute(tuple, ar2 -&amp;#62; ...); // Or fluently   ps.query().execute(tuple, ar2 -&amp;#62; ...);  } });&lt;/pre&gt; &lt;h2&gt;Creating a collector query&lt;/h2&gt; &lt;p&gt;You can use the Java Collectors with Vert.x too. For example to create a collector query:&lt;/p&gt; &lt;pre&gt;PreparedQuery&amp;#60;RowSet&amp;#60;Row&amp;#62;&amp;#62; query = client.preparedQuery(sql); PreparedQuery&amp;#60;SqlResult&amp;#60;List&amp;#60;Row&amp;#62;&amp;#62; collectedQuery = query.collecting(Collectors.toList()); collectedQuery.execute(tuple, ar -&amp;#62; ...); // Or fluently client.preparedQuery(sql).collecting(Collectors.toList()).execute(tuple, ar -&amp;#62; ...);&lt;/pre&gt; &lt;p&gt;See these &lt;a target="_blank" rel="nofollow" href="https://github.com/vert-x3/vertx-examples/tree/master/cassandra-examples/src/main/java/io/vertx/example/cassandra/cassandra/prepared"&gt;Vert.x examples on GitHub&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Use Promise instead of Future&lt;/h2&gt; &lt;p&gt;Another important change in this release is the deprecation of the following methods: &lt;code&gt;start(Future&amp;#60;Void&amp;#62;)&lt;/code&gt; and &lt;code&gt;stop(Future&amp;#60;Void&amp;#62;)&lt;/code&gt;. The &lt;a target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/Promise.html#future--"&gt;&lt;code&gt;future()&lt;/code&gt;&lt;/a&gt; method returns the &lt;a title="interface in io.vertx.core" target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/Future.html"&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; associated with a promise. The future can then be used for getting notified of the promise&amp;#8217;s completion and retrieving its value.&lt;/p&gt; &lt;p&gt;Instead, use &lt;code&gt;start(Promise&amp;#60;Void&amp;#62;)&lt;/code&gt; and &lt;code&gt;stop(Promise&amp;#60;Void&amp;#62;)&lt;/code&gt;. These methods represent the writable side of an action that may, or may not, have occurred yet. A promise extends &lt;code&gt;Handler&amp;#60;AsyncResult&amp;#60;T&amp;#62;&amp;#62;&lt;/code&gt; so it can be used as a callback.&lt;/p&gt; &lt;h2&gt;Documentation&lt;/h2&gt; &lt;p&gt;For more details, take a look at the supported configurations and component details: &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/3348741#VERTX_3_x"&gt;Red Hat Runtimes Eclipse Vert.x Supported Configurations&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/4977141"&gt;Red Hat Runtimes Eclipse Vert.x 3.9 Component Details&lt;/a&gt;. If you are new to Eclipse Vert.x and would like to learn more, go to our &lt;a target="_blank" rel="nofollow" href="https://learn.openshift.com/middleware/courses/middleware-vertx/"&gt;live learning portal for a guided &lt;/a&gt;tutorial or &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_eclipse_vert.x/3.9/"&gt;to the documentation&lt;/a&gt; for details.&lt;/p&gt; &lt;h2&gt;Developer interactive learning scenarios&lt;/h2&gt; &lt;p&gt;These &lt;a target="_blank" rel="nofollow" href="https://learn.openshift.com/middleware/courses/middleware-vertx/"&gt;self-paced scenarios&lt;/a&gt; provide you with a preconfigured Red Hat OpenShift instance, accessible from your browser without any downloads or configuration. Use it to learn and experiment with Vert.x or learn about other technologies within Red Hat Runtimes and see how they help solve real-world problems.&lt;/p&gt; &lt;h2&gt;Getting support for Eclipse Vert.x&lt;/h2&gt; &lt;p&gt;Support for Eclipse Vert.x is available to Red Hat customers through a subscription to &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/products/runtimes"&gt;Red Hat Runtimes&lt;/a&gt;. Contact your local Red Hat representative or &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/about/contact/sales"&gt;Red Hat Sales&lt;/a&gt; for details on how you can enjoy the world-class support offered by Red Hat and its worldwide partner network.&lt;/p&gt; &lt;p&gt;Moving forward, customers can expect support for Eclipse Vert.x and other runtimes according to the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/support/policy/updates/jboss_notes/"&gt;Red Hat Product Update and Support Lifecycle&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;The people behind Eclipse Vert.x in Red Hat Runtimes&lt;/h2&gt; &lt;p&gt;This offering was produced by Red Hat&amp;#8217;s Runtimes product and engineering teams, along with the &lt;a target="_blank" rel="nofollow" href="https://vertx.io/"&gt;Eclipse Vert.x&lt;/a&gt; upstream community. It involved many hours of development, testing, documentation writing, testing some more, and working with the wider Red Hat community of customers, partners, and Vert.x developers to incorporate contributions, both big and small.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#038;title=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" data-a2a-url="https://developers.redhat.com/blog/2020/05/25/red-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query/" data-a2a-title="Red Hat build of Eclipse Vert.x 3.9 brings Fluent API Query"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/25/red-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query/"&gt;Red Hat build of Eclipse Vert.x 3.9 brings Fluent API Query&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TaPG4DzyFBY" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Runtimes provides a set of comprehensive frameworks, runtimes, and programming languages for developers, architects, and IT leaders with cloud-native application development needs. The latest update to Red Hat Runtimes has arrived with Red Hat’s build of Eclipse Vert.x version 3.9. Red Hat Runtimes provides application developers with a variety of application runtimes and lets them run on ...</summary><dc:creator>Syed M Shaaf</dc:creator><dc:date>2020-05-25T07:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/25/red-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query/</feedburner:origLink></entry><entry><title>Cloud-native development - Common architectural elements</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/VjilB11hm8U/cloud-native-development-common-architectural-elements.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-cloud_native_development_common_architectural_elements</id><updated>2020-05-25T09:12:02Z</updated><published>2020-05-25T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s1600/cloud-native-development-ld.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s320/cloud-native-development-ld.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Part 2 - Common architectural elements&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The &lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;introduction to a blueprint&lt;/a&gt; for cloud-native development laid out groundwork for a deeper exploration of it's logical diagram.&lt;br /&gt;&lt;br /&gt;In this article we continue with a look at the common architectural elements. A description is provided to guide you with aligning what we've presented here with the landscape your organization works with every day.&lt;br /&gt;&lt;br /&gt;These details should help you understand both what the elements contain and how they might align and how their functionalities are grouped.&lt;br /&gt;&lt;br /&gt;Let's look at the foundation of our cloud-native development blueprint, the logical diagram with it's architectural elements.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;This diagram sorts architectural elements in to groups, of which we can look at in detail below.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;a href="https://1.bp.blogspot.com/-eLOrU59RTKc/Xr6QmW2l0VI/AAAAAAAAxJM/7pDiA-yOPXoEkUXxdYyuzCRhExMU82DKgCNcBGAsYHQ/s1600/dev.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="1578" data-original-width="1035" height="320" src="https://1.bp.blogspot.com/-eLOrU59RTKc/Xr6QmW2l0VI/AAAAAAAAxJM/7pDiA-yOPXoEkUXxdYyuzCRhExMU82DKgCNcBGAsYHQ/s320/dev.png" title="" width="209" /&gt;&lt;/a&gt;The developer&lt;/h3&gt;&lt;div&gt;The developer elements consists of what she uses to produce code artefacts that are pushed in to the cloud-native development process to create containerized workloads.&lt;br /&gt;&lt;br /&gt;For this blueprint the researched customers provided, as you could image, a diverse set of developer elements to choose from. We've chosen to group some and selected the elements shown in the image.&lt;br /&gt;&lt;br /&gt;The &lt;i&gt;developer IDE&lt;/i&gt; is pretty universal, the tooling that the developer is coding in. Some form of source code management repository is used, but all research pointed to a &lt;i&gt;Git-based repository&lt;/i&gt;. The remaining three elements encompass as selection of the enterprise frameworks encountered, but are not by any means definitive. We encountered &lt;i&gt;Spring Boot&lt;/i&gt;, integration based on &lt;i&gt;Camel and Fuse&lt;/i&gt;, and often some collection of &lt;i&gt;Java runtimes&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;While not illustrated as a distinct component, some form of dependency management was employed. In all researched cases it was an &lt;i&gt;Apache Maven repository&lt;/i&gt;, but we've chosen to leave them out of this logical overview for the reasons of simplicity.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-lEXHhJf5Tuc/XsJ5hjBXDpI/AAAAAAAAxJo/RoVDZdXTHuo1iXy21VCSlE_0udUT8WuQwCNcBGAsYHQ/s1600/ci-cd.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="714" data-original-width="1038" height="137" src="https://1.bp.blogspot.com/-lEXHhJf5Tuc/XsJ5hjBXDpI/AAAAAAAAxJo/RoVDZdXTHuo1iXy21VCSlE_0udUT8WuQwCNcBGAsYHQ/s200/ci-cd.png" title="" width="200" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;Container platform CI / CD&lt;/h3&gt;&lt;div&gt;A container platform hosting the continuous integration (CI) and continuous development (CD) tooling is the main element in this group. The CI / CD platform can be an number of available tools, but as a concrete example, many implementations are using Jenkins tooling.&lt;br /&gt;&lt;br /&gt;An exception to the normal generic elements is the &lt;i&gt;Skopeo&lt;/i&gt; element. This is a tooling element used to manage images across image registries by setting up automated copying from one registry to another, even across container platform infrastructure.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Deployments&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Fi1qs_xYmyU/Xse6pdcuyEI/AAAAAAAAxKc/iGrAJT72Er4O45SDFNSp0P35ua7jifEKwCNcBGAsYHQ/s1600/cp-ld.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="0" data-original-height="1600" data-original-width="847" height="400" src="https://1.bp.blogspot.com/-Fi1qs_xYmyU/Xse6pdcuyEI/AAAAAAAAxKc/iGrAJT72Er4O45SDFNSp0P35ua7jifEKwCNcBGAsYHQ/s400/cp-ld.png" title="" width="211" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/h3&gt;&lt;div&gt;There are numerous elements that developers generate for deployment on their target container platform. To capture them all would become both messy and always incomplete, so instead the elements shown here in the container platform figure are representative of what you can expect.&lt;br /&gt;&lt;br /&gt;A large focus of cloud-native development is based on microservice delivery. With that in mind the example elements encountered in our research were categorized into the following service groups:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;caching data microservices&lt;/li&gt;&lt;li&gt;decision microservices&lt;/li&gt;&lt;li&gt;process automation microservices&lt;/li&gt;&lt;li&gt;integration microservices&lt;/li&gt;&lt;li&gt;integration data microservices&lt;/li&gt;&lt;li&gt;messaging services&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Note that last one is not always in the form of microservices, as we're talking about the services that provide topics, queues, and brokers around servicing the message and event layers of the application architecture.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Infrastructure services&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;These services are more traditional in nature and don't always have to be in the local environment. For example, API management can be an external SaaS hosted solution for managing, metering, and monitoring of service APIs.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-9RkrhkQUzJQ/XsfiKUY2PaI/AAAAAAAAxKo/HUpsKdukOfcNLFeA5Ol3nOqlwPimcwyhQCNcBGAsYHQ/s1600/infra-sv.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="0" data-original-height="735" data-original-width="1032" height="141" src="https://1.bp.blogspot.com/-9RkrhkQUzJQ/XsfiKUY2PaI/AAAAAAAAxKo/HUpsKdukOfcNLFeA5Ol3nOqlwPimcwyhQCNcBGAsYHQ/s200/infra-sv.png" title="" width="200" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;An SSO server element is shown to complete the story of what's backing the connectivity from microservices to the authentication and authorization back-end system(s) that one encounters in an organization. As security is prevalent across all the elements, it's noted here as core infrastructure for any cloud-native development solution.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Storage services&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The storage services uncovered in customer solution research were diverse and numerous. For that reason there is no single common architectural element shown at the highest level. Everything from container native storage to traditional block storage was found.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;Exploring the diagrams&lt;/h3&gt;&lt;div&gt;As mentioned in the introduction to this series, we've pulled together an&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;examples repository&lt;/a&gt;&amp;nbsp;for all our architecture blueprint diagrams. The &lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;Portfolio Architecture Examples&lt;/a&gt;&amp;nbsp;repository makes it possible to collect and share individual images from each diagram element as well as the entire project as a whole.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://1.bp.blogspot.com/-22Ct14crzWk/Xr51pUFnehI/AAAAAAAAxJA/IqrU3TsshCoJ1vaVD3aiKYmwh4KPqQNYwCNcBGAsYHQ/s1600/Screenshot%2B2020-05-15%2Bat%2B12.57.27.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="1" data-original-height="253" data-original-width="522" height="155" src="https://1.bp.blogspot.com/-22Ct14crzWk/Xr51pUFnehI/AAAAAAAAxJA/IqrU3TsshCoJ1vaVD3aiKYmwh4KPqQNYwCNcBGAsYHQ/s320/Screenshot%2B2020-05-15%2Bat%2B12.57.27.png" width="320" /&gt;&lt;/a&gt;To access the diagram covered in this article, you scroll down to the file listings on the main page, you can locate a logical diagram as shown in the image.&lt;br /&gt;&lt;br /&gt;This is the collection for the logical diagrams associated with cloud-native development:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in this case it's a single image you can click to view&lt;/li&gt;&lt;li&gt;a project file you can download to your local machine using the&amp;nbsp;&lt;i&gt;Download Diagram&lt;/i&gt;&amp;nbsp;link&lt;/li&gt;&lt;li&gt;a&amp;nbsp;&lt;i&gt;Load Diagram&lt;/i&gt;&amp;nbsp;link that you can click to automatically open the project diagrams in the diagram tooling used in this blueprint&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Give it a try and feel free to explore the collection of logical, schematic, detailed, solution, and community diagrams. This should allow you to get started much quicker than from scratch if you can kick-start a project with existing diagrams.&lt;br /&gt;&lt;br /&gt;Should you design your own diagrams, please contribute the project file (ending in .drawio) by raising an issue with the file attached. We'd love to continue collecting these projects for others to use.&lt;br /&gt;&lt;br /&gt;Finally, there is a free online&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-workshops" target="_blank"&gt;beginners guide workshop&lt;/a&gt;&amp;nbsp;available focused on using the diagram tooling, please explore to learn tips and tricks from the experts.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on the cloud-native development portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;A blueprint&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-common-architectural-elements.html" target="_blank"&gt;Common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Cloud-native development on local containers&lt;/li&gt;&lt;li&gt;Cloud-native development on remote containers&lt;/li&gt;&lt;li&gt;Cloud-native deployments&lt;/li&gt;&lt;li&gt;Cloud-native advanced deployments&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, taking a look at cloud-native development using local container tooling.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=eHZPgOPPT3U:0nKssDck2G0:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=eHZPgOPPT3U:0nKssDck2G0:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=eHZPgOPPT3U:0nKssDck2G0:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=eHZPgOPPT3U:0nKssDck2G0:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/eHZPgOPPT3U" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/VjilB11hm8U" height="1" width="1" alt=""/&gt;</content><summary>Part 2 - Common architectural elementsThe introduction to a blueprint for cloud-native development laid out groundwork for a deeper exploration of it's logical diagram. In this article we continue with a look at the common architectural elements. A description is provided to guide you with aligning what we've presented here with the landscape your organization works with every day. These details s...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-05-25T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/eHZPgOPPT3U/cloud-native-development-common-architectural-elements.html</feedburner:origLink></entry><entry><title>Top 10 must-know Kubernetes design patterns</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/axSP_LJUhmk/top-10-must-know-kubernetes-design.html" /><category term="Cloud Native" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_ofbizian" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><author><name>Bilgin Ibryam</name></author><id>searchisko:content:id:jbossorg_blog-top_10_must_know_kubernetes_design_patterns0</id><updated>2020-05-24T23:32:42Z</updated><published>2020-05-24T23:13:00Z</published><content type="html">&lt;p class="selectionShareable"&gt;Here are the must-know top 10 design patterns for beginners synthesized from &lt;a href="http://k8spatterns.io/" rel="nofollow" target="_blank"&gt;the Kubernetes Patterns book&lt;/a&gt;. Getting familiar with these patterns will help you understand foundational Kubernetes concepts, which in turn will help you in discussions and when designing Kubernetes-based applications. There are many important concepts in Kubernetes, but these are the most important ones to start with:&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-lXVsG6PzsD8/XsrrY6La-bI/AAAAAAAAOPU/HH2Vu46Mx9oBL35qVwR7vjFsqmnTmIynACK4BGAsYHg/d/top_10_kubernetes_patterns.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Top 10 must-know Kubernetes design patterns" border="0" data-original-height="3352" data-original-width="7299" src="https://1.bp.blogspot.com/-lXVsG6PzsD8/XsrrY6La-bI/AAAAAAAAOPU/HH2Vu46Mx9oBL35qVwR7vjFsqmnTmIynACK4BGAsYHg/d/top_10_kubernetes_patterns.png" title="Top 10 must-know Kubernetes design patterns" width="475" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p class="selectionShareable" style="text-align: center;"&gt;&lt;i&gt;Top 10 most common Kubernetes Patterns&lt;/i&gt;&lt;/p&gt;&lt;p class="selectionShareable"&gt;To help you understand, the patterns are organized into a few categories below, inspired by the Gang of Four’s design patterns.&lt;/p&gt;&lt;h1&gt;&lt;span style="font-weight: normal;"&gt;Foundational patterns&lt;/span&gt;&lt;/h1&gt;&lt;p class="selectionShareable"&gt;These patterns represent the principles and best practices that containerized applications must comply with in order to become good cloud-native citizens. Regardless of the application’s nature, you should aim to follow these guidelines. Adhering to these principles will help ensure that your applications are suitable for automation on Kubernetes.&lt;/p&gt;&lt;h3&gt;Health Probe pattern&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Health Probe&lt;/i&gt; dictates that every container should implement specific APIs to help the platform observe and manage the application in the healthiest way possible. To be fully automatable, a cloud-native application must be highly observable by allowing its state to be inferred so that Kubernetes can detect whether the application is up and ready to serve requests. These observations influence the life-cycle management of Pods and the way traffic is routed to the application.&lt;/p&gt;&lt;h3&gt;Predictable Demands pattern&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Predictable Demands&lt;/i&gt; explains why every container should declare its resource profile and stay confined to the indicated resource requirements. The foundation of successful application deployment, management, and coexistence on a shared cloud environment is dependent on identifying and declaring the application’s resource requirements and runtime dependencies. This pattern describes how you should declare application requirements, whether they are hard runtime dependencies or resource requirements. Declaring your requirements is essential for Kubernetes to find the right place for your application within the cluster.&lt;/p&gt;&lt;h3&gt;Automated Placement patterns&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Automated Placement&lt;/i&gt;&amp;nbsp;explains how to influence workload distribution in a multi-node cluster. Placement is the core function of the Kubernetes scheduler for assigning new Pods to nodes satisfying container resource requests and honoring scheduling policies. This pattern describes the principles of Kubernetes’ scheduling algorithm and the way to influence the placement decisions from the outside.&lt;/p&gt;&lt;h1&gt;&lt;span style="font-weight: normal;"&gt;Structural patterns&lt;/span&gt;&lt;/h1&gt;&lt;p class="selectionShareable"&gt;Having good cloud-native containers is the first step, but not enough. Reusing containers and combining them into Pods to achieve the desired outcome is the next step. The patterns in this category are focused on structuring and organizing containers in a Pod to satisfy different use cases. The forces that affect containers in Pods result in these patterns.&lt;/p&gt;&lt;h3&gt;Init Container pattern&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Init Container&lt;/i&gt; introduces a separate life cycle for initialization-related tasks and the main application containers. Init Containers enable separation of concerns by providing a separate life cycle for initialization-related tasks distinct from the main application containers. This pattern introduces a fundamental Kubernetes concept that is used in many other patterns when initialization logic is required.&lt;/p&gt;&lt;h3&gt;Sidecar patterns&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Sidecar&lt;/i&gt;&amp;nbsp;describes how to extend and enhance the functionality of a pre-existing container without changing it. This pattern is one of the fundamental container patterns that allows single-purpose containers to cooperate closely together.&lt;/p&gt;&lt;h1&gt;&lt;span style="font-weight: normal;"&gt;Behavioral patterns&lt;/span&gt;&lt;/h1&gt;&lt;p class="selectionShareable"&gt;These patterns describe the life-cycle guarantees of the Pods ensured by the managing platform. Depending on the type of workload, a Pod might run until completion as a batch job or be scheduled to run periodically. It might run as a daemon service or singleton. Picking the right life-cycle management primitive will help you run a Pod with the desired guarantees.&lt;/p&gt;&lt;h3&gt;Batch Job patterns&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Batch Job&lt;/i&gt; describes how to run an isolated, atomic unit of work until completion. This pattern is suited for managing isolated atomic units of work in a distributed environment.&lt;/p&gt;&lt;h3&gt;Stateful Service patterns&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Stateful Service&lt;/i&gt;&amp;nbsp;describes how to create and manage distributed stateful applications with Kubernetes. Such applications require features such as persistent identity, networking, storage, and ordinality. The StatefulSet primitive provides these building blocks with strong guarantees ideal for the management of stateful applications.&lt;/p&gt;&lt;h3&gt;Service Discovery pattern&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Service Discovery&lt;/i&gt; explains how clients can access and discover the instances that are providing application services. For this purpose, Kubernetes provides multiple mechanisms, depending on whether the service consumers and producers are located on or off the cluster.&lt;/p&gt;&lt;h1&gt;&lt;span style="font-weight: normal;"&gt;Higher-level patterns&lt;/span&gt;&lt;/h1&gt;&lt;p class="selectionShareable"&gt;The patterns in this category are more complex and represent higher-level application management patterns. Some of the patterns here (such as Controller) are timeless, and Kubernetes itself is built on top of them.&lt;/p&gt;&lt;h3&gt;Controller pattern&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Controller&lt;/i&gt; is a pattern that actively monitors and maintains a set of Kubernetes resources in a desired state. The heart of Kubernetes itself consists of a fleet of controllers that regularly watch and reconcile the current state of applications with the declared target state. This pattern describes how to leverage this core concept for extending the platform for our own applications.&lt;/p&gt;&lt;h3&gt;Operator pattern&lt;/h3&gt;&lt;p class="selectionShareable"&gt;An &lt;i&gt;Operator&lt;/i&gt; is a Controller that uses a CustomResourceDefinitions to encapsulate operational knowledge for a specific application in an algorithmic and automated form. The Operator pattern allows us to extend the Controller pattern for more flexibility and greater expressiveness. There are an increasing number of &lt;a href="http://operatorhub.io/" rel="nofollow" target="_blank"&gt;Operators&lt;/a&gt; for Kubernetes, and this pattern is turning into the major form of operating complex distributed systems.&lt;/p&gt;&lt;h1&gt;&lt;span style="font-weight: normal;"&gt;Summary&lt;/span&gt;&lt;/h1&gt;&lt;p class="selectionShareable"&gt;Today, Kubernetes is the most popular container orchestration platform. It is jointly developed and supported by all major software companies and offered as a service by all of the major cloud providers. Kubernetes supports both Linux and Windows systems, plus all major programming languages. This platform can also orchestrate and automate stateless and stateful applications, batch jobs, periodic tasks, and serverless workloads. The patterns described here are the most commonly used ones from a broader set of patterns that come with Kubernetes as shown below.&lt;/p&gt;&lt;p class="selectionShareable"&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-coYeOumg86U/Xsr8p3sR27I/AAAAAAAAOP8/WUn9zVbuylc-SXUJCn3jFCDJIXTOWvviACK4BGAsYHg/d/KubernetePatternsLevels-SingleColor%2B-%2BCopy%2Bof%2BFull.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="4455" data-original-width="6913" src="https://1.bp.blogspot.com/-coYeOumg86U/Xsr8p3sR27I/AAAAAAAAOP8/WUn9zVbuylc-SXUJCn3jFCDJIXTOWvviACK4BGAsYHg/d/KubernetePatternsLevels-SingleColor%2B-%2BCopy%2Bof%2BFull.png" width="475" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p class="selectionShareable" style="text-align: center;"&gt;&lt;i&gt;Kubernetes patters categorized&lt;/i&gt;&lt;br /&gt;&lt;/p&gt;&lt;p class="selectionShareable"&gt;Kubernetes is the new application portability layer and the common denominator among everybody on the cloud. If you are a software developer or architect, the odds are that Kubernetes will become part of your life in one form or another. Learning about the Kubernetes patterns described here will change the way you think about this platform. I believe that Kubernetes and the concepts originating from it will become as fundamental as object-oriented programming concepts. The patterns here are an attempt to create the Gang of Four design patterns, but for container orchestration. Reading this article must not be the end, but the beginning of your Kubernetes journey. Happy &lt;code class="notranslate"&gt;kubectl&lt;/code&gt;-ing!&lt;/p&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;&amp;nbsp;This post was originally published on Red Hat Developers. To read the original post, check &lt;a href="https://developers.redhat.com/blog/2020/05/11/top-10-must-know-kubernetes-design-patterns/" target="_blank"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br /&gt;&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/axSP_LJUhmk" height="1" width="1" alt=""/&gt;</content><summary>Here are the must-know top 10 design patterns for beginners synthesized from the Kubernetes Patterns book. Getting familiar with these patterns will help you understand foundational Kubernetes concepts, which in turn will help you in discussions and when designing Kubernetes-based applications. There are many important concepts in Kubernetes, but these are the most important ones to start with: To...</summary><dc:creator>Bilgin Ibryam</dc:creator><dc:date>2020-05-24T23:13:00Z</dc:date><feedburner:origLink>http://www.ofbizian.com/2020/05/top-10-must-know-kubernetes-design.html</feedburner:origLink></entry><entry><title>Teiid Spring Boot 1.5.0 Released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HDBan1RNptw/teiid-spring-boot-150-released.html" /><category term="feed_group_name_teiid" scheme="searchisko:content:tags" /><category term="feed_name_teiid" scheme="searchisko:content:tags" /><author><name>Ramesh Reddy</name></author><id>searchisko:content:id:jbossorg_blog-teiid_spring_boot_1_5_0_released</id><updated>2020-05-22T22:52:18Z</updated><published>2020-05-22T22:52:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;I am excited to announce that Teiid Spring Boot version 1.5.0 released today to the maven repository based on &lt;a href="http://teiid.io/blog/post-140000/"&gt;Teiid 14.0.0&lt;/a&gt; release.&lt;br /&gt;&lt;br /&gt;If you have not used Teiid Spring Boot before, it is built on top Teiid Core libraries with developer simplification in mind. It simplifies the deployment model to a single VDB and provides you with executable binary rather than Server like WildFly where you need to deploy your VDBs.&lt;br /&gt;&lt;br /&gt;The release highlights are&lt;br /&gt;&lt;br /&gt;* Cassandra Data Source support&lt;br /&gt;* Materialization automation&lt;br /&gt;* Spring Boot version to 2.2.6&lt;br /&gt;* Keystore/Truststore simplifications that work across the system&lt;br /&gt;* SOAP Data Source support&lt;br /&gt;* FTP Database Support&lt;br /&gt;* A Lot of changes to detect data sources based on their inclusion as dependencies and consistent naming schemes across both Teiid and Teiid Spring Boot.&lt;br /&gt;&lt;br /&gt;For a full list see &lt;a href="https://issues.redhat.com/browse/TEIIDSB-57?jql=project%20%3D%20TEIIDSB%20AND%20fixVersion%20%3D%201.5.0%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC"&gt;this&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Take look at the various examples in Teiid Spring Boot and take it for test drive let me know if there are any issues or improvements you see.&lt;br /&gt;&lt;br /&gt;Ramesh..&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HDBan1RNptw" height="1" width="1" alt=""/&gt;</content><summary>I am excited to announce that Teiid Spring Boot version 1.5.0 released today to the maven repository based on Teiid 14.0.0 release. If you have not used Teiid Spring Boot before, it is built on top Teiid Core libraries with developer simplification in mind. It simplifies the deployment model to a single VDB and provides you with executable binary rather than Server like WildFly where you need to d...</summary><dc:creator>Ramesh Reddy</dc:creator><dc:date>2020-05-22T22:52:00Z</dc:date><feedburner:origLink>http://teiid.blogspot.com/2020/05/teiid-spring-boot-150-released.html</feedburner:origLink></entry><entry><title>Stack clash mitigation in GCC, Part 3</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hRphI7H0NRk/" /><category term="C" scheme="searchisko:content:tags" /><category term="C stack overflow" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="gcc" scheme="searchisko:content:tags" /><category term="glibc" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="stack access" scheme="searchisko:content:tags" /><author><name>Jeff Law</name></author><id>searchisko:content:id:jbossorg_blog-stack_clash_mitigation_in_gcc_part_3</id><updated>2020-05-22T07:00:59Z</updated><published>2020-05-22T07:00:59Z</published><content type="html">&lt;p&gt;In previous posts, &lt;a href="https://developers.redhat.com/blog/2017/09/25/stack-clash-mitigation-gcc-background/"&gt;&lt;em&gt;Stack Clash Mitigation in GCC — Background&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/2019/04/30/stack-clash-mitigation-in-gcc-why-fstack-check-is-not-the-answer/"&gt;&lt;em&gt;Stack Clash mitigation in GCC: Why -fstack-check is not the answer&lt;/em&gt;&lt;/a&gt;, I hopefully showed the basics of how &lt;a target="_blank" rel="nofollow" href="https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt"&gt;stack clash attacks&lt;/a&gt; are structured and why GCC&amp;#8217;s existing &lt;code&gt;-fstack-check&lt;/code&gt; mechanism is insufficient for protection.&lt;/p&gt; &lt;p&gt;So, what should we do? Clearly we want something similar to &lt;code&gt;-fstack-check&lt;/code&gt;, but without the fundamental problems. Enter a new option: &lt;code&gt;-fstack-clash-protection&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The key principles for code generation to prevent a stack clash attack are:&lt;/p&gt; &lt;p&gt;&lt;span id="more-583897"&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;No single allocation can be greater than a page. The compiler must translate large requests into a series of page- or smaller-sized requests.&lt;/li&gt; &lt;li&gt;As pages are allocated, emit instructions to probe them. (Let&amp;#8217;s call these &lt;em&gt;explicit probes&lt;/em&gt;.)&lt;/li&gt; &lt;li&gt;A series of sub-page allocations without intervening probes can not allocate more than a page in total.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A naive implementation around these principles could be highly inefficient, but this option provides the basis for building a secure, high-performance implementation.&lt;/p&gt; &lt;h2&gt;Implicit probes to improve performance&lt;/h2&gt; &lt;p&gt;A stack access that occurs naturally in the code is an &lt;em&gt;implicit probe&lt;/em&gt;. An implicit probe implies no additional cost; therefore, using an implicit probe rather than an explicit probe is advantageous. For example, an implicit probe might occur due to the behavior of the target architecture, the requirements of the application binary interface (ABI), or by analysis of existing memory references in the program.&lt;/p&gt; &lt;p&gt;For example, the call instruction on many processors pushes the return address onto the stack. Thus, the call instruction would fault if the stack was in the stack guard. This is an implicit probe at *sp. Some application binary interfaces require that *sp always contains a back-chain pointer (the pointer to the next outer stack frame). Thus, every stack allocation is required to atomically update *sp. Again, this is an implicit probe of *sp.&lt;/p&gt; &lt;p&gt;We can also analyze the generated code. For example, on one target the caller allocates space for the callee to save registers. Thus, in the callee, a register save to *(sp + 48) is an implicit probe at *(sp + 48). On other targets, the callee often pushes pairs of registers onto the stack at function entry. Those pushes are implicit probes at *sp.&lt;/p&gt; &lt;p&gt;It turns out that taking advantage of the implicit probes noted above can dramatically decrease the amount of explicit probing. If we look at glibc as an example on x86 and PPC we see that less than 2% of the functions in glibc require explicit probing in their prologues. For example, if a function allocates less than a page of stack space on these architectures, then no explicit probe is necessary.&lt;/p&gt; &lt;h2&gt;Current status&lt;/h2&gt; &lt;p&gt;Red Hat&amp;#8217;s engineers implemented &lt;code&gt;-fstack-clash-protection&lt;/code&gt; for all &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) targets starting with RHEL 7.5. RHEL 7.5 enables &lt;code&gt;-fstack-clash-protection&lt;/code&gt; for glibc only. Starting with &lt;a href="https://developers.redhat.com/rhel8/"&gt;RHEL 8&lt;/a&gt;, the entire distribution is compiled with &lt;code&gt;-fstack-clash-protection&lt;/code&gt; and &lt;code&gt;annobin&lt;/code&gt;/&lt;code&gt;annocheck&lt;/code&gt; are used to verify that the distribution was compiled with the proper flags.&lt;/p&gt; &lt;p&gt;Fedora 27 and later enable &lt;code&gt;-fstack-clash-protection&lt;/code&gt; by default for all packages using the standard default compilation options (note that there is no &lt;code&gt;-fstack-clash-protection&lt;/code&gt; support for 32-bit ARM targets).&lt;/p&gt; &lt;p&gt;GCC 8 includes &lt;code&gt;-fstack-clash-protection&lt;/code&gt; support for the Intel, IBM Power, IBM Z series, and ARM&amp;#8217;s aarch64 targets.&lt;/p&gt; &lt;p&gt;LLVM 11 will include stack clash protections for Intel 64 and AMD64 written by Serge Guelton.&lt;/p&gt; &lt;h2&gt;Testing&lt;/h2&gt; &lt;p&gt;Red Hat&amp;#8217;s engineers have written a variety of tests to verify the analysis of static and dynamic stack utilization. Red Hat&amp;#8217;s engineers have also written regression tests for all bugs reported against &lt;code&gt;-fstack-clash-protection&lt;/code&gt; since its introduction to GCC. These tests run as a part of the standard regression testing process for GCC. Most of the tests are portable enough to be usable on other targets if one was to implement stack clash mitigation on a currently unsupported target.&lt;/p&gt; &lt;p&gt;Red Hat&amp;#8217;s engineers also implemented a scanner that can examine relocatable objects, executables, and dynamic shared objects. The scanner looks for violations of the key principles listed above within an instruction window and notifies the developer of suspicious code. Red Hat has used the scanner to scan key libraries and objects (with hand verification of all the sequences reported as potentially vulnerable by the scanner). This practice proved particularly useful in verifying that Fedora 27 was consistently using &lt;code&gt;-fstack-clash-protection&lt;/code&gt; and invalidating improvements to the aarch64 implementation made by ARM&amp;#8217;s engineers.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#038;title=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" data-a2a-url="https://developers.redhat.com/blog/2020/05/22/stack-clash-mitigation-in-gcc-part-3/" data-a2a-title="Stack clash mitigation in GCC, Part 3"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/22/stack-clash-mitigation-in-gcc-part-3/"&gt;Stack clash mitigation in GCC, Part 3&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hRphI7H0NRk" height="1" width="1" alt=""/&gt;</content><summary>In previous posts, Stack Clash Mitigation in GCC — Background and Stack Clash mitigation in GCC: Why -fstack-check is not the answer, I hopefully showed the basics of how stack clash attacks are structured and why GCC’s existing -fstack-check mechanism is insufficient for protection. So, what should we do? Clearly we want something similar to -fstack-check, but without the fundamental problems. En...</summary><dc:creator>Jeff Law</dc:creator><dc:date>2020-05-22T07:00:59Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/22/stack-clash-mitigation-in-gcc-part-3/</feedburner:origLink></entry></feed>
