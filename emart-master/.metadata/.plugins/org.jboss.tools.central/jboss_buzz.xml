<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Build a Go application using OpenShift Pipelines</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FDZe9k6dDBs/" /><category term="buildah" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Go" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="RESTful service" scheme="searchisko:content:tags" /><category term="Tekton" scheme="searchisko:content:tags" /><author><name>Don Schenck</name></author><id>searchisko:content:id:jbossorg_blog-build_a_go_application_using_openshift_pipelines</id><updated>2020-05-26T07:00:54Z</updated><published>2020-05-26T07:00:54Z</published><content type="html">&lt;p&gt;Go is an increasingly popular programming language, and frequently chosen for developing command-line utilities. Many tools used with &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; are written in &lt;a href="https://developers.redhat.com/blog/category/go/"&gt;Go&lt;/a&gt;, including the command-line interfaces (CLIs) for Tekton (&lt;code&gt;tkn&lt;/code&gt;), OpenShift (&lt;code&gt;oc&lt;/code&gt;), and Kubernetes (&lt;code&gt;kubectl&lt;/code&gt;). Also, developers can compile Go to a single executable for a broad range of operating systems. As a result, it&amp;#8217;s easy to develop and desk-test applications before putting them into containers and running those containers in OpenShift.&lt;/p&gt; &lt;p&gt;In a meta sort of way, this is an article about a tutorial, where I show you &lt;a target="_blank" rel="nofollow" href="https://redhat-developer-demos.github.io/openshift-pipelines-workshop"&gt;how to build and deliver a small Go RESTful service using OpenShift Pipelines&lt;/a&gt;. You could just jump to the tutorial now, but I suggest reading this article first. I&amp;#8217;ll quickly introduce the working environment for the tutorial, and I&amp;#8217;ll explain my logic for setting up the tutorial the way that I did.&lt;/p&gt; &lt;p&gt;&lt;span id="more-700937"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s included in the OpenShift Pipelines Workshop tutorial&lt;/h2&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://redhat-developer-demos.github.io/openshift-pipelines-workshop"&gt;OpenShift Pipelines Workshop tutorial&lt;/a&gt; includes two GitHub repositories. One repository contains the tutorial and two YAML files that you will use for the example application. The other repository contains the Go service that you will build. The tutorial also references the &lt;a target="_blank" rel="nofollow" href="https://github.com/openshift/pipelines-catalog"&gt;OpenShift Pipelines Catalog&lt;/a&gt;, an open source library of reusable pipeline assets. This catalog is an excellent example of the open source world and how it produces valuable community-wide solutions.&lt;/p&gt; &lt;p&gt;In the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/openshift-pipelines-workshop.git"&gt;tutorial repository&lt;/a&gt;, you&amp;#8217;ll find two YAML files: &lt;code&gt;qotd-pipeline.yaml&lt;/code&gt; and &lt;code&gt;sub.yaml&lt;/code&gt;. The &lt;code&gt;sub&lt;/code&gt; file creates the OpenShift Pipelines Operator, while &lt;code&gt;qotd-pipeline&lt;/code&gt; defines the pipeline to be used.&lt;/p&gt; &lt;p&gt;In the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/qotd.git"&gt;source code repository&lt;/a&gt;, you&amp;#8217;ll find the Go code for the service. You&amp;#8217;ll find a Dockerfile that you can use to create an image. You will also find three YAML files in the &lt;code&gt;/k8s&lt;/code&gt; directory. Those files define the &lt;code&gt;DeploymentConfig&lt;/code&gt;, &lt;code&gt;Service&lt;/code&gt;, and &lt;code&gt;Route&lt;/code&gt; that you will create. Keeping those artifacts in the same repo as the source code makes sense, and it puts all the related pieces in one, easily accessible spot.&lt;/p&gt; &lt;h2&gt;The build environment&lt;/h2&gt; &lt;p&gt;OpenShift Pipelines relies on Tekton, which is Knative&amp;#8217;s container-based build component. Tekton uses tasks to get work done, such as building the Linux Open Container Initiative (OCI)-compliant image. In this case, I call the image &amp;#8220;OCI-compliant&amp;#8221; because we don&amp;#8217;t use the &lt;code&gt;docker&lt;/code&gt; command to build anything. Instead, we&amp;#8217;ll use the open source &lt;code&gt;buildah&lt;/code&gt; system. The &lt;code&gt;buildah&lt;/code&gt; task is contained in the aforementioned OpenShift Pipelines Catalog and is included when you install the OpenShift Pipelines Operator. This is one of several cluster-wide tasks we&amp;#8217;ll use for this project. You can see a list of all the tasks by running &lt;code&gt;tkn clustertask ls&lt;/code&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;About OCI&lt;/strong&gt;: &lt;a target="_blank" rel="nofollow" href="https://www.opencontainers.org/about"&gt;Open Container Initiative (OCI)&lt;/a&gt; is an open governance structure for creating open industry standards around container formats and runtimes. OCI says, &amp;#8220;build an image according to these standards, and it&amp;#8217;ll run as promised.&amp;#8221;&lt;/p&gt; &lt;h3&gt;What&amp;#8217;s great about buildah&lt;/h3&gt; &lt;p&gt;&lt;code&gt;buildah&lt;/code&gt; puts you in control of what gets built and how it&amp;#8217;s built. As an example, I have a Dockerfile in my source code, and I can use that to build and desk-test code on my local machine, regardless of the operating system I am using. When I move everything to OpenShift and use the pipeline, I can use the same Dockerfile to perform the build. I can rest assured (no pun intended) that the created executable and image will match what&amp;#8217;s on my machine. No more, &amp;#8220;but it worked on my machine.&amp;#8221; Using &lt;code&gt;buildah&lt;/code&gt;, I can deploy my code at 4:59 p.m. Friday and go home without another worry. (I added that last sentence just to get the folks in Operations riled up.)&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This quick article has been an introduction to my longer tutorial. Now you know where to find the components you need and why I put them there. It&amp;#8217;s time to head over to the &lt;a target="_blank" rel="nofollow" href="https://redhat-developer-demos.github.io/openshift-pipelines-workshop"&gt;GitHub workshop&lt;/a&gt; and get started with the tutorial!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#38;linkname=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F26%2Fbuild-a-go-application-using-openshift-pipelines%2F&amp;#038;title=Build%20a%20Go%20application%20using%20OpenShift%20Pipelines" data-a2a-url="https://developers.redhat.com/blog/2020/05/26/build-a-go-application-using-openshift-pipelines/" data-a2a-title="Build a Go application using OpenShift Pipelines"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/26/build-a-go-application-using-openshift-pipelines/"&gt;Build a Go application using OpenShift Pipelines&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FDZe9k6dDBs" height="1" width="1" alt=""/&gt;</content><summary>Go is an increasingly popular programming language, and frequently chosen for developing command-line utilities. Many tools used with Kubernetes and Red Hat OpenShift are written in Go, including the command-line interfaces (CLIs) for Tekton (tkn), OpenShift (oc), and Kubernetes (kubectl). Also, developers can compile Go to a single executable for a broad range of operating systems. As a result, i...</summary><dc:creator>Don Schenck</dc:creator><dc:date>2020-05-26T07:00:54Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/26/build-a-go-application-using-openshift-pipelines/</feedburner:origLink></entry><entry><title>Infinispan 11.0.0.CR1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EBThKIKXcdA/" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_11_0_0_cr1</id><updated>2020-05-26T09:39:51Z</updated><published>2020-05-25T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Dear Infinispan community,&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;we’ve just released 11.0.0.CR1 which comes loaded with quite a few features and improvements.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_cross_site_replication_improvements"&gt;&lt;a class="anchor" href="#_cross_site_replication_improvements" /&gt;Cross-Site Replication Improvements&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The cross-site replication feature received two major improvements:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Support for multiple site masters&lt;/p&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The new algorithm is able to take advantage of multiple site masters, distributing load between them. If your environment is capable, increase the number of site masters in RELAY2 configuration:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;relay.RELAY2&lt;/span&gt; &lt;span class="attribute-name"&gt;site&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;LON&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;max_site_masters&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;1000&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Conflict detection and resolution for Asynchronous Cross-Site Replication&lt;/p&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Taking advantage of vector clocks, in asynchronous mode, Infinispan is able to detect conflicts. A conflict happens when 2 or more sites update the same key at the same time. Conflicts are resolved based on the site’s names. Updates from the site lexicographically lower, take priority, in case of conflicts. As an example, if you have 3 sites, LON, NYC and SFO, conflicts between LON and NYC discards updates from NYC and keeps the updates from LON. You can choose the priority by prepending a number to the site name. For example, if you want updates from NYC to take priority, you can set the site name to “1-NYC”.&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In a future update, Infinispan will allow you to set a custom conflict resolution algorithm.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_non_blocking_internals"&gt;&lt;a class="anchor" href="#_non_blocking_internals" /&gt;Non-blocking internals&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All thread pools collapsed into two pools: blocking and non-blocking&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_persistence"&gt;&lt;a class="anchor" href="#_persistence" /&gt;Persistence&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A new non-blocking Store SPI&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_clustering"&gt;&lt;a class="anchor" href="#_clustering" /&gt;Clustering&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;More accurate segment rebalancing&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scaling without state-transfer (experimental)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_queryindexing"&gt;&lt;a class="anchor" href="#_queryindexing" /&gt;Query/Indexing&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;SearchManager, CacheQuery are deprecated. Users are encouraged to migrate to Ickle String queries obtained from Search.getQueryFactory&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_server_security"&gt;&lt;a class="anchor" href="#_server_security" /&gt;Server Security&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The server is now secure by default&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New encrypted properties realm&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Simplified authentication and authorization configuration to be as automatic as possible&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_other_server_changes"&gt;&lt;a class="anchor" href="#_other_server_changes" /&gt;Other Server changes&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Datasources&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Runtime logging configuration&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Server report&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_cli"&gt;&lt;a class="anchor" href="#_cli" /&gt;CLI&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;User Tool merged into CLI&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CLI can be compiled natively&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Non-interactive usage&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_console"&gt;&lt;a class="anchor" href="#_console" /&gt;Console&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Lots of UX improvements&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_kubernetesopenshift_operator"&gt;&lt;a class="anchor" href="#_kubernetesopenshift_operator" /&gt;Kubernetes/OpenShift operator&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cache CR&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Service .Expose with Ingress and Route&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_container_images"&gt;&lt;a class="anchor" href="#_container_images" /&gt;Container images&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Images based upon ubi-minimal:8.2&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Native generation of config files in all images&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Native server image available at &lt;code&gt;infinispan/server-native&lt;/code&gt; (Experimental)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_documentation"&gt;&lt;a class="anchor" href="#_documentation" /&gt;Documentation&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Added procedural content for rolling upgrades, Cache CR with the Operator, server patching, misc CLI commands, using RemoteCacheConfigurationBuilder.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Procedural content for different upgrade and migration tasks included in Upgrade Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Operator and Spring Boot Starter guides now provide stable and development versions from the index page.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updated index.html and throughout documentation to improve high-level context and aid retrievability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Getting Started content updated and streamlined.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Applied several modifications, additions, and removals to documentation via community feedback.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_get_it_use_it_ask_us"&gt;&lt;a class="anchor" href="#_get_it_use_it_ask_us" /&gt;Get it, Use it, Ask us!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please &lt;a href="https://infinispan.org/download/"&gt;download&lt;/a&gt;, &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;report bugs&lt;/a&gt;, &lt;a href="https://infinispan.zulipchat.com/"&gt;chat with us&lt;/a&gt;, ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EBThKIKXcdA" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispan community, we’ve just released 11.0.0.CR1 which comes loaded with quite a few features and improvements. Cross-Site Replication Improvements The cross-site replication feature received two major improvements: Support for multiple site masters The new algorithm is able to take advantage of multiple site masters, distributing load between them. If your environment is capable, increas...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-05-25T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/05/25/infinispan-11/</feedburner:origLink></entry><entry><title>Red Hat build of Eclipse Vert.x 3.9 brings Fluent API Query</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TaPG4DzyFBY/" /><category term="concurrency" scheme="searchisko:content:tags" /><category term="eclipse java" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="java application" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="reactive programming" scheme="searchisko:content:tags" /><category term="Stream Processing" scheme="searchisko:content:tags" /><author><name>Syed M Shaaf</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_build_of_eclipse_vert_x_3_9_brings_fluent_api_query</id><updated>2020-05-25T07:00:12Z</updated><published>2020-05-25T07:00:12Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/middleware/"&gt;Red Hat Runtimes&lt;/a&gt; provides a set of comprehensive frameworks, runtimes, and programming languages for developers, architects, and IT leaders with cloud-native application development needs. The latest update to Red Hat Runtimes has arrived with Red Hat&amp;#8217;s build of Eclipse Vert.x version 3.9. Red Hat Runtimes provides application developers with a variety of application runtimes and lets them run on the &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift Container Platform&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A fluent API is a common pattern throughout Vert.x, it lets multiple methods calls be chained together. For example:&lt;/p&gt; &lt;pre&gt;request.response().putHeader("Content-Type", "text/plain").write("some text").end();&lt;/pre&gt; &lt;p&gt;Chaining calls like this also allows you to write code that’s a bit less verbose.&lt;/p&gt; &lt;p&gt;With 3.9, you can now create prepared statements and collector queries with the inclusion of &lt;code&gt;Query&lt;/code&gt; in the Fluent API. If you are familiar with JDBC, &lt;code&gt;PreparedStatement&lt;/code&gt; lets you create and execute statements. Moreover, you can run multiple interactions, such as cursor or stream operations.&lt;/p&gt; &lt;p&gt;&lt;span id="more-723687"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Creating a prepared statement&lt;/h2&gt; &lt;p&gt;To create a prepared statement:&lt;/p&gt; &lt;pre&gt;connection.prepare(sql, ar1 -&amp;#62; {  if (ar1.succeded()) {   PreparedStatement ps = ar1.result();   PreparedQuery&amp;#60;RowSet&amp;#60;Row&amp;#62;&amp;#62; pq = ps.query();     pq.execute(tuple, ar2 -&amp;#62; ...); // Or fluently   ps.query().execute(tuple, ar2 -&amp;#62; ...);  } });&lt;/pre&gt; &lt;h2&gt;Creating a collector query&lt;/h2&gt; &lt;p&gt;You can use the Java Collectors with Vert.x too. For example to create a collector query:&lt;/p&gt; &lt;pre&gt;PreparedQuery&amp;#60;RowSet&amp;#60;Row&amp;#62;&amp;#62; query = client.preparedQuery(sql); PreparedQuery&amp;#60;SqlResult&amp;#60;List&amp;#60;Row&amp;#62;&amp;#62; collectedQuery = query.collecting(Collectors.toList()); collectedQuery.execute(tuple, ar -&amp;#62; ...); // Or fluently client.preparedQuery(sql).collecting(Collectors.toList()).execute(tuple, ar -&amp;#62; ...);&lt;/pre&gt; &lt;p&gt;See these &lt;a target="_blank" rel="nofollow" href="https://github.com/vert-x3/vertx-examples/tree/master/cassandra-examples/src/main/java/io/vertx/example/cassandra/cassandra/prepared"&gt;Vert.x examples on GitHub&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Use Promise instead of Future&lt;/h2&gt; &lt;p&gt;Another important change in this release is the deprecation of the following methods: &lt;code&gt;start(Future&amp;#60;Void&amp;#62;)&lt;/code&gt; and &lt;code&gt;stop(Future&amp;#60;Void&amp;#62;)&lt;/code&gt;. The &lt;a target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/Promise.html#future--"&gt;&lt;code&gt;future()&lt;/code&gt;&lt;/a&gt; method returns the &lt;a title="interface in io.vertx.core" target="_blank" rel="nofollow" href="https://vertx.io/docs/apidocs/io/vertx/core/Future.html"&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; associated with a promise. The future can then be used for getting notified of the promise&amp;#8217;s completion and retrieving its value.&lt;/p&gt; &lt;p&gt;Instead, use &lt;code&gt;start(Promise&amp;#60;Void&amp;#62;)&lt;/code&gt; and &lt;code&gt;stop(Promise&amp;#60;Void&amp;#62;)&lt;/code&gt;. These methods represent the writable side of an action that may, or may not, have occurred yet. A promise extends &lt;code&gt;Handler&amp;#60;AsyncResult&amp;#60;T&amp;#62;&amp;#62;&lt;/code&gt; so it can be used as a callback.&lt;/p&gt; &lt;h2&gt;Documentation&lt;/h2&gt; &lt;p&gt;For more details, take a look at the supported configurations and component details: &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/3348741#VERTX_3_x"&gt;Red Hat Runtimes Eclipse Vert.x Supported Configurations&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/4977141"&gt;Red Hat Runtimes Eclipse Vert.x 3.9 Component Details&lt;/a&gt;. If you are new to Eclipse Vert.x and would like to learn more, go to our &lt;a target="_blank" rel="nofollow" href="https://learn.openshift.com/middleware/courses/middleware-vertx/"&gt;live learning portal for a guided &lt;/a&gt;tutorial or &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_eclipse_vert.x/3.9/"&gt;to the documentation&lt;/a&gt; for details.&lt;/p&gt; &lt;h2&gt;Developer interactive learning scenarios&lt;/h2&gt; &lt;p&gt;These &lt;a target="_blank" rel="nofollow" href="https://learn.openshift.com/middleware/courses/middleware-vertx/"&gt;self-paced scenarios&lt;/a&gt; provide you with a preconfigured Red Hat OpenShift instance, accessible from your browser without any downloads or configuration. Use it to learn and experiment with Vert.x or learn about other technologies within Red Hat Runtimes and see how they help solve real-world problems.&lt;/p&gt; &lt;h2&gt;Getting support for Eclipse Vert.x&lt;/h2&gt; &lt;p&gt;Support for Eclipse Vert.x is available to Red Hat customers through a subscription to &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/products/runtimes"&gt;Red Hat Runtimes&lt;/a&gt;. Contact your local Red Hat representative or &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/about/contact/sales"&gt;Red Hat Sales&lt;/a&gt; for details on how you can enjoy the world-class support offered by Red Hat and its worldwide partner network.&lt;/p&gt; &lt;p&gt;Moving forward, customers can expect support for Eclipse Vert.x and other runtimes according to the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/support/policy/updates/jboss_notes/"&gt;Red Hat Product Update and Support Lifecycle&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;The people behind Eclipse Vert.x in Red Hat Runtimes&lt;/h2&gt; &lt;p&gt;This offering was produced by Red Hat&amp;#8217;s Runtimes product and engineering teams, along with the &lt;a target="_blank" rel="nofollow" href="https://vertx.io/"&gt;Eclipse Vert.x&lt;/a&gt; upstream community. It involved many hours of development, testing, documentation writing, testing some more, and working with the wider Red Hat community of customers, partners, and Vert.x developers to incorporate contributions, both big and small.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#38;linkname=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F25%2Fred-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query%2F&amp;#038;title=Red%20Hat%20build%20of%20Eclipse%20Vert.x%203.9%20brings%20Fluent%20API%20Query" data-a2a-url="https://developers.redhat.com/blog/2020/05/25/red-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query/" data-a2a-title="Red Hat build of Eclipse Vert.x 3.9 brings Fluent API Query"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/25/red-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query/"&gt;Red Hat build of Eclipse Vert.x 3.9 brings Fluent API Query&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TaPG4DzyFBY" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Runtimes provides a set of comprehensive frameworks, runtimes, and programming languages for developers, architects, and IT leaders with cloud-native application development needs. The latest update to Red Hat Runtimes has arrived with Red Hat’s build of Eclipse Vert.x version 3.9. Red Hat Runtimes provides application developers with a variety of application runtimes and lets them run on ...</summary><dc:creator>Syed M Shaaf</dc:creator><dc:date>2020-05-25T07:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/25/red-hat-build-of-eclipse-vert-x-3-9-brings-fluent-api-query/</feedburner:origLink></entry><entry><title>Cloud-native development - Common architectural elements</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/VjilB11hm8U/cloud-native-development-common-architectural-elements.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-cloud_native_development_common_architectural_elements</id><updated>2020-05-25T09:12:02Z</updated><published>2020-05-25T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s1600/cloud-native-development-ld.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s320/cloud-native-development-ld.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Part 2 - Common architectural elements&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The &lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;introduction to a blueprint&lt;/a&gt; for cloud-native development laid out groundwork for a deeper exploration of it's logical diagram.&lt;br /&gt;&lt;br /&gt;In this article we continue with a look at the common architectural elements. A description is provided to guide you with aligning what we've presented here with the landscape your organization works with every day.&lt;br /&gt;&lt;br /&gt;These details should help you understand both what the elements contain and how they might align and how their functionalities are grouped.&lt;br /&gt;&lt;br /&gt;Let's look at the foundation of our cloud-native development blueprint, the logical diagram with it's architectural elements.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;This diagram sorts architectural elements in to groups, of which we can look at in detail below.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;a href="https://1.bp.blogspot.com/-eLOrU59RTKc/Xr6QmW2l0VI/AAAAAAAAxJM/7pDiA-yOPXoEkUXxdYyuzCRhExMU82DKgCNcBGAsYHQ/s1600/dev.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="1578" data-original-width="1035" height="320" src="https://1.bp.blogspot.com/-eLOrU59RTKc/Xr6QmW2l0VI/AAAAAAAAxJM/7pDiA-yOPXoEkUXxdYyuzCRhExMU82DKgCNcBGAsYHQ/s320/dev.png" title="" width="209" /&gt;&lt;/a&gt;The developer&lt;/h3&gt;&lt;div&gt;The developer elements consists of what she uses to produce code artefacts that are pushed in to the cloud-native development process to create containerized workloads.&lt;br /&gt;&lt;br /&gt;For this blueprint the researched customers provided, as you could image, a diverse set of developer elements to choose from. We've chosen to group some and selected the elements shown in the image.&lt;br /&gt;&lt;br /&gt;The &lt;i&gt;developer IDE&lt;/i&gt; is pretty universal, the tooling that the developer is coding in. Some form of source code management repository is used, but all research pointed to a &lt;i&gt;Git-based repository&lt;/i&gt;. The remaining three elements encompass as selection of the enterprise frameworks encountered, but are not by any means definitive. We encountered &lt;i&gt;Spring Boot&lt;/i&gt;, integration based on &lt;i&gt;Camel and Fuse&lt;/i&gt;, and often some collection of &lt;i&gt;Java runtimes&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;While not illustrated as a distinct component, some form of dependency management was employed. In all researched cases it was an &lt;i&gt;Apache Maven repository&lt;/i&gt;, but we've chosen to leave them out of this logical overview for the reasons of simplicity.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-lEXHhJf5Tuc/XsJ5hjBXDpI/AAAAAAAAxJo/RoVDZdXTHuo1iXy21VCSlE_0udUT8WuQwCNcBGAsYHQ/s1600/ci-cd.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="714" data-original-width="1038" height="137" src="https://1.bp.blogspot.com/-lEXHhJf5Tuc/XsJ5hjBXDpI/AAAAAAAAxJo/RoVDZdXTHuo1iXy21VCSlE_0udUT8WuQwCNcBGAsYHQ/s200/ci-cd.png" title="" width="200" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;Container platform CI / CD&lt;/h3&gt;&lt;div&gt;A container platform hosting the continuous integration (CI) and continuous development (CD) tooling is the main element in this group. The CI / CD platform can be an number of available tools, but as a concrete example, many implementations are using Jenkins tooling.&lt;br /&gt;&lt;br /&gt;An exception to the normal generic elements is the &lt;i&gt;Skopeo&lt;/i&gt; element. This is a tooling element used to manage images across image registries by setting up automated copying from one registry to another, even across container platform infrastructure.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Deployments&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Fi1qs_xYmyU/Xse6pdcuyEI/AAAAAAAAxKc/iGrAJT72Er4O45SDFNSp0P35ua7jifEKwCNcBGAsYHQ/s1600/cp-ld.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="0" data-original-height="1600" data-original-width="847" height="400" src="https://1.bp.blogspot.com/-Fi1qs_xYmyU/Xse6pdcuyEI/AAAAAAAAxKc/iGrAJT72Er4O45SDFNSp0P35ua7jifEKwCNcBGAsYHQ/s400/cp-ld.png" title="" width="211" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/h3&gt;&lt;div&gt;There are numerous elements that developers generate for deployment on their target container platform. To capture them all would become both messy and always incomplete, so instead the elements shown here in the container platform figure are representative of what you can expect.&lt;br /&gt;&lt;br /&gt;A large focus of cloud-native development is based on microservice delivery. With that in mind the example elements encountered in our research were categorized into the following service groups:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;caching data microservices&lt;/li&gt;&lt;li&gt;decision microservices&lt;/li&gt;&lt;li&gt;process automation microservices&lt;/li&gt;&lt;li&gt;integration microservices&lt;/li&gt;&lt;li&gt;integration data microservices&lt;/li&gt;&lt;li&gt;messaging services&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Note that last one is not always in the form of microservices, as we're talking about the services that provide topics, queues, and brokers around servicing the message and event layers of the application architecture.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Infrastructure services&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;These services are more traditional in nature and don't always have to be in the local environment. For example, API management can be an external SaaS hosted solution for managing, metering, and monitoring of service APIs.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-9RkrhkQUzJQ/XsfiKUY2PaI/AAAAAAAAxKo/HUpsKdukOfcNLFeA5Ol3nOqlwPimcwyhQCNcBGAsYHQ/s1600/infra-sv.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="0" data-original-height="735" data-original-width="1032" height="141" src="https://1.bp.blogspot.com/-9RkrhkQUzJQ/XsfiKUY2PaI/AAAAAAAAxKo/HUpsKdukOfcNLFeA5Ol3nOqlwPimcwyhQCNcBGAsYHQ/s200/infra-sv.png" title="" width="200" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;An SSO server element is shown to complete the story of what's backing the connectivity from microservices to the authentication and authorization back-end system(s) that one encounters in an organization. As security is prevalent across all the elements, it's noted here as core infrastructure for any cloud-native development solution.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Storage services&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The storage services uncovered in customer solution research were diverse and numerous. For that reason there is no single common architectural element shown at the highest level. Everything from container native storage to traditional block storage was found.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;Exploring the diagrams&lt;/h3&gt;&lt;div&gt;As mentioned in the introduction to this series, we've pulled together an&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;examples repository&lt;/a&gt;&amp;nbsp;for all our architecture blueprint diagrams. The &lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;Portfolio Architecture Examples&lt;/a&gt;&amp;nbsp;repository makes it possible to collect and share individual images from each diagram element as well as the entire project as a whole.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://1.bp.blogspot.com/-22Ct14crzWk/Xr51pUFnehI/AAAAAAAAxJA/IqrU3TsshCoJ1vaVD3aiKYmwh4KPqQNYwCNcBGAsYHQ/s1600/Screenshot%2B2020-05-15%2Bat%2B12.57.27.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="1" data-original-height="253" data-original-width="522" height="155" src="https://1.bp.blogspot.com/-22Ct14crzWk/Xr51pUFnehI/AAAAAAAAxJA/IqrU3TsshCoJ1vaVD3aiKYmwh4KPqQNYwCNcBGAsYHQ/s320/Screenshot%2B2020-05-15%2Bat%2B12.57.27.png" width="320" /&gt;&lt;/a&gt;To access the diagram covered in this article, you scroll down to the file listings on the main page, you can locate a logical diagram as shown in the image.&lt;br /&gt;&lt;br /&gt;This is the collection for the logical diagrams associated with cloud-native development:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in this case it's a single image you can click to view&lt;/li&gt;&lt;li&gt;a project file you can download to your local machine using the&amp;nbsp;&lt;i&gt;Download Diagram&lt;/i&gt;&amp;nbsp;link&lt;/li&gt;&lt;li&gt;a&amp;nbsp;&lt;i&gt;Load Diagram&lt;/i&gt;&amp;nbsp;link that you can click to automatically open the project diagrams in the diagram tooling used in this blueprint&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Give it a try and feel free to explore the collection of logical, schematic, detailed, solution, and community diagrams. This should allow you to get started much quicker than from scratch if you can kick-start a project with existing diagrams.&lt;br /&gt;&lt;br /&gt;Should you design your own diagrams, please contribute the project file (ending in .drawio) by raising an issue with the file attached. We'd love to continue collecting these projects for others to use.&lt;br /&gt;&lt;br /&gt;Finally, there is a free online&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-workshops" target="_blank"&gt;beginners guide workshop&lt;/a&gt;&amp;nbsp;available focused on using the diagram tooling, please explore to learn tips and tricks from the experts.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on the cloud-native development portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;A blueprint&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-common-architectural-elements.html" target="_blank"&gt;Common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Cloud-native development on local containers&lt;/li&gt;&lt;li&gt;Cloud-native development on remote containers&lt;/li&gt;&lt;li&gt;Cloud-native deployments&lt;/li&gt;&lt;li&gt;Cloud-native advanced deployments&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, taking a look at cloud-native development using local container tooling.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=eHZPgOPPT3U:0nKssDck2G0:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=eHZPgOPPT3U:0nKssDck2G0:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=eHZPgOPPT3U:0nKssDck2G0:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=eHZPgOPPT3U:0nKssDck2G0:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=eHZPgOPPT3U:0nKssDck2G0:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/eHZPgOPPT3U" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/VjilB11hm8U" height="1" width="1" alt=""/&gt;</content><summary>Part 2 - Common architectural elementsThe introduction to a blueprint for cloud-native development laid out groundwork for a deeper exploration of it's logical diagram. In this article we continue with a look at the common architectural elements. A description is provided to guide you with aligning what we've presented here with the landscape your organization works with every day. These details s...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-05-25T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/eHZPgOPPT3U/cloud-native-development-common-architectural-elements.html</feedburner:origLink></entry><entry><title>Top 10 must-know Kubernetes design patterns</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/axSP_LJUhmk/top-10-must-know-kubernetes-design.html" /><category term="Cloud Native" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_ofbizian" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><author><name>Bilgin Ibryam</name></author><id>searchisko:content:id:jbossorg_blog-top_10_must_know_kubernetes_design_patterns0</id><updated>2020-05-24T23:32:42Z</updated><published>2020-05-24T23:13:00Z</published><content type="html">&lt;p class="selectionShareable"&gt;Here are the must-know top 10 design patterns for beginners synthesized from &lt;a href="http://k8spatterns.io/" rel="nofollow" target="_blank"&gt;the Kubernetes Patterns book&lt;/a&gt;. Getting familiar with these patterns will help you understand foundational Kubernetes concepts, which in turn will help you in discussions and when designing Kubernetes-based applications. There are many important concepts in Kubernetes, but these are the most important ones to start with:&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-lXVsG6PzsD8/XsrrY6La-bI/AAAAAAAAOPU/HH2Vu46Mx9oBL35qVwR7vjFsqmnTmIynACK4BGAsYHg/d/top_10_kubernetes_patterns.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Top 10 must-know Kubernetes design patterns" border="0" data-original-height="3352" data-original-width="7299" src="https://1.bp.blogspot.com/-lXVsG6PzsD8/XsrrY6La-bI/AAAAAAAAOPU/HH2Vu46Mx9oBL35qVwR7vjFsqmnTmIynACK4BGAsYHg/d/top_10_kubernetes_patterns.png" title="Top 10 must-know Kubernetes design patterns" width="475" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p class="selectionShareable" style="text-align: center;"&gt;&lt;i&gt;Top 10 most common Kubernetes Patterns&lt;/i&gt;&lt;/p&gt;&lt;p class="selectionShareable"&gt;To help you understand, the patterns are organized into a few categories below, inspired by the Gang of Four’s design patterns.&lt;/p&gt;&lt;h1&gt;&lt;span style="font-weight: normal;"&gt;Foundational patterns&lt;/span&gt;&lt;/h1&gt;&lt;p class="selectionShareable"&gt;These patterns represent the principles and best practices that containerized applications must comply with in order to become good cloud-native citizens. Regardless of the application’s nature, you should aim to follow these guidelines. Adhering to these principles will help ensure that your applications are suitable for automation on Kubernetes.&lt;/p&gt;&lt;h3&gt;Health Probe pattern&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Health Probe&lt;/i&gt; dictates that every container should implement specific APIs to help the platform observe and manage the application in the healthiest way possible. To be fully automatable, a cloud-native application must be highly observable by allowing its state to be inferred so that Kubernetes can detect whether the application is up and ready to serve requests. These observations influence the life-cycle management of Pods and the way traffic is routed to the application.&lt;/p&gt;&lt;h3&gt;Predictable Demands pattern&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Predictable Demands&lt;/i&gt; explains why every container should declare its resource profile and stay confined to the indicated resource requirements. The foundation of successful application deployment, management, and coexistence on a shared cloud environment is dependent on identifying and declaring the application’s resource requirements and runtime dependencies. This pattern describes how you should declare application requirements, whether they are hard runtime dependencies or resource requirements. Declaring your requirements is essential for Kubernetes to find the right place for your application within the cluster.&lt;/p&gt;&lt;h3&gt;Automated Placement patterns&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Automated Placement&lt;/i&gt;&amp;nbsp;explains how to influence workload distribution in a multi-node cluster. Placement is the core function of the Kubernetes scheduler for assigning new Pods to nodes satisfying container resource requests and honoring scheduling policies. This pattern describes the principles of Kubernetes’ scheduling algorithm and the way to influence the placement decisions from the outside.&lt;/p&gt;&lt;h1&gt;&lt;span style="font-weight: normal;"&gt;Structural patterns&lt;/span&gt;&lt;/h1&gt;&lt;p class="selectionShareable"&gt;Having good cloud-native containers is the first step, but not enough. Reusing containers and combining them into Pods to achieve the desired outcome is the next step. The patterns in this category are focused on structuring and organizing containers in a Pod to satisfy different use cases. The forces that affect containers in Pods result in these patterns.&lt;/p&gt;&lt;h3&gt;Init Container pattern&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Init Container&lt;/i&gt; introduces a separate life cycle for initialization-related tasks and the main application containers. Init Containers enable separation of concerns by providing a separate life cycle for initialization-related tasks distinct from the main application containers. This pattern introduces a fundamental Kubernetes concept that is used in many other patterns when initialization logic is required.&lt;/p&gt;&lt;h3&gt;Sidecar patterns&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Sidecar&lt;/i&gt;&amp;nbsp;describes how to extend and enhance the functionality of a pre-existing container without changing it. This pattern is one of the fundamental container patterns that allows single-purpose containers to cooperate closely together.&lt;/p&gt;&lt;h1&gt;&lt;span style="font-weight: normal;"&gt;Behavioral patterns&lt;/span&gt;&lt;/h1&gt;&lt;p class="selectionShareable"&gt;These patterns describe the life-cycle guarantees of the Pods ensured by the managing platform. Depending on the type of workload, a Pod might run until completion as a batch job or be scheduled to run periodically. It might run as a daemon service or singleton. Picking the right life-cycle management primitive will help you run a Pod with the desired guarantees.&lt;/p&gt;&lt;h3&gt;Batch Job patterns&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Batch Job&lt;/i&gt; describes how to run an isolated, atomic unit of work until completion. This pattern is suited for managing isolated atomic units of work in a distributed environment.&lt;/p&gt;&lt;h3&gt;Stateful Service patterns&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Stateful Service&lt;/i&gt;&amp;nbsp;describes how to create and manage distributed stateful applications with Kubernetes. Such applications require features such as persistent identity, networking, storage, and ordinality. The StatefulSet primitive provides these building blocks with strong guarantees ideal for the management of stateful applications.&lt;/p&gt;&lt;h3&gt;Service Discovery pattern&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Service Discovery&lt;/i&gt; explains how clients can access and discover the instances that are providing application services. For this purpose, Kubernetes provides multiple mechanisms, depending on whether the service consumers and producers are located on or off the cluster.&lt;/p&gt;&lt;h1&gt;&lt;span style="font-weight: normal;"&gt;Higher-level patterns&lt;/span&gt;&lt;/h1&gt;&lt;p class="selectionShareable"&gt;The patterns in this category are more complex and represent higher-level application management patterns. Some of the patterns here (such as Controller) are timeless, and Kubernetes itself is built on top of them.&lt;/p&gt;&lt;h3&gt;Controller pattern&lt;/h3&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;Controller&lt;/i&gt; is a pattern that actively monitors and maintains a set of Kubernetes resources in a desired state. The heart of Kubernetes itself consists of a fleet of controllers that regularly watch and reconcile the current state of applications with the declared target state. This pattern describes how to leverage this core concept for extending the platform for our own applications.&lt;/p&gt;&lt;h3&gt;Operator pattern&lt;/h3&gt;&lt;p class="selectionShareable"&gt;An &lt;i&gt;Operator&lt;/i&gt; is a Controller that uses a CustomResourceDefinitions to encapsulate operational knowledge for a specific application in an algorithmic and automated form. The Operator pattern allows us to extend the Controller pattern for more flexibility and greater expressiveness. There are an increasing number of &lt;a href="http://operatorhub.io/" rel="nofollow" target="_blank"&gt;Operators&lt;/a&gt; for Kubernetes, and this pattern is turning into the major form of operating complex distributed systems.&lt;/p&gt;&lt;h1&gt;&lt;span style="font-weight: normal;"&gt;Summary&lt;/span&gt;&lt;/h1&gt;&lt;p class="selectionShareable"&gt;Today, Kubernetes is the most popular container orchestration platform. It is jointly developed and supported by all major software companies and offered as a service by all of the major cloud providers. Kubernetes supports both Linux and Windows systems, plus all major programming languages. This platform can also orchestrate and automate stateless and stateful applications, batch jobs, periodic tasks, and serverless workloads. The patterns described here are the most commonly used ones from a broader set of patterns that come with Kubernetes as shown below.&lt;/p&gt;&lt;p class="selectionShareable"&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-coYeOumg86U/Xsr8p3sR27I/AAAAAAAAOP8/WUn9zVbuylc-SXUJCn3jFCDJIXTOWvviACK4BGAsYHg/d/KubernetePatternsLevels-SingleColor%2B-%2BCopy%2Bof%2BFull.png" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="4455" data-original-width="6913" src="https://1.bp.blogspot.com/-coYeOumg86U/Xsr8p3sR27I/AAAAAAAAOP8/WUn9zVbuylc-SXUJCn3jFCDJIXTOWvviACK4BGAsYHg/d/KubernetePatternsLevels-SingleColor%2B-%2BCopy%2Bof%2BFull.png" width="475" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p class="selectionShareable" style="text-align: center;"&gt;&lt;i&gt;Kubernetes patters categorized&lt;/i&gt;&lt;br /&gt;&lt;/p&gt;&lt;p class="selectionShareable"&gt;Kubernetes is the new application portability layer and the common denominator among everybody on the cloud. If you are a software developer or architect, the odds are that Kubernetes will become part of your life in one form or another. Learning about the Kubernetes patterns described here will change the way you think about this platform. I believe that Kubernetes and the concepts originating from it will become as fundamental as object-oriented programming concepts. The patterns here are an attempt to create the Gang of Four design patterns, but for container orchestration. Reading this article must not be the end, but the beginning of your Kubernetes journey. Happy &lt;code class="notranslate"&gt;kubectl&lt;/code&gt;-ing!&lt;/p&gt;&lt;p class="selectionShareable"&gt;&lt;i&gt;&amp;nbsp;This post was originally published on Red Hat Developers. To read the original post, check &lt;a href="https://developers.redhat.com/blog/2020/05/11/top-10-must-know-kubernetes-design-patterns/" target="_blank"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;br /&gt;&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/axSP_LJUhmk" height="1" width="1" alt=""/&gt;</content><summary>Here are the must-know top 10 design patterns for beginners synthesized from the Kubernetes Patterns book. Getting familiar with these patterns will help you understand foundational Kubernetes concepts, which in turn will help you in discussions and when designing Kubernetes-based applications. There are many important concepts in Kubernetes, but these are the most important ones to start with: To...</summary><dc:creator>Bilgin Ibryam</dc:creator><dc:date>2020-05-24T23:13:00Z</dc:date><feedburner:origLink>http://www.ofbizian.com/2020/05/top-10-must-know-kubernetes-design.html</feedburner:origLink></entry><entry><title>Teiid Spring Boot 1.5.0 Released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HDBan1RNptw/teiid-spring-boot-150-released.html" /><category term="feed_group_name_teiid" scheme="searchisko:content:tags" /><category term="feed_name_teiid" scheme="searchisko:content:tags" /><author><name>Ramesh Reddy</name></author><id>searchisko:content:id:jbossorg_blog-teiid_spring_boot_1_5_0_released</id><updated>2020-05-22T22:52:18Z</updated><published>2020-05-22T22:52:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;I am excited to announce that Teiid Spring Boot version 1.5.0 released today to the maven repository based on &lt;a href="http://teiid.io/blog/post-140000/"&gt;Teiid 14.0.0&lt;/a&gt; release.&lt;br /&gt;&lt;br /&gt;If you have not used Teiid Spring Boot before, it is built on top Teiid Core libraries with developer simplification in mind. It simplifies the deployment model to a single VDB and provides you with executable binary rather than Server like WildFly where you need to deploy your VDBs.&lt;br /&gt;&lt;br /&gt;The release highlights are&lt;br /&gt;&lt;br /&gt;* Cassandra Data Source support&lt;br /&gt;* Materialization automation&lt;br /&gt;* Spring Boot version to 2.2.6&lt;br /&gt;* Keystore/Truststore simplifications that work across the system&lt;br /&gt;* SOAP Data Source support&lt;br /&gt;* FTP Database Support&lt;br /&gt;* A Lot of changes to detect data sources based on their inclusion as dependencies and consistent naming schemes across both Teiid and Teiid Spring Boot.&lt;br /&gt;&lt;br /&gt;For a full list see &lt;a href="https://issues.redhat.com/browse/TEIIDSB-57?jql=project%20%3D%20TEIIDSB%20AND%20fixVersion%20%3D%201.5.0%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC"&gt;this&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Take look at the various examples in Teiid Spring Boot and take it for test drive let me know if there are any issues or improvements you see.&lt;br /&gt;&lt;br /&gt;Ramesh..&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HDBan1RNptw" height="1" width="1" alt=""/&gt;</content><summary>I am excited to announce that Teiid Spring Boot version 1.5.0 released today to the maven repository based on Teiid 14.0.0 release. If you have not used Teiid Spring Boot before, it is built on top Teiid Core libraries with developer simplification in mind. It simplifies the deployment model to a single VDB and provides you with executable binary rather than Server like WildFly where you need to d...</summary><dc:creator>Ramesh Reddy</dc:creator><dc:date>2020-05-22T22:52:00Z</dc:date><feedburner:origLink>http://teiid.blogspot.com/2020/05/teiid-spring-boot-150-released.html</feedburner:origLink></entry><entry><title>Stack clash mitigation in GCC, Part 3</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hRphI7H0NRk/" /><category term="C" scheme="searchisko:content:tags" /><category term="C stack overflow" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="gcc" scheme="searchisko:content:tags" /><category term="glibc" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="stack access" scheme="searchisko:content:tags" /><author><name>Jeff Law</name></author><id>searchisko:content:id:jbossorg_blog-stack_clash_mitigation_in_gcc_part_3</id><updated>2020-05-22T07:00:59Z</updated><published>2020-05-22T07:00:59Z</published><content type="html">&lt;p&gt;In previous posts, &lt;a href="https://developers.redhat.com/blog/2017/09/25/stack-clash-mitigation-gcc-background/"&gt;&lt;em&gt;Stack Clash Mitigation in GCC — Background&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/2019/04/30/stack-clash-mitigation-in-gcc-why-fstack-check-is-not-the-answer/"&gt;&lt;em&gt;Stack Clash mitigation in GCC: Why -fstack-check is not the answer&lt;/em&gt;&lt;/a&gt;, I hopefully showed the basics of how &lt;a target="_blank" rel="nofollow" href="https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt"&gt;stack clash attacks&lt;/a&gt; are structured and why GCC&amp;#8217;s existing &lt;code&gt;-fstack-check&lt;/code&gt; mechanism is insufficient for protection.&lt;/p&gt; &lt;p&gt;So, what should we do? Clearly we want something similar to &lt;code&gt;-fstack-check&lt;/code&gt;, but without the fundamental problems. Enter a new option: &lt;code&gt;-fstack-clash-protection&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The key principles for code generation to prevent a stack clash attack are:&lt;/p&gt; &lt;p&gt;&lt;span id="more-583897"&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;No single allocation can be greater than a page. The compiler must translate large requests into a series of page- or smaller-sized requests.&lt;/li&gt; &lt;li&gt;As pages are allocated, emit instructions to probe them. (Let&amp;#8217;s call these &lt;em&gt;explicit probes&lt;/em&gt;.)&lt;/li&gt; &lt;li&gt;A series of sub-page allocations without intervening probes can not allocate more than a page in total.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A naive implementation around these principles could be highly inefficient, but this option provides the basis for building a secure, high-performance implementation.&lt;/p&gt; &lt;h2&gt;Implicit probes to improve performance&lt;/h2&gt; &lt;p&gt;A stack access that occurs naturally in the code is an &lt;em&gt;implicit probe&lt;/em&gt;. An implicit probe implies no additional cost; therefore, using an implicit probe rather than an explicit probe is advantageous. For example, an implicit probe might occur due to the behavior of the target architecture, the requirements of the application binary interface (ABI), or by analysis of existing memory references in the program.&lt;/p&gt; &lt;p&gt;For example, the call instruction on many processors pushes the return address onto the stack. Thus, the call instruction would fault if the stack was in the stack guard. This is an implicit probe at *sp. Some application binary interfaces require that *sp always contains a back-chain pointer (the pointer to the next outer stack frame). Thus, every stack allocation is required to atomically update *sp. Again, this is an implicit probe of *sp.&lt;/p&gt; &lt;p&gt;We can also analyze the generated code. For example, on one target the caller allocates space for the callee to save registers. Thus, in the callee, a register save to *(sp + 48) is an implicit probe at *(sp + 48). On other targets, the callee often pushes pairs of registers onto the stack at function entry. Those pushes are implicit probes at *sp.&lt;/p&gt; &lt;p&gt;It turns out that taking advantage of the implicit probes noted above can dramatically decrease the amount of explicit probing. If we look at glibc as an example on x86 and PPC we see that less than 2% of the functions in glibc require explicit probing in their prologues. For example, if a function allocates less than a page of stack space on these architectures, then no explicit probe is necessary.&lt;/p&gt; &lt;h2&gt;Current status&lt;/h2&gt; &lt;p&gt;Red Hat&amp;#8217;s engineers implemented &lt;code&gt;-fstack-clash-protection&lt;/code&gt; for all &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) targets starting with RHEL 7.5. RHEL 7.5 enables &lt;code&gt;-fstack-clash-protection&lt;/code&gt; for glibc only. Starting with &lt;a href="https://developers.redhat.com/rhel8/"&gt;RHEL 8&lt;/a&gt;, the entire distribution is compiled with &lt;code&gt;-fstack-clash-protection&lt;/code&gt; and &lt;code&gt;annobin&lt;/code&gt;/&lt;code&gt;annocheck&lt;/code&gt; are used to verify that the distribution was compiled with the proper flags.&lt;/p&gt; &lt;p&gt;Fedora 27 and later enable &lt;code&gt;-fstack-clash-protection&lt;/code&gt; by default for all packages using the standard default compilation options (note that there is no &lt;code&gt;-fstack-clash-protection&lt;/code&gt; support for 32-bit ARM targets).&lt;/p&gt; &lt;p&gt;GCC 8 includes &lt;code&gt;-fstack-clash-protection&lt;/code&gt; support for the Intel, IBM Power, IBM Z series, and ARM&amp;#8217;s aarch64 targets.&lt;/p&gt; &lt;p&gt;LLVM 11 will include stack clash protections for Intel 64 and AMD64 written by Serge Guelton.&lt;/p&gt; &lt;h2&gt;Testing&lt;/h2&gt; &lt;p&gt;Red Hat&amp;#8217;s engineers have written a variety of tests to verify the analysis of static and dynamic stack utilization. Red Hat&amp;#8217;s engineers have also written regression tests for all bugs reported against &lt;code&gt;-fstack-clash-protection&lt;/code&gt; since its introduction to GCC. These tests run as a part of the standard regression testing process for GCC. Most of the tests are portable enough to be usable on other targets if one was to implement stack clash mitigation on a currently unsupported target.&lt;/p&gt; &lt;p&gt;Red Hat&amp;#8217;s engineers also implemented a scanner that can examine relocatable objects, executables, and dynamic shared objects. The scanner looks for violations of the key principles listed above within an instruction window and notifies the developer of suspicious code. Red Hat has used the scanner to scan key libraries and objects (with hand verification of all the sequences reported as potentially vulnerable by the scanner). This practice proved particularly useful in verifying that Fedora 27 was consistently using &lt;code&gt;-fstack-clash-protection&lt;/code&gt; and invalidating improvements to the aarch64 implementation made by ARM&amp;#8217;s engineers.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#038;title=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" data-a2a-url="https://developers.redhat.com/blog/2020/05/22/stack-clash-mitigation-in-gcc-part-3/" data-a2a-title="Stack clash mitigation in GCC, Part 3"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/22/stack-clash-mitigation-in-gcc-part-3/"&gt;Stack clash mitigation in GCC, Part 3&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hRphI7H0NRk" height="1" width="1" alt=""/&gt;</content><summary>In previous posts, Stack Clash Mitigation in GCC — Background and Stack Clash mitigation in GCC: Why -fstack-check is not the answer, I hopefully showed the basics of how stack clash attacks are structured and why GCC’s existing -fstack-check mechanism is insufficient for protection. So, what should we do? Clearly we want something similar to -fstack-check, but without the fundamental problems. En...</summary><dc:creator>Jeff Law</dc:creator><dc:date>2020-05-22T07:00:59Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/22/stack-clash-mitigation-in-gcc-part-3/</feedburner:origLink></entry><entry><title>Use Node.js 14 on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/SXjlHKa8Wo8/" /><category term="docker" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="node.js 14" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="Universal Base Images (UBI)" scheme="searchisko:content:tags" /><author><name>Lucas Holmquist</name></author><id>searchisko:content:id:jbossorg_blog-use_node_js_14_on_red_hat_openshift</id><updated>2020-05-21T07:00:49Z</updated><published>2020-05-21T07:00:49Z</published><content type="html">&lt;p&gt;On April 21st, &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt; released its latest major version with &lt;a href="https://nodejs.org/en/blog/release/v14.0.0/"&gt;Node.js 14&lt;/a&gt;. Because this is an even-numbered release, it will become a Long Term Support (LTS) release in October 2020. This release brings a host of improvements and features, such as improved diagnostics, a V8 upgrade, an experimental Async Local Storage API, hardened the streams APIs, and more.&lt;/p&gt; &lt;p&gt;While Red Hat will release a &lt;a href="https://developers.redhat.com/blog/category/ubi/"&gt;Universal Base Image (UBI)&lt;/a&gt; for Node.js 14 in the coming months for &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Red Hat Enterprise Linux&lt;/a&gt;, this article helps you get started today. If you&amp;#8217;re interested in more about Node.js 14&amp;#8217;s improvements and new features, check out the article listed at the end. &lt;span id="more-719127"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s use a sample application that is based on the official &lt;a target="_blank" rel="nofollow" href="https://nodejs.org/fr/docs/guides/nodejs-docker-webapp/#dockerizing-a-node-js-web-app"&gt;&lt;em&gt;How to Dockerize a Node.js Application&lt;/em&gt; Nodejs.org docs&lt;/a&gt;. This is a simple Express.js application with a Dockerfile using the latest upstream community Node.js 14 image.&lt;/p&gt; &lt;h2&gt;How to deploy&lt;/h2&gt; &lt;p&gt;First, use the &lt;code&gt;oc new-app&lt;/code&gt; command with a Git repo that has a Dockerfile in it:&lt;/p&gt; &lt;pre&gt;$ oc new-app https://github.com/nodeshift-starters/basic-node-app-dockerized &lt;/pre&gt; &lt;p&gt;To access your application, you need to expose it using this simple command:&lt;/p&gt; &lt;pre&gt;$ oc expose svc/basic-node-app-dockerized &lt;/pre&gt; &lt;p&gt;Or, you can use the &lt;a target="_blank" rel="nofollow" href="https://www.npmjs.com/package/nodeshift"&gt;Nodeshift module&lt;/a&gt; to deploy a local directory. Assuming that you cloned the project we used earlier, you can run this command:&lt;/p&gt; &lt;pre&gt;$ npx nodeshift --build.strategy=Docker --expose &lt;/pre&gt; &lt;h3&gt;Wrap up&lt;/h3&gt; &lt;p&gt;As you can see, using Node.js 14 on Red Hat OpenShift today is pretty simple. To learn more about the improvements and features in Node.js 14, check out the official &lt;a target="_blank" rel="nofollow" href="https://medium.com/@nodejs/node-js-version-14-available-now-8170d384567e"&gt;Node.js blog post&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#038;title=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/05/21/use-node-js-14-on-red-hat-openshift/" data-a2a-title="Use Node.js 14 on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/21/use-node-js-14-on-red-hat-openshift/"&gt;Use Node.js 14 on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/SXjlHKa8Wo8" height="1" width="1" alt=""/&gt;</content><summary>On April 21st, Node.js released its latest major version with Node.js 14. Because this is an even-numbered release, it will become a Long Term Support (LTS) release in October 2020. This release brings a host of improvements and features, such as improved diagnostics, a V8 upgrade, an experimental Async Local Storage API, hardened the streams APIs, and more. While Red Hat will release a Universal ...</summary><dc:creator>Lucas Holmquist</dc:creator><dc:date>2020-05-21T07:00:49Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/21/use-node-js-14-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Cloud-native computing terms all in one place</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Z7_G6OLeORE/" /><category term="Cloud Native" scheme="searchisko:content:tags" /><category term="dark launch" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="Eventual Consistency" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="gRPC" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><author><name>Don Schenck</name></author><id>searchisko:content:id:jbossorg_blog-cloud_native_computing_terms_all_in_one_place</id><updated>2020-05-21T07:00:30Z</updated><published>2020-05-21T07:00:30Z</published><content type="html">&lt;p&gt;What does &lt;em&gt;eventual consistency&lt;/em&gt; even mean? Or, how about a &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass/blob/master/dark-launch.md"&gt;dark launch&lt;/a&gt;? What is &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass/blob/master/grpc.md"&gt;gRPC&lt;/a&gt;? Or a database &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass/blob/master/sagas.md"&gt;saga&lt;/a&gt;? Wouldn&amp;#8217;t it be great if someone gathered all the terms associated with cloud-native computing and put them in one place, where developers could find, link to, and even update them?&lt;/p&gt; &lt;p&gt;Well, guess what: &lt;a href="https://developers.redhat.com"&gt;Red Hat Developer&lt;/a&gt; has done just that with &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass"&gt;Cloud Native Compass&lt;/a&gt;, a GitHub repository containing definitions of terms and links to related materials for cloud-native software development and microservices.&lt;/p&gt; &lt;h2&gt;How to use Cloud Native Compass&lt;/h2&gt; &lt;p&gt;From &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass/blob/master/event-driven-architecture.md"&gt;event-driven architecture&lt;/a&gt; (EDA) to &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass/blob/master/write-only-database.md"&gt;write-only database&lt;/a&gt;, we&amp;#8217;ve attempted to define all of the terms you&amp;#8217;ll need to know as a cloud-native developer. Are you interested in sidecar containers? Tekton? Are you curious about what it means to use a ubiquitous language over a bounded context? Cloud Native Compass has you covered.&lt;/p&gt; &lt;p&gt;The entire project is open source, too. So, if you find definitions missing, or if you believe a definition is mistaken, or if something has changed since the definition was written—well, you can change it. Do you want to expand on a definition, or add a diagram? Simply fork the repo to your GitHub organization, make your changes, and submit a pull request.&lt;/p&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass"&gt;Cloud Native Compass&lt;/a&gt; is yours; it belongs to all of us. Feel free to use it as required.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#038;title=Cloud-native%20computing%20terms%20all%20in%20one%20place" data-a2a-url="https://developers.redhat.com/blog/2020/05/21/cloud-native-computing-terms-all-in-one-place/" data-a2a-title="Cloud-native computing terms all in one place"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/21/cloud-native-computing-terms-all-in-one-place/"&gt;Cloud-native computing terms all in one place&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Z7_G6OLeORE" height="1" width="1" alt=""/&gt;</content><summary>What does eventual consistency even mean? Or, how about a dark launch? What is gRPC? Or a database saga? Wouldn’t it be great if someone gathered all the terms associated with cloud-native computing and put them in one place, where developers could find, link to, and even update them? Well, guess what: Red Hat Developer has done just that with Cloud Native Compass, a GitHub repository containing d...</summary><dc:creator>Don Schenck</dc:creator><dc:date>2020-05-21T07:00:30Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/21/cloud-native-computing-terms-all-in-one-place/</feedburner:origLink></entry><entry><title>Reality Bites: 3 misconceptions that can lead to microservice mayhem (slides)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/GH5TyFmfc5U/reality-bites-3-misconceptions-can-lead-to-micorservice-mayhem-slides.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-reality_bites_3_misconceptions_that_can_lead_to_microservice_mayhem_slides</id><updated>2020-05-20T11:30:01Z</updated><published>2020-05-20T11:30:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Wt6lh11GLFA/XsO1DSYFhkI/AAAAAAAAxJ8/MgkRbP7GOKMbn56dNxi1dLUwwczpljdQACNcBGAsYHQ/s1600/Screenshot%2B2020-05-19%2Bat%2B12.29.23.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="reality bites microservices" border="0" data-original-height="784" data-original-width="1451" height="172" src="https://1.bp.blogspot.com/-Wt6lh11GLFA/XsO1DSYFhkI/AAAAAAAAxJ8/MgkRbP7GOKMbn56dNxi1dLUwwczpljdQACNcBGAsYHQ/s320/Screenshot%2B2020-05-19%2Bat%2B12.29.23.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Today we held an internal, yep, an internal only mini Red Hat Summit.&lt;br /&gt;&lt;br /&gt;This is a chance for talks to be presented select content to an internal worldwide audience at Red Hat, but that does not mean that all the content is confidential. That means I would be remiss if I didn't share my session content.&lt;br /&gt;&lt;br /&gt;In 2019, together with &lt;a href="https://twitter.com/RoelHodzelmans" target="_blank"&gt;Roel Hodzelmans&lt;/a&gt;, we presented a Red Hat Summit birds of a feather session called &lt;a href="https://www.schabell.org/2019/05/redhat-summit-2019-3-pitfalls-microservices.html" target="_blank"&gt;3 pitfalls everyone should avoid with microservices&lt;/a&gt;. This was the foundational start to our journey along the lines of sharing what is concerning to many of our customers.&lt;br /&gt;&lt;br /&gt;We explored some of the feedback from our session and continuing interactions with customers in the five part series &lt;a href="https://dzone.com/articles/5-questions-everyones-asking-about-microservices-p" target="_blank"&gt;5 questions everyone is asking about microservices&lt;/a&gt;. Furthermore, some of the material led to the creation of two architectural blueprints around agile integration use cases:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://dzone.com/articles/integration-key-to-experience-an-introduction-part" target="_blank"&gt;Omnichannel customer experience&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://dzone.com/articles/integrating-with-saas-applications-an-introduction" target="_blank"&gt;Integrate with SaaS applications&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;See below how this led to our reality bites session &lt;a href="https://insidebigdata.com/2020/02/15/reality-bites-3-misconceptions-that-can-lead-to-microservice-mayhem/" target="_blank"&gt;based on our article on InsideBigData.com&lt;/a&gt;&amp;nbsp;and access the slides.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;Below you'll find the abstract and slides from my session:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;span style="font-size: 18.72px;"&gt;Reality Bites: 3 misconceptions that can lead to microservice mayhem&lt;/span&gt;&lt;/h3&gt;&lt;i&gt;Microservices are core to organizations’ flexibility and agility in the digital world. But that doesn’t mean that microservices are right for every use case or even for every organization—at least, not right now. There is no doubt that microservices are becoming the mainstream. Within the next two years, 90% of all new apps will feature microservices architecture, according to “IDC FutureScape: Worldwide IT Industry 2019 Predictions.” Indeed, as organizations witness (and drive) more and more microservices success stories, they may feel compelled to join the race and accelerate their current microservices initiatives. Whether that is a good move or not depends not just on the readiness of the organization, but also on its willingness and ability to acknowledge some hard truths about the microservices model and culture. Let me take you on a tour of the reality behind three microservices misconceptions—and share real world implementation insights as to why that reality can sometimes bite.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="420" marginheight="0" marginwidth="0" scrolling="no" src="//www.slideshare.net/slideshow/embed_code/key/A3DnVr8PeG4vG4" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="510"&gt; &lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Comments and or feedback welcome, &lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;just drop me a note&lt;/a&gt;!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-QCcI7vZuks:R4aXfGHzPSU:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-QCcI7vZuks:R4aXfGHzPSU:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-QCcI7vZuks:R4aXfGHzPSU:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-QCcI7vZuks:R4aXfGHzPSU:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/-QCcI7vZuks" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/GH5TyFmfc5U" height="1" width="1" alt=""/&gt;</content><summary>Today we held an internal, yep, an internal only mini Red Hat Summit. This is a chance for talks to be presented select content to an internal worldwide audience at Red Hat, but that does not mean that all the content is confidential. That means I would be remiss if I didn't share my session content. In 2019, together with Roel Hodzelmans, we presented a Red Hat Summit birds of a feather session c...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-05-20T11:30:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/-QCcI7vZuks/reality-bites-3-misconceptions-can-lead-to-micorservice-mayhem-slides.html</feedburner:origLink></entry></feed>
