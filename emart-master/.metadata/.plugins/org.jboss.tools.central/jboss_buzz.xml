<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Cross Site Replication improvements</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/AdpFF2ciMlY/" /><category term="cross site replication" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="xsite" scheme="searchisko:content:tags" /><author><name>Pedro Ruivo</name></author><id>searchisko:content:id:jbossorg_blog-cross_site_replication_improvements</id><updated>2020-06-05T12:00:00Z</updated><published>2020-06-05T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan introduced Cross Site Replication functionality in version 5.2 and Infinispan 7 extended it to support state transfer. With an increase of popularity, Infinispan 11 brings two major improvements to Cross Site Replication. Let’s take a look at them.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_support_for_multiple_site_masters"&gt;&lt;a class="anchor" href="#_support_for_multiple_site_masters" /&gt;Support for multiple site masters&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan uses JGroups' &lt;a href="http://www.jgroups.org/manual4/index.html#Relay2Advanced"&gt;RELAY2&lt;/a&gt; protocol to enable inter-site communication. Each site has Site Masters: these are nodes with special roles, and are responsible for the communication between sites.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;RELAY2 can use more than one Site Master per site allowing load balancing of the inter-site requests. The new algorithm is now able to take advantage of multiple Site Masters.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The attribute &lt;code&gt;max_site_masters&lt;/code&gt; configures the number of Site Masters, and it defaults to 1. To take advantage of the new algorithm, increase the number of Site Masters in RELAY2 configuration by changing &lt;code&gt;max_site_masters&lt;/code&gt; to a value higher than 1. A number greater than the number of nodes can be used, and it enables the Site Master role in all nodes.&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;relay.RELAY2&lt;/span&gt; &lt;span class="attribute-name"&gt;site&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;&amp;lt;LOCAL_SITE_NAME&lt;/span&gt;&lt;/span&gt;&lt;span class="error"&gt;&amp;gt;&lt;/span&gt;" max_site_masters="&lt;span class="tag"&gt;&amp;lt;PUT_VALUE_HERE&amp;gt;&lt;/span&gt;"/&lt;span class="error"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;More information about RELAY2 is available in &lt;a href="http://www.jgroups.org/manual4/index.html#RELAY2"&gt;JGroups' Manual&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_conflict_detection_and_resolution_for_asynchronous_cross_site_replication"&gt;&lt;a class="anchor" href="#_conflict_detection_and_resolution_for_asynchronous_cross_site_replication" /&gt;Conflict detection and resolution for Asynchronous Cross-Site Replication&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan is able to detect conflicts in asynchronous mode by taking advantage of vector clocks. A conflict happens when 2 or more sites update the same key at the same time. Let’s look at an example between 2 sites (&lt;em&gt;LON&lt;/em&gt; and &lt;em&gt;NYC&lt;/em&gt;):&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight nowrap"&gt;&lt;code&gt; LON NYC k1=(n/a) 0,0 0,0 k1=2 1,0 --&amp;gt; 1,0 k1=2 k1=3 1,1 &amp;lt;-- 1,1 k1=3 k1=5 2,1 1,2 k1=8 --&amp;gt; 2,1 (conflict) (conflict) 1,2 &amp;lt;-- k1=5 2,1 &amp;lt;-&amp;gt; 2,1 k1=5&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;LON&lt;/em&gt; puts &lt;code&gt;k1=2&lt;/code&gt;, with vector clock &lt;code&gt;1,0&lt;/code&gt;, and replicates it to &lt;em&gt;NYC&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;NYC&lt;/em&gt; puts &lt;code&gt;k1=3&lt;/code&gt;, with vector clock &lt;code&gt;1,1&lt;/code&gt;, and replicates it to &lt;em&gt;LON&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;However if &lt;em&gt;LON&lt;/em&gt; puts &lt;code&gt;k1=5&lt;/code&gt; (with vector &lt;code&gt;2,1&lt;/code&gt;), and &lt;em&gt;NYC&lt;/em&gt; puts &lt;code&gt;k1=8&lt;/code&gt; in &lt;em&gt;NYC&lt;/em&gt; (with vector clock &lt;code&gt;1,2&lt;/code&gt;) at the same time, Infinispan detects the conflict since none of the vector clocks are greater than the other.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan resolves the conflicts by comparing using the site names in lexicographical order. The site’s name lower in lexicographical order takes priority. In the example above, both &lt;em&gt;LON&lt;/em&gt; and &lt;em&gt;NYC&lt;/em&gt; end up with &lt;code&gt;k1=5&lt;/code&gt; since &lt;em&gt;LON&lt;/em&gt; &amp;lt; &lt;em&gt;NYC&lt;/em&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can choose the priority by prepending a number to the site name. For example, if you want updates from &lt;em&gt;NYC&lt;/em&gt; to take priority over &lt;em&gt;LON&lt;/em&gt; updates, you can prepend a number to the site name, example: &lt;em&gt;1NYC&lt;/em&gt;, &lt;em&gt;2LON&lt;/em&gt; and so on.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For more information check the &lt;a href="https://infinispan.org/docs/dev/titles/xsite/xsite.html#conflicting_entries-xsite"&gt;Infinispan Documentation&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_get_it_use_it_ask_us"&gt;&lt;a class="anchor" href="#_get_it_use_it_ask_us" /&gt;Get it, Use it, Ask us!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please &lt;a href="https://infinispan.org/download/"&gt;download&lt;/a&gt;, &lt;a href="https://issues.jboss.org/projects/ISPN"&gt;report bugs&lt;/a&gt;, &lt;a href="https://infinispan.zulipchat.com/"&gt;chat with us&lt;/a&gt;, ask questions on &lt;a href="https://stackoverflow.com/questions/tagged/?tagnames=infinispan&amp;amp;sort=newest"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/AdpFF2ciMlY" height="1" width="1" alt=""/&gt;</content><summary>Infinispan introduced Cross Site Replication functionality in version 5.2 and Infinispan 7 extended it to support state transfer. With an increase of popularity, Infinispan 11 brings two major improvements to Cross Site Replication. Let’s take a look at them. Support for multiple site masters Infinispan uses JGroups' RELAY2 protocol to enable inter-site communication. Each site has Site Masters: t...</summary><dc:creator>Pedro Ruivo</dc:creator><dc:date>2020-06-05T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/06/05/xsite-improvements/</feedburner:origLink></entry><entry><title>Adding keystores and truststores to microservices in Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0A1a5MiDoEo/" /><category term="Java" /><category term="Kubernetes" /><category term="Microservices" /><category term="Security" /><category term="Spring Boot" /><category term="apache camel" /><category term="keystore" /><category term="openshift" /><category term="Red Hat Fuse" /><category term="truststore" /><author><name>Chandra Shekhar Pandey</name></author><id>https://developers.redhat.com/blog/?p=717767</id><updated>2020-06-05T07:00:50Z</updated><published>2020-06-05T07:00:50Z</published><content type="html">&lt;p&gt;You might not need Secure Socket Layer (SSL)-based communication between microservices in the same cluster, but it&amp;#8217;s often a requirement if you want to connect to a remote web service or message broker. In cases where you will expose a web service or other endpoints, you might also have to use a custom keystore in a microservice deployed on &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;, so that external clients only connect with a specific truststore.&lt;/p&gt; &lt;p&gt;In this article, I show you how to configure a keystore and a truststore for a &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt;-based microservice built with &lt;a href="https://developers.redhat.com/topics/spring-boot/"&gt;Spring Boot&lt;/a&gt;. I used the Apache Camel and CXF libraries from &lt;a href="https://developers.redhat.com/products/fuse/overview"&gt;Red Hat Fuse&lt;/a&gt; to develop the microservice. I used a source-to-image (S2I) deployment and tested the examples in Red Hat OpenShift 4.3.&lt;/p&gt; &lt;p&gt;&lt;span id="more-717767"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;About the example applications&lt;/h2&gt; &lt;p&gt;The first example application is a &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift"&gt;REST-based web service&lt;/a&gt; deployed in OpenShift 4.3 and communicating via SSL. The second example application is a &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl"&gt;client that connects with the remote secure web service&lt;/a&gt;. I&amp;#8217;ve hosted both applications and all of the example files for this article on GitHub.&lt;/p&gt; &lt;p&gt;Our task is to modify the microservice&amp;#8217;s &lt;code&gt;deployment-config&lt;/code&gt; so that we can mount the volume using a keystore or truststore. The keystore is for back-end services, and the truststore is for clients. For two-way SSL communication, we might want to use both mechanisms. Figure 1 shows the client application configured with a truststore.&lt;/p&gt; &lt;div id="attachment_718987" style="width: 428px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-23-05-30.png"&gt;&lt;img aria-describedby="caption-attachment-718987" class="wp-image-718987 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-23-05-30.png" alt="A screenshot with the volume mount and volume configurations highlighted." width="418" height="478" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-23-05-30.png 418w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-23-05-30-262x300.png 262w" sizes="(max-width: 418px) 100vw, 418px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-718987" class="wp-caption-text"&gt;Figure 1. The client configured with a truststore.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We&amp;#8217;ll go through the process to secure and deploy a REST-based web service in OpenShift 4.3. Note that these instructions work for either a new OpenShift project or an existing one. I will use the example applications that I&amp;#8217;ve just introduced.&lt;/p&gt; &lt;h2&gt;Secure and deploy a REST-based web service&lt;/h2&gt; &lt;p&gt;To secure and deploy a REST-based web service to OpenShift 4.3, start by creating the keystore and truststore. Then add them to your project&amp;#8217;s secret (&lt;code&gt;rest-keystore&lt;/code&gt;), as shown:&lt;/p&gt; &lt;pre&gt;$ keytool -genkey -alias mydomain -keyalg RSA -keystore keystore.jks -keysize 2048 $ keytool -export -alias mydomain -file mydomain.crt -keystore keystore.jks $ keytool -import -trustcacerts -alias mydomain -file mydomain.crt -keystore clientkeystore.jks $ oc create secret generic rest-keystore --from-file=keystore.jks &lt;/pre&gt; &lt;p&gt;Next, add the &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/src/main/resources/application.properties#L2-L6"&gt;SSL configuration&lt;/a&gt; to your &lt;code&gt;src/main/resources/application.properties&lt;/code&gt; file (follow the config link for more details):&lt;/p&gt; &lt;pre&gt;server.port=8080 server.ssl.key-password=password server.ssl.key-store=/mnt/secrets/keystore.jks server.ssl.key-store-provider=SUN server.ssl.key-store-type=JKS &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The keystore&amp;#8217;s path is &lt;code&gt;server.ssl.key-store&lt;/code&gt;. Later, we will modify the Spring Boot microservice&amp;#8217;s &lt;code&gt;deployment-config&lt;/code&gt; to mount a volume with this keystore.&lt;/p&gt; &lt;h3&gt;Define the web service&lt;/h3&gt; &lt;p&gt;Next, in &lt;code&gt;src/main/resources/endpoint.xml&lt;/code&gt;, you will &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/src/main/resources/endpoint.xml#L38"&gt;define the CXF-based JAX-RS web service&lt;/a&gt;. Note the inbound and outbound interceptors that are configured to log requests and responses.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The operation described in &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/src/main/java/io/fabric8/quickstarts/cxf/jaxrs/HelloServiceImpl.java#L21"&gt;HelloServiceImpl.java&lt;/a&gt;&lt;/code&gt; is invoked externally from clients.&lt;/p&gt; &lt;p&gt;This example microservice is initiated from &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/src/main/java/io/fabric8/quickstarts/cxf/jaxrs/SampleRestApplication.java#L24-L25"&gt;SampleRestApplication&lt;/a&gt;. Note the annotations &lt;code&gt;SpringBootApplication&lt;/code&gt; and &lt;code&gt;ImportResource&lt;/code&gt;. The &lt;code&gt;SpringBootApplication&lt;/code&gt; annotation is the same as declaring a class together with &lt;code&gt;@Configuration&lt;/code&gt;, &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;, and &lt;code&gt;@ComponentScan&lt;/code&gt; annotations. The &lt;code&gt;ImportResource&lt;/code&gt; annotation imports the bean definition from the resource&amp;#8217;s &lt;code&gt;endpoint.xml&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Deploy the web service&lt;/h3&gt; &lt;p&gt;Do the following in your OpenShift 4.3 GUI:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Select the &lt;strong&gt;Developer&lt;/strong&gt; perspective.&lt;/li&gt; &lt;li&gt;Select &lt;strong&gt;Add&lt;/strong&gt; &lt;strong&gt;-&amp;#62;&lt;/strong&gt; &lt;strong&gt;From Catalog&lt;/strong&gt; &lt;strong&gt;-&amp;#62;&lt;/strong&gt; &lt;strong&gt;Search&lt;/strong&gt; and look for &lt;strong&gt;CXF JAX-RS with Spring&lt;/strong&gt;, shown in Figure 2. In this case, we&amp;#8217;re using S2I to deploy both the web service and client applications in OpenShift. &lt;p&gt;&lt;div id="attachment_717827" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-56-49.png"&gt;&lt;img aria-describedby="caption-attachment-717827" class="wp-image-717827 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-56-49-1024x463.png" alt="A screenshot showing the Developer perspective -&amp;#62; Add -&amp;#62; From Catalog -&amp;#62; Search -&amp;#62; CXF JAX-RS with Spring." width="640" height="289" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-56-49-1024x463.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-56-49-300x136.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-56-49-768x347.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-56-49.png 1266w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-717827" class="wp-caption-text"&gt;Figure 2. Search the developer catalog for shared apps, services, and S2I image builders.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Next, do the following:&lt;/p&gt; &lt;ol start="3"&gt; &lt;li&gt;Select the &lt;strong&gt;CXF JAX-RS with Spring&lt;/strong&gt; template and click &lt;strong&gt;Instantiate Template&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Set the &lt;strong&gt;Git Repository URL&lt;/strong&gt; and branch it.&lt;/li&gt; &lt;li&gt;Take note of the version and &lt;strong&gt;Service Name&lt;/strong&gt;. The other entries will remain the same.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Create&lt;/strong&gt; at the bottom of the page, as shown in Figure 3.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_717837" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-45-55.png"&gt;&lt;img aria-describedby="caption-attachment-717837" class="wp-image-717837" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-45-55-1024x517.png" alt="A screenshot showing the template instantiation window." width="639" height="323" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-45-55-1024x517.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-45-55-300x152.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-45-55-768x388.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-05-22-45-55.png 1045w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-717837" class="wp-caption-text"&gt;Figure 3. Instantiate your template.&lt;/p&gt;&lt;/div&gt; &lt;ol start="7"&gt; &lt;li&gt;Wait a few minutes for OpenShift to create the &lt;code&gt;build-config&lt;/code&gt;, &lt;code&gt;deployment-config&lt;/code&gt;, and (finally) the pods.&lt;/li&gt; &lt;/ol&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: In some cases, OpenShift might not have the templates that you need. See the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.5/html-single/fuse_on_openshift_guide/index"&gt;Red Hat Fuse documentation&lt;/a&gt; to add or update a template to the latest version.&lt;/p&gt; &lt;h3&gt;Mount a volume with the keystore&lt;/h3&gt; &lt;p&gt;Now you will mount a volume with the keystore. To do this, add two entries to your &lt;code&gt;deployment-config&lt;/code&gt;: &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/deploymentconfig.yaml#L114-L117"&gt;volumeMounts&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/deploymentconfig.yaml#L66-L71"&gt;keystore.jks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Adding &lt;code&gt;volumeMounts&lt;/code&gt; to &lt;code&gt;deployment-config&lt;/code&gt; creates the mount path. Once that&amp;#8217;s done, you can use your &lt;code&gt;rest-keystore&lt;/code&gt; secret to add the &lt;code&gt;keystore.jks&lt;/code&gt; entry to the mount path.&lt;/p&gt; &lt;h4&gt;Two ways to add a keystore&lt;/h4&gt; &lt;p&gt;There are two ways to add these entries to your &lt;code&gt;deployment-config&lt;/code&gt;. Your first option is to edit the &lt;code&gt;deployment-config&lt;/code&gt; file and add the entries manually, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_718947" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-50-04.png"&gt;&lt;img aria-describedby="caption-attachment-718947" class="wp-image-718947 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-50-04-1024x576.png" alt="A screenshot showing the project's deployment-config in OpenShift." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-50-04-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-50-04-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-50-04-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-50-04.png 1280w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-718947" class="wp-caption-text"&gt;Figure 4. Edit the deployment-config file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Your second option is to add the &lt;code&gt;rest-keystore&lt;/code&gt; secret to your project workload, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_718957" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-51-19.png"&gt;&lt;img aria-describedby="caption-attachment-718957" class="wp-image-718957 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-51-19-1024x576.png" alt="A screenshot of the 'Add Secret to Workload' dialog box." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-51-19-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-51-19-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-51-19-768x432.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screenshot-from-2020-05-07-20-51-19.png 1280w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-718957" class="wp-caption-text"&gt;Figure 5. Add the rest-keystore secret to the project workload.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you choose the second option, check the &lt;code&gt;deployment-config&lt;/code&gt; after saving your work. You will find entries showing that the keystore is volume-mounted from the &lt;code&gt;rest-keystore&lt;/code&gt; secret. You will still have to edit the configuration so that it exactly matches &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/deploymentconfig.yaml#L114-L117"&gt;volumeMounts&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/deploymentconfig.yaml#L66-L71"&gt;keystore.jks&lt;/a&gt;. Nonetheless, I prefer using the secret because it leads to fewer typos and YAML formatting issues.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: I had to set the &lt;code&gt;scheme&lt;/code&gt; as HTTPS for the &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/deploymentconfig.yaml#L81-L85"&gt;readiness&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/restsslopenshift/blob/master/deploymentconfig.yaml#L93-L97"&gt;liveliness&lt;/a&gt; probes.&lt;/p&gt; &lt;h3&gt;Accessing the microservice&lt;/h3&gt; &lt;p&gt;After you&amp;#8217;ve completed these configurations, you should find you have a running and healthy pod:&lt;/p&gt; &lt;pre&gt;$ oc get pods s2i-fuse74-spring-boot-cxf-jaxrs-8-dq4zd 1/1 Running 0 3d7h &lt;/pre&gt; &lt;p&gt;To access this microservice from an external client, you will need to create an OpenShift route with &lt;code&gt;passthrough&lt;/code&gt; termination:&lt;/p&gt; &lt;pre&gt;$ oc get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE ssl-cxf-jaxrs ClusterIP None 9413/TCP 4d6h $ oc create route passthrough --service ssl-cxf-jaxrs $ oc get route NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD ssl-cxf-jaxrs ssl-cxf-jaxrs-restproject.apps.openshift4b.lab.upshift.rdu2.redhat.com ssl-cxf-jaxrs passthrough None ssl-cxf-jaxrs-route ssl-cxf-jaxrs-route-restproject.apps.openshift4b.lab.upshift.rdu2.redhat.com ssl-cxf-jaxrs None &lt;/pre&gt; &lt;p&gt;Finally, access the route &lt;code&gt;ssl-cxf-jaxrs&lt;/code&gt;, which is a &lt;code&gt;passthrough&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;With that, you have configured SSL for the web service, as this output shows:&lt;/p&gt; &lt;pre&gt;$ curl -k https://ssl-cxf-jaxrs-restproject.apps.openshift4b.lab.upshift.rdu2.redhat.com/services/helloservice/sayHello/FIS Hello FIS, Welcome to CXF RS Spring Boot World!!! &lt;/pre&gt; &lt;p&gt;Next, I&amp;#8217;ll quickly introduce the client application, which you can set up to connect to your one-way SSL web service application.&lt;/p&gt; &lt;h2&gt;A client for the secure REST-based web service&lt;/h2&gt; &lt;p&gt;My example for the client application is an &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl"&gt;Apache Camel SSL-based microservice&lt;/a&gt; (&lt;code&gt;camel-client-ssl&lt;/code&gt;). I deployed the microservice in OpenShift using the same S2I approach I just demonstrated for the web service.&lt;/p&gt; &lt;p&gt;For this example, I&amp;#8217;ve also written a &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/Fuse7_examples/blob/master/jaxrs-ssl-example-springboot-openshift/spring-boot-cxf-jaxrs-xml-tls"&gt;special version of the web service&lt;/a&gt; that you can run standalone in your local laptop or a virtual machine (VM). To run the example, you just need to ensure that your OpenShift cluster is reachable from your VM or notebook. The first time you run the application, use &lt;code&gt;mvn spring-boot:run&lt;/code&gt; from the &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Example setup&lt;/h3&gt; &lt;p&gt;I won&amp;#8217;t go through the entire process of configuring the client to interact with your web service. I&amp;#8217;ll just point out a few essential details.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;First, notice the &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/src/main/resources/application.properties#L11-L15"&gt;application.properties&lt;/a&gt;&lt;/code&gt; for the Spring Boot-based microservice. You will use this file to define the IP and port of the service you want to connect to, and the details of the truststore.&lt;/li&gt; &lt;li&gt;Use the &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/src/main/resources/spring/camel-context.xml#L9-L11"&gt;camel-http4&lt;/a&gt;&lt;/code&gt; component with your truststore configuration and &lt;code&gt;NoopHostnameVerifier&lt;/code&gt;, so that &lt;code&gt;hostname&lt;/code&gt; isn&amp;#8217;t validated. (I used a self-signed keystore and truststore.)&lt;/li&gt; &lt;li&gt;The client is a Camel route with an &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/src/main/resources/spring/camel-context.xml#L16"&gt;camel-http&lt;/a&gt;&lt;/code&gt; endpoint used for the &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/src/main/resources/spring/camel-context.xml#L23"&gt;producer or HTTP client&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;For the example to work, you must deploy the client microservice using S2I. Search for &lt;strong&gt;Camel XML DSL with Spring Boot&lt;/strong&gt; in your OpenShift developer catalog. Instantiate the template with the Git URL pointing to the &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/src/main/resources/spring/camel-context.xml#L16"&gt;camel-http&lt;/a&gt;&lt;/code&gt; endpoint.&lt;/li&gt; &lt;li&gt;Once you&amp;#8217;ve deployed the client microservice, modify the &lt;code&gt;deployment-config&lt;/code&gt; as described in the previous section: &lt;ul&gt; &lt;li&gt;Add a &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/deploymentconfig.yaml#L115-L118"&gt;&lt;code&gt;volumeMounts&lt;/code&gt;&lt;/a&gt; entry to your &lt;code&gt;deployment-config&lt;/code&gt; to create the volume mount path.&lt;/li&gt; &lt;li&gt;Add a &lt;a target="_blank" rel="nofollow" href="https://github.com/1984shekhar/camel-client-ssl/blob/master/deploymentconfig.yaml#L66-L72"&gt;&lt;code&gt;keystore.jks&lt;/code&gt;&lt;/a&gt; entry to the volume-mount path. I recommend using the  &lt;code&gt;rest-keystore&lt;/code&gt; secret rather than directly modifying the &lt;code&gt;deployment-config&lt;/code&gt; file.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;That&amp;#8217;s it! With these steps, you should be able to use a truststore to connect to an external SSL web service or HTTPS endpoint from your client application.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;I have described the steps to configure a keystore for a remote web service or HTTP endpoint, and how to configure a truststore for a web service client, HTTP client, or messaging client. I hope that you will find the instructions helpful for creating microservices using certificates, or for creating an HTTP or messaging client to connect to an external HTTPS REST endpoint or message broker. I&amp;#8217;ve also provided instructions for migrating and deploying an existing application to OpenShift 4.3.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#38;linkname=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fadding-keystores-and-truststores-to-microservices-in-red-hat-openshift%2F&amp;#038;title=Adding%20keystores%20and%20truststores%20to%20microservices%20in%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/06/05/adding-keystores-and-truststores-to-microservices-in-red-hat-openshift/" data-a2a-title="Adding keystores and truststores to microservices in Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/05/adding-keystores-and-truststores-to-microservices-in-red-hat-openshift/"&gt;Adding keystores and truststores to microservices in Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0A1a5MiDoEo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;You might not need Secure Socket Layer (SSL)-based communication between microservices in the same cluster, but it&amp;#8217;s often a requirement if you want to connect to a remote web service or message broker. In cases where you will expose a web service or other endpoints, you might also have to use a custom keystore in [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/05/adding-keystores-and-truststores-to-microservices-in-red-hat-openshift/"&gt;Adding keystores and truststores to microservices in Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">717767</post-id><dc:creator>Chandra Shekhar Pandey</dc:creator><dc:date>2020-06-05T07:00:50Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/05/adding-keystores-and-truststores-to-microservices-in-red-hat-openshift/</feedburner:origLink></entry><entry><title>Mandrel: A community distribution of GraalVM for the Red Hat build of Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/zEPWxE__E8o/" /><category term="Java" /><category term="Kubernetes" /><category term="Linux" /><category term="Modern App Dev" /><category term="Quarkus" /><category term="GraalVM" /><category term="OpenJDK 11" /><category term="openshift" /><category term="RHEL" /><author><name>Mark Little</name></author><id>https://developers.redhat.com/blog/?p=727707</id><updated>2020-06-05T07:00:16Z</updated><published>2020-06-05T07:00:16Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400;"&gt;The Java community has demonstrated time and time again its ability to evolve, improve, and adapt to meet the needs of its developers and users. Even after 25 years of language and framework choices, &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; has consistently ranked in the &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.tiobe.com/tiobe-index//"&gt;&lt;span style="font-weight: 400;"&gt;top&lt;/span&gt;&lt;/a&gt; &lt;a target="_blank" rel="nofollow" href="https://spectrum.ieee.org/computing/software/the-top-programming-languages-2019"&gt;&lt;span style="font-weight: 400;"&gt;languages&lt;/span&gt;&lt;/a&gt; &lt;a target="_blank" rel="nofollow" href="https://redmonk.com/sogrady/2020/02/28/language-rankings-1-20/"&gt;&lt;span style="font-weight: 400;"&gt;in use&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; today due to its strong track record and capabilities in enterprise use cases. Red Hat has long been a strong leader in Java and open source software development and remains committed to being at the forefront of Java as it continues to evolve.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Today, Red Hat and the &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.graalvm.org/community/"&gt;&lt;span style="font-weight: 400;"&gt;GraalVM community&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; jointly established a new downstream distribution of GraalVM, called &lt;/span&gt;&lt;a href="https://github.com/graalvm/mandrel"&gt;Mandrel&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;. &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;This distribution will power the &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/quarkus"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat build of Quarkus&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, a recently &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;announced&lt;/span&gt; &lt;a href="https://developers.redhat.com/blog/2020/05/28/quarkus-a-kubernetes-native-java-runtime-now-fully-supported-by-red-hat/"&gt;&lt;span style="font-weight: 400;"&gt;addition to &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Runtimes&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;. This article explains what Mandrel is and why it is necessary.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span id="more-727707"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Java going forward&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;For some time now, Red Hat has been looking at the &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/looking-next-20-years-enterprise-java"&gt;&lt;span style="font-weight: 400;"&gt;future of Java&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; and how its customers and their developers could continue to use their years of Java experience in this new world of &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;. That Java experience applies to more than the language—it also includes many libraries and frameworks that have become ingrained in the muscle memory of developers, for example: Hibernate, CDI, RESTEasy, MicroProfile, or reactive frameworks such as Eclipse Vert.x and many others.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt;&lt;span style="font-weight: 400;"&gt;Quarkus project&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; was launched in 2019 and provided that evolutionary step needed for Java developers in this new world of Kubernetes and &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;serverless&lt;/a&gt;. In essence, Quarkus &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://siliconangle.com/2020/04/29/quarkus-makes-java-compatible-with-new-cloud-native-app-development-rhsummit-rhsummit/"&gt;&lt;span style="font-weight: 400;"&gt;changes the rules of the Java game&lt;/span&gt;&lt;/a&gt;. I&lt;span style="font-weight: 400;"&gt;t optimizes both Java applications and the frameworks that underpin them to better match the constrained environments in which they are deployed and reverses the architectural and design choices made in Java’s early days. Quarkus-native applications bring a much smaller memory footprint at the expense of throughput, which is now handled through scaling and elasticity—the same way you find in Kubernetes. It also brings faster startup speeds at the expense of dynamic runtime behavior, which is now unnecessary overhead in immutable deployment architectures—again, like you find in Kubernetes.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Quarkus and GraalVM&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.graalvm.org/"&gt;&lt;span style="font-weight: 400;"&gt;GraalVM&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; is an ecosystem and shared runtime offering performance advantages for a variety of languages, including Java. Its ability to do &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.graalvm.org/docs/reference-manual/native-image/"&gt;&lt;span style="font-weight: 400;"&gt;ahead of time compilation&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; to create extremely optimized Java applications has made it particularly well suited for running Java in even smaller footprints than you can get with traditional JVM deployments. With the introduction of the GraalVM project a few years ago, it made a lot of sense to design Quarkus, and the many frameworks it provides, to make it possible to use with this tool. This decision provides further optimization for Quarkus applications and helps them work together seamlessly and easily, without sacrificing the rich APIs developers know and love. GraalVM has become an important part of the Quarkus story, and Red Hat is committed to its success. Red Hat sits on the &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://medium.com/graalvm/announcing-the-graalvm-project-advisory-board-282223cde700"&gt;&lt;span style="font-weight: 400;"&gt;GraalVM Project Advisory Board&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; and regularly contributes features and fixes for the GraalVM community, such as improved debuggability of native images, AArch64 native image support, and continued work on supporting Java Flight Recorder (JFR).&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Red Hat recently &lt;/span&gt;&lt;a href="https://www.redhat.com/en/about/press-releases/red-hat-advances-java-kubernetes-delivers-quarkus-fully-supported-runtime-cloud-native-development"&gt;&lt;span style="font-weight: 400;"&gt;announced its support of Quarkus&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; for production use by our customers. By using the &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/quarkus"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat build of Quarkus&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, our customers now have a fully supported and highly-optimized Java solution for their Kubernetes and serverless applications. Developers can also use GraalVM to compile their Quarkus apps down to native binaries, further optimizing for cloud and Kubernetes. This feature is &lt;/span&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_build_of_quarkus/1.3/html/release_notes_for_red_hat_build_of_quarkus_1.3/ref-rn-technology-preview"&gt;&lt;span style="font-weight: 400;"&gt;currently in Technical Preview&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; as we work with the GraalVM community so we can support Red Hat customers when using it with Quarkus—which brings us to Mandrel.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Mandrel&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Red Hat’s dedication to open source communities underpins its enterprise-grade support model. We believe strongly that open source innovation is critical to the success not only of Red Hat but also the communities it serves. GraalVM is a large project with many moving parts, with contributions every day from Red Hat, Oracle, and many other GraalVM community members.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;We have found that the best way to support our customers while remaining true to our open source commitment is to establish &lt;/span&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;downstream&lt;/span&gt;&lt;/i&gt;&lt;span style="font-weight: 400;"&gt; open source distributions built in concert with their upstream counterparts. You see this with downstream distributions of Linux with &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://getfedora.org/"&gt;&lt;span style="font-weight: 400;"&gt;Fedora&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; and &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.centos.org/"&gt;&lt;span style="font-weight: 400;"&gt;CentOS&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, Kubernetes with &lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.okd.io/"&gt;&lt;span style="font-weight: 400;"&gt;OKD&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, and now with &lt;/span&gt;&lt;a href="https://github.com/graalvm/mandrel"&gt;&lt;span style="font-weight: 400;"&gt;Mandrel&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; as a downstream of GraalVM. These communities work hand-in-hand to advance open source technology in a way that makes sense for both. This also enables Red Hat to continue to innovate in the open, even in its productization process, with an “upstream-first” mentality, preferring not to deviate from upstream.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;For Quarkus, the important piece of GraalVM is its native-image feature that produces native executables, which is a key feature to make Java competitive in cloud-native workloads. Mandrel allows us to have GraalVM bundled on top of OpenJDK 11 in Red Hat Enterprise Linux and other OpenJDK 11 distributions. On the GraalVM side, this allows features such as the in-progress Java Flight Recorder to be supported in Mandrel sooner than GraalVM if release timing requires it. Thus, Mandrel can best be described as a distribution of a regular OpenJDK with a specially packaged GraalVM native image. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The difference for the user is minimal, but for maintainability the upstream alignment with both OpenJDK 11 and GraalVM is critical. It means that Red Hat can offer better support to customers since we have skilled engineers working within the OpenJDK and GraalVM community.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;With Mandrel, both Red Hat customers and the GraalVM community benefit from truly open development, and Red Hat can support its customers with tried-and-true mechanisms while at the same time giving back to the upstream communities it relies on for continuing to advance the state of the art in open source computing.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#38;linkname=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F05%2Fmandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus%2F&amp;#038;title=Mandrel%3A%20A%20community%20distribution%20of%20GraalVM%20for%20the%20Red%20Hat%20build%20of%20Quarkus" data-a2a-url="https://developers.redhat.com/blog/2020/06/05/mandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus/" data-a2a-title="Mandrel: A community distribution of GraalVM for the Red Hat build of Quarkus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/05/mandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus/"&gt;Mandrel: A community distribution of GraalVM for the Red Hat build of Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/zEPWxE__E8o" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The Java community has demonstrated time and time again its ability to evolve, improve, and adapt to meet the needs of its developers and users. Even after 25 years of language and framework choices, Java has consistently ranked in the top languages in use today due to its strong track record and capabilities in enterprise [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/05/mandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus/"&gt;Mandrel: A community distribution of GraalVM for the Red Hat build of Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">727707</post-id><dc:creator>Mark Little</dc:creator><dc:date>2020-06-05T07:00:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/05/mandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus/</feedburner:origLink></entry><entry><title>Demystifying the Event Driven Architecture - An open solution (part 3)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nqsMvAXxec4/demystifying-event-driven-architecture-an-open-solution.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-demystifying_the_event_driven_architecture_an_open_solution_part_3</id><updated>2020-06-05T07:15:17Z</updated><published>2020-06-05T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em; text-align: center;"&gt;&lt;img alt="event-driven architecture" border="0" data-original-height="530" data-original-width="800" height="212" src="https://1.bp.blogspot.com/-00SD2ZsVdbE/XtZPXc7TTjI/AAAAAAAAxNc/uuYHNqccZ5IEDWHafk1MSjetkzzFfzpiACK4BGAsYHg/w320-h212/demystifying-eda-intro.png" width="320" /&gt;&lt;/div&gt;High throughput, resiliency, scalability and speed—are you searching for a way to leverage microservice integration to handle all the event-driven communications in your growing architecture landscape?&lt;br /&gt;&lt;br /&gt;Search no further.&lt;br /&gt;&lt;br /&gt;This series of articles guides you through the world of integration using microservice architecture and specifically explores the world of Event Driven Architecture (EDA). It’s a central story to organizations moving forward into the digital world and is worth exploring as part of your strategy for continued success.&lt;br /&gt;&lt;br /&gt;The first article was introducing &lt;a href="https://www.schabell.org/2020/04/demystifying-event-driven-architecture-an-introduction.html" target="_blank"&gt;how EDA might be the right choice&lt;/a&gt; for your microservice integration solutions, with a more detailed examination of when you might not need EDA at all. The &lt;a href="https://www.schabell.org/2020/05/demystifying-event-driven-architecture-making-the-case.html" target="_blank"&gt;second article pivoted&lt;/a&gt; back to exploring use cases aligning to EDA solutions and presenting real world examples. This last article looks at the open technologies that can help you to implement an EDA architecture.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h2&gt;An open architecture&lt;/h2&gt;&lt;/div&gt;The ideal use of EDA as an integration architecture has its foundations in solid business advantages. It’s providing you with the ability to react to the continuously changing markets you operate in at near real-time. Data communications having been reduced to must milliseconds gives you abilities to make informed decisions based on up to date information across your enterprise systems. With systems now delivering on big data scalability with an EDA architecture, you’re able to ensure reliable communications with operational integrity ensuring even less downtime.&lt;br /&gt;&lt;br /&gt;So how does this look in an open EDA architecture?&lt;br /&gt;&lt;br /&gt;In this case the focus of open is leveraging open technologies for a flexible EDA architecture. Using open technologies allows for selection of best practices, most effective, standards aligned, and widely recognised solution pieces for your architecture.&lt;br /&gt;&lt;br /&gt;One of the core technologies currently being leveraged for open EDA architectures is &lt;a href="https://kafka.apache.org/" target="_blank"&gt;Apache Kafka&lt;/a&gt;, which delivers the integration layer for building real-time data streams to capture your events. Not only can you develop streaming applications, but it’s also providing the infrastructure to enable your development teams to create scalable stream processing applications. It’s powerful capability to store streaming data safely in a fault-tolerant environment completes the requirements met for most organizations today implementing an EDA architecture.&lt;br /&gt;&lt;br /&gt;When looking to modern cloud-native development and deployments, containers remain an essential component of any architecture. Combining Kafka with a container platform is essential to help with scalability, microservices, automation, and operations needs across fully automated cloud-native deployments into production.&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-kc1H0WXjw40/XtZPxJyDJkI/AAAAAAAAxNw/ivOaB_PlpnsYijL-RTXdYUOafVpB_J5VQCK4BGAsYHg/cloud-native-development-deployment-sd.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em; text-align: center;"&gt;&lt;img alt="cloud-native deployment" border="0" data-original-height="3042" data-original-width="5409" height="180" src="https://1.bp.blogspot.com/-kc1H0WXjw40/XtZPxJyDJkI/AAAAAAAAxNw/ivOaB_PlpnsYijL-RTXdYUOafVpB_J5VQCK4BGAsYHg/w320-h180/cloud-native-development-deployment-sd.png" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;While there are many views on how to design an EDA architecture, for now there are such different views and many of the decisions you need to make rely on existing architectural limitations. Maybe you have to deal with existing components that prevent full open EDA architecture adoption, but nothing prevents a hybrid path on the way to eventual open EDA architecture.&lt;br /&gt;&lt;br /&gt;In this case, it might be interesting to look closer at integration across all your channels when engaging your customers such as discussed in the &lt;a href="https://www.schabell.org/2018/11/integration-key-to-customer-experience-introduction.html" target="_blank"&gt;omnichannel architecture blueprint series&lt;/a&gt;. Another interesting aspect of any modern EDA architecture is examined in the &lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;cloud-native development blueprint series&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;What’s out there for you?&lt;/h3&gt;This article completes this series and hopefully helps you with positioning and understanding how important EDA is and how it could play a role in your solution architectures.&lt;br /&gt;&lt;br /&gt;If you’re interested in exploring EDA solutions using open source technologies, then take a look at &lt;a href="https://www.redhat.com/en/events/webinar/getting-started-event-driven-architecture-using-apache-kafka" style="text-decoration-line: none;" target="_blank"&gt;getting started with event-driven architecture using Apache Kafka&lt;/a&gt; or this free e-book on &lt;a href="https://www.redhat.com/en/resources/event-driven-applications-amq-streams-analyst-paper" style="text-decoration-line: none;" target="_blank"&gt;designing event-driven applications&lt;/a&gt;.&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=iKv01JhTfoY:S0xDsI-mf80:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=iKv01JhTfoY:S0xDsI-mf80:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=iKv01JhTfoY:S0xDsI-mf80:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=iKv01JhTfoY:S0xDsI-mf80:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=iKv01JhTfoY:S0xDsI-mf80:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/iKv01JhTfoY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nqsMvAXxec4" height="1" width="1" alt=""/&gt;</content><summary>High throughput, resiliency, scalability and speed—are you searching for a way to leverage microservice integration to handle all the event-driven communications in your growing architecture landscape? Search no further. This series of articles guides you through the world of integration using microservice architecture and specifically explores the world of Event Driven Architecture (EDA). It’s a ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-06-05T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/iKv01JhTfoY/demystifying-event-driven-architecture-an-open-solution.html</feedburner:origLink></entry><entry><title>Secure server by default</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/T5ZFyn8TflQ/" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="server" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-secure_server_by_default</id><updated>2020-06-05T07:52:49Z</updated><published>2020-06-04T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Infinispan server we introduced in 10.0 exposes a single port through which both Hot Rod and HTTP clients can connect.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;While Infinispan has had &lt;strong&gt;very&lt;/strong&gt; extensive security support since 7.0, the out-of-the-box default configuration did not enable authentication.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan 11.0’s server’s default configuration, instead, requires authentication. We have made several improvements to how authentication is configured and the tooling we provide to make the experience as smooth as possible.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_automatic_authentication_mechanism_selection"&gt;&lt;a class="anchor" href="#_automatic_authentication_mechanism_selection" /&gt;Automatic authentication mechanism selection&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Previously, when enabling authentication, you had to explicitly define which mechanisms had to be enabled per-protocol, with all of the peculiarities specific to each one (i.e. SASL for Hot Rod, HTTP for REST). Here is an example configuration with Infinispan 10.1 that enables DIGEST authentication:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;endpoints&lt;/span&gt; &lt;span class="attribute-name"&gt;socket-binding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;security-realm&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;hotrod-connector&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;hotrod&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;authentication&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;sasl&lt;/span&gt; &lt;span class="attribute-name"&gt;mechanisms&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;DIGEST-MD5&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;server-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;infinispan&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/authentication&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/hotrod-connector&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;rest-connector&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;rest&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;authentication&lt;/span&gt; &lt;span class="attribute-name"&gt;mechanisms&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;DIGEST&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/rest-connector&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/endpoints&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In Infinispan 11.0, the mechanisms are automatically selected based on the capabilities of the security realm. Using the following configuration:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;endpoints&lt;/span&gt; &lt;span class="attribute-name"&gt;socket-binding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;security-realm&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;hotrod-connector&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;hotrod&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;rest-connector&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;rest&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/endpoints&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;together with a properties security realm, will enable DIGEST for HTTP and SCRAM-*, DIGEST-* and CRAM-MD5 for Hot Rod. BASIC/PLAIN will only be implicitly enabled when the security realm has a TLS/SSL identity.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The following tables summarize the mapping between realm type and implicitly enabled mechanisms.&lt;/p&gt; &lt;/div&gt; &lt;table class="tableblock frame-all grid-all stretch table"&gt; &lt;caption class="title"&gt;Table 1. SASL Authentication Mechanisms (Hot Rod)&lt;/caption&gt; &lt;colgroup&gt; &lt;col style="width: 50%;"&gt; &lt;col style="width: 50%;"&gt; &lt;/col&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class="tableblock halign-left valign-top"&gt;Security Realm&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;SASL Authentication Mechanism&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Property Realms and LDAP Realms&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;SCRAM-*, DIGEST-*, CRAM-MD5&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Token Realms&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;OAUTHBEARER&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Trust Realms&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;EXTERNAL&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Kerberos Identities&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;GSSAPI, GS2-KRB5&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;SSL/TLS Identities&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;PLAIN&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/col&gt; &lt;table class="tableblock frame-all grid-all stretch table"&gt; &lt;caption class="title"&gt;Table 2. HTTP Authentication Mechanisms (REST)&lt;/caption&gt; &lt;colgroup&gt; &lt;col style="width: 50%;"&gt; &lt;col style="width: 50%;"&gt; &lt;/col&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class="tableblock halign-left valign-top"&gt;Security Realm&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;HTTP Authentication Mechanism&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Property Realms and LDAP Realms&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;DIGEST&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Token Realms&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;BEARER_TOKEN&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Trust Realms&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;CLIENT_CERT&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;Kerberos Identities&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;SPNEGO&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;SSL/TLS Identities&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;BASIC&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/col&gt; &lt;/colgroup&gt; &lt;/table&gt; &lt;div class="sect1"&gt; &lt;h2 id="_automatic_encryption"&gt;&lt;a class="anchor" href="#_automatic_encryption" /&gt;Automatic encryption&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If the security realm has a TLS/SSL identity, the endpoint will automatically enable TLS for all protocols.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_encrypted_properties_security_realm"&gt;&lt;a class="anchor" href="#_encrypted_properties_security_realm" /&gt;Encrypted properties security realm&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The properties realm that is part of the default configuration has been greatly improved in Infinispan 11. The passwords are now stored in multiple encrypted formats in order to support the various DIGEST, SCRAM and PLAIN/BASIC mechanisms.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;code&gt;user&lt;/code&gt; functionality that is now built into the CLI allows easy creation and manipulation of users, passwords and groups:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code&gt;[disconnected]&amp;gt; user create --password=secret --groups=admin admin [disconnected]&amp;gt; connect --username=admin --password=secret [ispn-29934@cluster//containers/default]&amp;gt; user ls [ "admin" ] [ispn-29934@cluster//containers/default]&amp;gt; user describe admin { username: "admin", realm: "default", groups = [admin] } [ispn-29934@cluster//containers/default]&amp;gt; user password admin Set a password for the user: ****** Confirm the password for the user: ****** [ispn-29934@cluster//containers/default]&amp;gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_authorization_simplified"&gt;&lt;a class="anchor" href="#_authorization_simplified" /&gt;Authorization: simplified&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Authorization is another security aspect of Infinispan. In previous versions, setting up authorization was complicated by the need to add all the needed roles to each cache:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;infinispan&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;cache-container&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;authorization&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;identity-role-mapper&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;role&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;AdminRole&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;permissions&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;ALL&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;role&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;ReaderRole&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;permissions&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;READ&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;role&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;WriterRole&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;permissions&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;WRITE&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;role&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;SupervisorRole&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;permissions&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;READ WRITE EXEC BULK_READ&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/authorization&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;distributed-cache&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;secured&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;authorization&lt;/span&gt; &lt;span class="attribute-name"&gt;roles&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;AdminRole ReaderRole WriterRole SupervisorRole&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/distributed-cache&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/cache-container&amp;gt;&lt;/span&gt; ... &lt;span class="tag"&gt;&amp;lt;/infinispan&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With Infinispan 11 you can avoid specifying all the roles at the cache level: just enable authorization and all roles will implicitly apply. As you can see, the cache definition is much more concise:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;infinispan&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;cache-container&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; ... &lt;span class="tag"&gt;&amp;lt;distributed-cache&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;secured&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;authorization&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/distributed-cache&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/cache-container&amp;gt;&lt;/span&gt; ... &lt;span class="tag"&gt;&amp;lt;/infinispan&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;h1 id="_conclusions" class="sect0"&gt;&lt;a class="anchor" href="#_conclusions" /&gt;Conclusions&lt;/h1&gt; &lt;div class="openblock partintro"&gt; &lt;div class="content"&gt; We hope that the changes we’ve made to improve security will make your servers more secure and easier to configure. For more information read the &lt;a href="https://infinispan.org/docs/dev/titles/server/server.html#security"&gt;server security documentation&lt;/a&gt;. &lt;/div&gt; &lt;/div&gt;&lt;/colgroup&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/T5ZFyn8TflQ" height="1" width="1" alt=""/&gt;</content><summary>The Infinispan server we introduced in 10.0 exposes a single port through which both Hot Rod and HTTP clients can connect. While Infinispan has had very extensive security support since 7.0, the out-of-the-box default configuration did not enable authentication. Infinispan 11.0’s server’s default configuration, instead, requires authentication. We have made several improvements to how authenticati...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-06-04T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/06/04/server-secure-by-default/</feedburner:origLink></entry><entry><title>Tech Talk tomorrow (friday) - What's new with Apache Camel 3?</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XfnroujVwqg/tech-talk-tomorrow-friday-whats-new.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="Presentation" scheme="searchisko:content:tags" /><category term="webinar" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-tech_talk_tomorrow_friday_what_s_new_with_apache_camel_3</id><updated>2020-06-04T08:16:45Z</updated><published>2020-06-04T08:16:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;This blog is with short noice. Tomorrow on Friday June 5th there will be a DevNation Tech Talk with Andrea Cosentino and myself presenting Apache Camel 3.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://developers.redhat.com/devnation/tech-talks/apache-camel-3/?sc_cid=7013a000002DYICAA4"&gt;&lt;img border="0" data-original-height="104" data-original-width="430" height="77" src="https://1.bp.blogspot.com/-6mEuwyCEBr0/XtitPb63e6I/AAAAAAAACLQ/umIMX9AWZ68VMXm4390lR51-CjkiUruIwCLcBGAsYHQ/s320/devnation-tech-talks-FINAL_1.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Date: June 5, 2020&lt;br /&gt;Time: 13:00 UTC / 15:00 CET / 9:00 AM EDT&lt;br /&gt;&lt;br /&gt;&lt;a href="https://camel.apache.org/"&gt;Apache Camel&lt;/a&gt; is a leading open source integration framework that has been around for more than a decade.&lt;br /&gt;&lt;br /&gt;With the release of Apache Camel 3, the Camel family has been extended to include a full range of projects that are tailored to popular platforms including Spring Boot, Quarkus, Kafka, Kubernetes, and others; creating an ecosystem.&lt;br /&gt;&lt;br /&gt;Join this webinar to learn what’s new in Camel 3 and about Camel projects:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Latest features in Camel 3&lt;/li&gt;&lt;li&gt;Quick demos of Camel 3, Camel Quarkus, Camel K, and Camel Kafka Connector&lt;/li&gt;&lt;li&gt;Present insights into what's coming next&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;a href="https://developers.redhat.com/devnation/tech-talks/apache-camel-3/?sc_cid=7013a000002DYICAA4"&gt;Registration required at following link&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=pnUCQRjVaM8:bNk8eEaQl2c:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=pnUCQRjVaM8:bNk8eEaQl2c:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=pnUCQRjVaM8:bNk8eEaQl2c:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=pnUCQRjVaM8:bNk8eEaQl2c:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=pnUCQRjVaM8:bNk8eEaQl2c:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=pnUCQRjVaM8:bNk8eEaQl2c:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=pnUCQRjVaM8:bNk8eEaQl2c:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/pnUCQRjVaM8" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XfnroujVwqg" height="1" width="1" alt=""/&gt;</content><summary>This blog is with short noice. Tomorrow on Friday June 5th there will be a DevNation Tech Talk with Andrea Cosentino and myself presenting Apache Camel 3. Date: June 5, 2020 Time: 13:00 UTC / 15:00 CET / 9:00 AM EDT Apache Camel is a leading open source integration framework that has been around for more than a decade. With the release of Apache Camel 3, the Camel family has been extended to inclu...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-06-04T08:16:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/pnUCQRjVaM8/tech-talk-tomorrow-friday-whats-new.html</feedburner:origLink></entry><entry><title>The road to Quarkus GA: Completing the first supported Kubernetes-native Java stack</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fno2a0bU4gs/" /><category term="Java" /><category term="Kubernetes" /><category term="Modern App Dev" /><category term="Quarkus" /><category term="MicroProfile" /><category term="OpenJDK" /><category term="Red Hat Runtimes" /><category term="RHEL" /><author><name>Mark Little</name></author><id>https://developers.redhat.com/blog/?p=727437</id><updated>2020-06-04T07:00:28Z</updated><published>2020-06-04T07:00:28Z</published><content type="html">&lt;p&gt;I’ve had many proud moments in my role here at Red Hat over the years. Examples include when we released the first version of WildFly, when we acquired the Camel team, when we worked with other vendors to create Eclipse MicroProfile, the great work the Strimzi team did to get into the Cloud Native Computing Foundation, our entire Red Hat Managed Integration effort, &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/kogito"&gt;Kogito&lt;/a&gt;, and the list goes on. I feel like I add to this list of examples on an almost weekly basis.&lt;/p&gt; &lt;p&gt;Well, I can now update this list with the first product release of Quarkus, formally called the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/quarkus"&gt;Red Hat build of Quarkus&lt;/a&gt;. (You can also find more support options on the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/support/"&gt;Quarkus project site&lt;/a&gt;.) It should come as no surprise that Quarkus is on this list. I suppose what might surprise some people is that Quarkus is only just a product now. Given all of the activities since we officially &lt;a target="_blank" rel="nofollow" href="https://developer.jboss.org/blogs/mark.little/2019/03/07/quarkus-is-here"&gt;launched the Quarkus project&lt;/a&gt; in 2019, you could be forgiven for thinking it was already a product. &lt;span id="more-727437"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Production users got us there&lt;/h2&gt; &lt;p&gt;We’ve heard from a number of users who put it into &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/tag/user-story/"&gt;production&lt;/a&gt;, including &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/vodafone-greece-replaces-spring-boot/"&gt;Vodafone Greece&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/talkdesk-chooses-quarkus-for-fast-innovation/"&gt;Talkdesk&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/aviatar-experiences-significant-savings/"&gt;Lufthansa Technik&lt;/a&gt;. There are some great quotes from these companies, too:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Thorsten Pohl&lt;b&gt;, &lt;/b&gt;Lufthansa Technik AVIATAR Product Owner Automation &amp;#38; Platform Architect: “We could run 3 times denser deployments without sacrificing availability and response times of service”.&lt;/li&gt; &lt;li&gt;Roberto Cortez&lt;b&gt;, &lt;/b&gt;Talkdesk Principal Architect: “When you adopt Quarkus, you will be productive from day one since you don’t really need to learn new technologies.”&lt;/li&gt; &lt;li&gt;Christos Sotiriou&lt;b&gt;, &lt;/b&gt;DXL technical lead at Vodafone Greece: “Quarkus seemed to provide the performance boost we needed while at the same time having a good backer (Red Hat) and relying on battle-tested technologies.”&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;The community got us there&lt;/h2&gt; &lt;p&gt;Having even one great reference at this stage in the life of any open source project would be a great endorsement for the work of the project developers and their community, so to have this many for Quarkus is phenomenal. When you combine this with the amount of &lt;a target="_blank" rel="nofollow" href="https://www.adam-bien.com/roller/abien/entry/supersonic_subatomic_java_ee_skimmedjars"&gt;community interest&lt;/a&gt;, much of it reflected on social media platforms such as Twitter, then I think it’s fair to say that we tapped into something that no other open source project had.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-727957 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Adam-Bien-Quarkus-1.4-final-tweet-1024x597.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Adam-Bien-Quarkus-1.4-final-tweet-1024x597.png" alt="@AdamBien Twitter post for Quarkus 1.4 Final" width="640" height="373" data-wp-editing="1" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Adam-Bien-Quarkus-1.4-final-tweet-1024x597.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Adam-Bien-Quarkus-1.4-final-tweet-300x175.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Adam-Bien-Quarkus-1.4-final-tweet-768x448.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Adam-Bien-Quarkus-1.4-final-tweet.png 1422w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-727967 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Antonio-Goncalves-twitter-post.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Antonio-Goncalves-twitter-post.png" alt="@agoncal Quarkus Twitter post" width="640" height="508" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Antonio-Goncalves-twitter-post.png 955w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Antonio-Goncalves-twitter-post-300x238.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Antonio-Goncalves-twitter-post-768x610.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;Oh and let’s not forget about the awards Quarkus has won already, including The &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/quarkus-wins-devies-award/"&gt;DEVIES&lt;/a&gt;.&lt;a target="_blank" rel="nofollow" href="https://twitter.com/QuarkusIO/status/1228360912853241857"&gt;&lt;img class=" aligncenter wp-image-727977 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/06/QuarkusIO-tweet-980x1024.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/QuarkusIO-tweet-980x1024.png" alt="" width="640" height="669" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/QuarkusIO-tweet-980x1024.png 980w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/QuarkusIO-tweet-287x300.png 287w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/QuarkusIO-tweet-768x802.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/QuarkusIO-tweet.png 1167w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Many of us, myself included, have spoken at length about what makes Quarkus different from anything else out there, so I’ll try not to repeat too much. Instead, I will jump immediately to the elephant in the room and say that what makes Quarkus special is not the fact that we compile Java. Yes, that can help to reduce execution footprint and maybe startup time, but it’s no silver bullet as we’ve found out ourselves over the years when trying compilation techniques such as GNU Compiler for Java (GCJ) and Avian. As has been described many times before and yet often gets missed, the team re-architected many of our popular projects so they worked well in Kubernetes environments—even with stock OpenJDK. That is the critical piece of the puzzle which, when coupled with compiled Java such as through GraalVM, puts Quarkus at the center of a true Kubernetes-native stack.&lt;/p&gt; &lt;p&gt;Through the hard work of the community, we’ve seen Quarkus used in serverless environments too, due to its ability to let applications start up and be ready to handle a request within milliseconds. Specifically, Quarkus now has support for &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/azure-functions-http"&gt;Azure Functions&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/amazon-lambda"&gt;Amazon Lambda&lt;/a&gt;, with more integrations to come. Yes, there’s even &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/getting-started-knative"&gt;Quarkus work around Knative&lt;/a&gt;. And it’s great to see other efforts, &lt;a target="_blank" rel="nofollow" href="https://github.com/apache/camel-k"&gt;such as Camel K&lt;/a&gt;, coming soon in products, which will enable much of the huge Camel eco-system to be used in a serverless environment.&lt;/p&gt; &lt;h2&gt;Quarkus GA in Red Hat Runtimes&lt;/h2&gt; &lt;p&gt;I could go on and on about the great community involvement we’ve seen around Quarkus, the other projects and products leveraging Quarkus already such as Kogito, the benefits of now being able to run a higher density of Java applications in the cloud as well as leveraging existing Java skills, and many, many other things everyone is doing. However, this article is really meant to highlight the fact that &lt;a href="https://developers.redhat.com/products/quarkus/overview"&gt;Quarkus is now available&lt;/a&gt; as a supported product from Red Hat with all that this entails. Quarkus is also now part of &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/products/runtimes"&gt;Red Hat Runtimes&lt;/a&gt;, which for &lt;a target="_blank" rel="nofollow" href="https://developer.ibm.com/technologies/java/articles/deploy-reactive-quarkus-microservices-on-ibm-cloud-kubernetes-service/"&gt;IBM customers&lt;/a&gt; is also available in IBM’s CloudPaks For Applications (CP4A). As I will discuss later, we have ensured that Quarkus works well on OpenJDK, but if you’re running on IBM’s zSeries then OpenJ9 is your JVM of choice and Quarkus works equally well there too.&lt;/p&gt; &lt;p&gt;The Quarkus team and community move at a blistering pace, so it’s often hard to keep up with the top new things out there. However, here are a few to consider in the Quarkus GA:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;From the start of Quarkus, we’ve always ensured that reactive programming is at the heart rather than trying to retrofit it, which rarely works well. Fortunately for us, we’ve also been involved in the leading Java framework for reactive programming, &lt;a target="_blank" rel="nofollow" href="https://vertx.io"&gt;Eclipse Vert.x&lt;/a&gt;, for many years, and the two teams built Vert.x into Quarkus. However, recently, the two teams also collaborated on the &lt;a target="_blank" rel="nofollow" href="https://smallrye.io/smallrye-mutiny/"&gt;SmallRye Mutiny project&lt;/a&gt;, which builds on the lessons learned from Vert.x and layers on top of it to simplify various concepts.&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://microprofile.io"&gt;Eclipse MicroProfile&lt;/a&gt; is a key effort for Red Hat as a whole, with us having been at the forefront of that effort since it was created. The latest and greatest version, 3.3, and associated specifications are part of this first Quarkus product.&lt;/li&gt; &lt;li&gt;There are many Spring developers who are keen to embrace Quarkus and we’ve been working with many of them for a while, including &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/vodafone-greece-replaces-spring-boot/"&gt;Vodafone Greece&lt;/a&gt;, as mentioned earlier. In fact, we’ve put a lot of effort into trying to ensure that those developers can &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/quarkus-for-spring-developers/"&gt;leverage their skills and applications with Quarkus&lt;/a&gt;, and in this release, we’ve added to that by including the ability for Quarkus applications to &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/spring-cloud-config-client"&gt;read configuration properties at runtime from the Spring Cloud Config Server&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Red Hat has a rich history around messaging implementations, including HornetQ and ActiveMQ. One of the key standards we’ve been involved with since it started is &lt;a target="_blank" rel="nofollow" href="https://www.oasis-open.org/committees/amqp/"&gt;OASIS AMQP&lt;/a&gt;, and there are a number of implementations of the standard out there, including &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_mrg/3/html/messaging_programming_reference/amqp___advanced_message_queuing_protocol"&gt;one of our own&lt;/a&gt;. An important project within the AMQP community is &lt;a target="_blank" rel="nofollow" href="https://qpid.apache.org"&gt;Apache Qpid&lt;/a&gt;, and in the Quarkus product release, we’ve included &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/jms#qpid-jms-amqp"&gt;support for the Qpid JMS adapter&lt;/a&gt; so your microservices can communicate using the standard.&lt;/li&gt; &lt;li&gt;Anything to do with transactions, such as &lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/microprofile-lra"&gt;LRA from MicroProfile,&lt;/a&gt; and the &lt;a target="_blank" rel="nofollow" href="https://narayana.io"&gt;Narayana&lt;/a&gt; project, which has been driving it.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So I hope that’s enough at the moment to illustrate how important the Quarkus product release has been. I want to conclude by once again congratulating the entire Quarkus product team and community. Whether you’ve been working on core Quarkus capabilities, submitting feature requests, or writing blogs about your experiences in using it, you’ve helped get the world’s first Kube-native Java stack from project to product. Take a well-earned bow!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fthe-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack%2F&amp;#38;linkname=The%20road%20to%20Quarkus%20GA%3A%20Completing%20the%20first%20supported%20Kubernetes-native%20Java%20stack" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fthe-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack%2F&amp;#38;linkname=The%20road%20to%20Quarkus%20GA%3A%20Completing%20the%20first%20supported%20Kubernetes-native%20Java%20stack" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fthe-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack%2F&amp;#38;linkname=The%20road%20to%20Quarkus%20GA%3A%20Completing%20the%20first%20supported%20Kubernetes-native%20Java%20stack" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fthe-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack%2F&amp;#38;linkname=The%20road%20to%20Quarkus%20GA%3A%20Completing%20the%20first%20supported%20Kubernetes-native%20Java%20stack" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fthe-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack%2F&amp;#38;linkname=The%20road%20to%20Quarkus%20GA%3A%20Completing%20the%20first%20supported%20Kubernetes-native%20Java%20stack" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fthe-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack%2F&amp;#38;linkname=The%20road%20to%20Quarkus%20GA%3A%20Completing%20the%20first%20supported%20Kubernetes-native%20Java%20stack" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fthe-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack%2F&amp;#38;linkname=The%20road%20to%20Quarkus%20GA%3A%20Completing%20the%20first%20supported%20Kubernetes-native%20Java%20stack" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fthe-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack%2F&amp;#038;title=The%20road%20to%20Quarkus%20GA%3A%20Completing%20the%20first%20supported%20Kubernetes-native%20Java%20stack" data-a2a-url="https://developers.redhat.com/blog/2020/06/04/the-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack/" data-a2a-title="The road to Quarkus GA: Completing the first supported Kubernetes-native Java stack"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/04/the-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack/"&gt;The road to Quarkus GA: Completing the first supported Kubernetes-native Java stack&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fno2a0bU4gs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I’ve had many proud moments in my role here at Red Hat over the years. Examples include when we released the first version of WildFly, when we acquired the Camel team, when we worked with other vendors to create Eclipse MicroProfile, the great work the Strimzi team did to get into the Cloud Native Computing [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/04/the-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack/"&gt;The road to Quarkus GA: Completing the first supported Kubernetes-native Java stack&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">727437</post-id><dc:creator>Mark Little</dc:creator><dc:date>2020-06-04T07:00:28Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/04/the-road-to-quarkus-ga-completing-the-first-supported-kubernetes-native-java-stack/</feedburner:origLink></entry><entry><title>An easier way to create custom Jenkins containers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/-yC0MvbyheY/" /><category term="CI/CD" /><category term="Containers" /><category term="Java" /><category term="Kubernetes" /><category term="jenkins pipelines" /><category term="Jenkinsfile" /><category term="JNLP" /><category term="openshift" /><category term="OpenShift Container Platform" /><author><name>Jay Flowers</name></author><id>https://developers.redhat.com/blog/?p=718047</id><updated>2020-06-04T07:00:11Z</updated><published>2020-06-04T07:00:11Z</published><content type="html">&lt;p&gt;In many organizations, it is a struggle for developers to get custom Jenkins container images created. Fortunately, in engineering, there is often more than one way to get the job done. In this article, I show you how to create your own custom Jenkins container image by aggregating readily available containers in a pod template.&lt;/p&gt; &lt;p&gt;Note that I&amp;#8217;m using &lt;a href="https://github.com/jenkinsci/kubernetes-plugin/releases/tag/kubernetes-1.18.2"&gt;Kubernetes Plugin for Jenkins version 1.18.2&lt;/a&gt; for my example application, which is running in &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;. If you are using a different version, use its documentation.&lt;/p&gt; &lt;h2&gt;Configuring the Jenkinsfile&lt;/h2&gt; &lt;p&gt;As you would expect of any best practice with Jenkins, we&amp;#8217;ll start with a Jenkinsfile. Ideally, you should locate this file in the root of your Git repository. For my example, I use a declarative pipeline. See the Jenkins documentation if you prefer using a scripted pipeline.&lt;/p&gt; &lt;p&gt;The example is a simple &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; project. We will need just two containers: One for the Java Network Launch Protocol (JNLP) agent and one for the Java tooling. The URL for the JNLP agent image on the Red Hat Registry is &lt;code&gt;registry.redhat.io/openshift4/ose-jenkins-agent-base&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For the Java tooling image, we have a few options:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Use a source-to-image (S2I) image for &lt;a href="https://developers.redhat.com/rhel8/"&gt;Red Hat Enterprise Linux 8 (RHEL 8) with OpenJDK 11&lt;/a&gt;, found at &lt;code&gt;registry.redhat.io/openjdk/openjdk-11-rhel8&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Use a &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;CodeReady Workspaces (CRW)&lt;/a&gt; image, found at &lt;code&gt;registry.redhat.io/codeready-workspaces/stacks-java-rhel8&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Choose to use a Universal Base Image (UBI) or community image that your organization has already adopted.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I will use the CodeReady Workspaces (CRW) image, which ensures I get the same results in my CRW IDE as on the Jenkins pipeline. Figure 1 shows the Jenkinsfile so far.&lt;/p&gt; &lt;div id="attachment_718837" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-8.56.21-AM.png"&gt;&lt;img aria-describedby="caption-attachment-718837" class="wp-image-718837" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-8.56.21-AM.png" alt="A screenshot of the Jenkinsfile in the console." width="640" height="565" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-8.56.21-AM.png 823w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-8.56.21-AM-300x265.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-8.56.21-AM-768x678.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-718837" class="wp-caption-text"&gt;Figure 1. The Jenkinsfile with two containers.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Note that every Jenkins agent pod must have a container named &lt;code&gt;jnlp&lt;/code&gt;. If you don&amp;#8217;t provide this container, &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; Plugin for Jenkins is hardcoded to add one (&lt;a target="_blank" rel="nofollow" href="https://github.com/jenkinsci/kubernetes-plugin/blob/61d04d714551361ab5f1c1e7f71dd59e0a27aa2d/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodTemplateBuilder.java#L98"&gt;here is an example of that behavior&lt;/a&gt;). Unfortunately, the hardcoded image is not compatible with the &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift Container Platform (OCP)&lt;/a&gt; Jenkins image. A future release of OCP Jenkins will provide a default JNLP container via a default pod template.&lt;/p&gt; &lt;p&gt;You might also notice the &lt;code&gt;imagePullSecrets&lt;/code&gt; configuration in Figure 1. I included that because I am pulling the images directly from &lt;code&gt;registry.redhat.io&lt;/code&gt;, and the registry requires authentication. You also don&amp;#8217;t have to use OpenShift secrets; you can explore &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/containers/?tab=images#/registry.access.redhat.com/openshift4/ose-jenkins"&gt;a variety of options&lt;/a&gt; to see what works best for you.&lt;/p&gt; &lt;h2&gt;Build the basic application&lt;/h2&gt; &lt;p&gt;The Jenkinsfile produces a pod with two containers, as specified. The two containers share a working directory and a volume mount that defaults to &lt;code&gt;/home/jenkins/agent&lt;/code&gt;. The &lt;code&gt;jnlp&lt;/code&gt; container takes care of the declarative checkout source code management (SCM) action. Unless otherwise specified, all other actions are executed in the Jenkins pipeline workspace. Figure 2 shows more of the Jenkinsfile, where we now begin to build the Java application.&lt;/p&gt; &lt;div id="attachment_718867" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.04.26-AM.png"&gt;&lt;img aria-describedby="caption-attachment-718867" class="wp-image-718867" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.04.26-AM.png" alt="A screenshot of the Jenkinsfile in the console." width="640" height="624" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.04.26-AM.png 664w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.04.26-AM-300x292.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-718867" class="wp-caption-text"&gt;Figure 2. Building the Java application.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Notice how I use the closure &lt;code&gt;container&lt;/code&gt; to specify the &lt;code&gt;java&lt;/code&gt; container, which is the YAML configuration from the pod template. The &lt;code&gt;jnlp&lt;/code&gt; container is the default execution container. I won&amp;#8217;t show much more of the example application in this article, but you can &lt;a target="_blank" rel="nofollow" href="https://github.com/jflowers/spring-petclinic/blob/blog-jenkins-agents-through-aggregation/Jenkinsfile"&gt;find the complete version here&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Add all of the containers you need&lt;/h2&gt; &lt;p&gt;After adding the &lt;code&gt;jnlp&lt;/code&gt; container, you can add as many containers as you like to your pod template. Does your application need to execute Ruby? Try adding the configuration shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_718897" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.13.01-AM.png"&gt;&lt;img aria-describedby="caption-attachment-718897" class="wp-image-718897" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.13.01-AM.png" alt="A screenshot of the configuration to add a Ruby container." width="640" height="203" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.13.01-AM.png 819w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.13.01-AM-300x95.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.13.01-AM-768x244.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-718897" class="wp-caption-text"&gt;Figure 3. Adding a Ruby container to the configuration.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once you&amp;#8217;ve added a container, you can use it by entering a command like the one shown in Figure 4. Notice that the container names must match between the pod template and the closure.&lt;/p&gt; &lt;div id="attachment_718907" style="width: 409px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.14.18-AM.png"&gt;&lt;img aria-describedby="caption-attachment-718907" class="wp-image-718907 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.14.18-AM.png" alt="A screenshot of the 'Ruby Build' command." width="399" height="259" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.14.18-AM.png 399w, https://developers.redhat.com/blog/wp-content/uploads/2020/05/Screen-Shot-2020-05-07-at-9.14.18-AM-300x195.png 300w" sizes="(max-width: 399px) 100vw, 399px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-718907" class="wp-caption-text"&gt;Figure 4. Execute the Ruby build.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you are using &lt;a href="https://developers.redhat.com/blog/2019/12/03/red-hat-codeready-workspaces-2-new-tools-to-speed-kubernetes-development/"&gt;CodeReady Workspaces&lt;/a&gt;, then you should use the same images in your &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/docs/che-7/making-a-workspace-portable-using-a-devfile/"&gt;devfile.yaml&lt;/a&gt;&lt;/code&gt; and your &lt;a target="_blank" rel="nofollow" href="https://github.com/jenkinsci/kubernetes-plugin/blob/kubernetes-1.18.2/README.md"&gt;Jenkinsfile&lt;/a&gt;. Using the same image in both of these files ensures that you always get the same results in your workspace, which becomes more critical once you get into your pipeline.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, I&amp;#8217;ve quickly shown you how to aggregate readily available containers into a pod template. This is an efficient way to publish a custom Jenkins container without having to worry about organizational barriers—instead, you can get back to delivering your application. As a developer, I hope this approach makes your life easier.&lt;/p&gt; &lt;p&gt;If you want to learn more from the example application I used in this article, you can study the &lt;a target="_blank" rel="nofollow" href="https://github.com/jflowers/spring-petclinic/blob/blog-jenkins-agents-through-aggregation/Jenkinsfile"&gt;complete application code&lt;/a&gt;, which includes a &lt;code&gt;devfile&lt;/code&gt;, as well as the Jenkinsfile that we developed together. For even more about developing Jenkins pipelines on OCP, see my video.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/6Ka9Ag1Lz-s?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fan-easier-way-to-create-custom-jenkins-containers%2F&amp;#38;linkname=An%20easier%20way%20to%20create%20custom%20Jenkins%20containers" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fan-easier-way-to-create-custom-jenkins-containers%2F&amp;#38;linkname=An%20easier%20way%20to%20create%20custom%20Jenkins%20containers" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fan-easier-way-to-create-custom-jenkins-containers%2F&amp;#38;linkname=An%20easier%20way%20to%20create%20custom%20Jenkins%20containers" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fan-easier-way-to-create-custom-jenkins-containers%2F&amp;#38;linkname=An%20easier%20way%20to%20create%20custom%20Jenkins%20containers" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fan-easier-way-to-create-custom-jenkins-containers%2F&amp;#38;linkname=An%20easier%20way%20to%20create%20custom%20Jenkins%20containers" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fan-easier-way-to-create-custom-jenkins-containers%2F&amp;#38;linkname=An%20easier%20way%20to%20create%20custom%20Jenkins%20containers" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fan-easier-way-to-create-custom-jenkins-containers%2F&amp;#38;linkname=An%20easier%20way%20to%20create%20custom%20Jenkins%20containers" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F04%2Fan-easier-way-to-create-custom-jenkins-containers%2F&amp;#038;title=An%20easier%20way%20to%20create%20custom%20Jenkins%20containers" data-a2a-url="https://developers.redhat.com/blog/2020/06/04/an-easier-way-to-create-custom-jenkins-containers/" data-a2a-title="An easier way to create custom Jenkins containers"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/04/an-easier-way-to-create-custom-jenkins-containers/"&gt;An easier way to create custom Jenkins containers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/-yC0MvbyheY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In many organizations, it is a struggle for developers to get custom Jenkins container images created. Fortunately, in engineering, there is often more than one way to get the job done. In this article, I show you how to create your own custom Jenkins container image by aggregating readily available containers in a pod template. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/04/an-easier-way-to-create-custom-jenkins-containers/"&gt;An easier way to create custom Jenkins containers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">718047</post-id><dc:creator>Jay Flowers</dc:creator><dc:date>2020-06-04T07:00:11Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/04/an-easier-way-to-create-custom-jenkins-containers/</feedburner:origLink></entry><entry><title>The joys and perils of aliasing in C and C++, Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JbEoSdUb1R4/" /><category term="C" /><category term="C++" /><category term="Linux" /><category term="Performance" /><category term="Programming Languages" /><category term="c pointer" /><category term="gcc" /><category term="lvalue" /><category term="unsigned char" /><author><name>Martin Sebor</name></author><id>https://developers.redhat.com/blog/?p=722377</id><updated>2020-06-03T07:00:06Z</updated><published>2020-06-03T07:00:06Z</published><content type="html">&lt;p&gt;In the previous article, I discussed the benefits of C and C++ language restrictions in optimized code. In this second half, I present a variety of programming language exemptions and compiler extensions that developers can use to get around aliasing restrictions more or less safely. I will also discuss the common pitfalls of aliasing, both resulting from the extensions as well as from misuses of standard language constructs, and illustrate common problems these pitfalls might cause.&lt;/p&gt; &lt;p&gt;&lt;span id="more-722377"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2 id="exemptions-from-aliasing"&gt;Exceptions to the rules&lt;/h2&gt; &lt;p&gt;The restrictions imposed by the aliasing rules I introduced in Part 1 might seem relatively lenient, but many use cases would be impossible without exceptions to them, especially in system-level code. The C and C++ languages only codify two of these exemptions; the remaining ones are implementation-defined extensions found in popular compilers. Because the expressiveness and power of the implementation-defined extensions tend to be prioritized over safety and the ability to detect mistakes, their use is often fraught with peril—at least as much as, if not more than, using the standard mechanisms. In this section, I will introduce both programming language exemptions and compiler extensions. I will explain how these exceptions to the rules of aliasing are commonly misused and the consequences of abusing them.&lt;/p&gt; &lt;h3 id="aliasing-by-character-types"&gt;Aliasing by character types&lt;/h3&gt; &lt;p&gt;Both C and C++ provide an exemption to the type-aliasing requirement introduced in Part 1. This exemption allows you to copy objects by calls to functions like &lt;code&gt;memcpy&lt;/code&gt; and &lt;code&gt;memmove&lt;/code&gt;, or their user-defined equivalents. This exemption says that, in addition to its own type, an object of any type may have its value accessed by an lvalue of &lt;code&gt;unsigned char&lt;/code&gt; or any other narrow character type, although the exemption is best limited to &lt;code&gt;unsigned char&lt;/code&gt;. (In recent C++ the special library type &lt;code&gt;std::byte&lt;/code&gt; can also be used.)&lt;/p&gt; &lt;p&gt;We can use an lvalue of &lt;code&gt;unsigned char&lt;/code&gt; to prevent the optimization you saw in Part 1: &lt;em&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/Cmg5a3"&gt;Accesses via pointers to incompatible types&lt;/a&gt;&lt;/em&gt;. Consider the modified version here (also see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/u4i__j"&gt;Access by character type&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; int f (int *a, long *b) { int t = *&lt;span style="color: #ff0000"&gt;a&lt;/span&gt;; for (int i = 0; i != sizeof *b; ++i) ((unsigned char*)&lt;span style="color: #339966"&gt;b&lt;/span&gt;)[i] = 0; return *&lt;span style="color: #ff0000"&gt;a&lt;/span&gt; - t; // must not be folded }&lt;/pre&gt; &lt;p&gt;In this case, the compiler cannot fold the &lt;code&gt;return&lt;/code&gt; expression because the function would be valid if called with &lt;code&gt;b&lt;/code&gt; equal to &lt;code&gt;a&lt;/code&gt;. However, using &lt;code&gt;restrict&lt;/code&gt;when declaring the &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; pointers would make calling &lt;code&gt;f&lt;/code&gt; with overlapping objects invalid. Doing that would re-enable the optimization opportunity.&lt;/p&gt; &lt;p&gt;This exemption keeps compilers from making assumptions about functions accessing objects via pointers to incompatible types. It does so even in a context where it&amp;#8217;s safe to assume pointers point to distinct objects, such as when pointers point to distinct types. For example, consider that we might also use the &lt;code&gt;for&lt;/code&gt; loop in this example in another function. A compiler would have to avoid folding the &lt;code&gt;return&lt;/code&gt; expression if &lt;code&gt;f&lt;/code&gt; were to call this other function, even if &lt;code&gt;*b&lt;/code&gt; were also read in &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The permission for &lt;code&gt;unsigned char&lt;/code&gt; to access objects of other types doesn&amp;#8217;t lift the constraint imposed by the &lt;code&gt;restrict&lt;/code&gt; keyword, however. Using the &lt;code&gt;restrict&lt;/code&gt; keyword with the pointer &lt;code&gt;a&lt;/code&gt; implies that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; either do not overlap or that if they do, &lt;code&gt;g(b)&lt;/code&gt; doesn&amp;#8217;t modify &lt;code&gt;*a&lt;/code&gt; via &lt;code&gt;*b&lt;/code&gt; or any other means.&lt;/p&gt; &lt;p&gt;The next example shows how at least one compiler leverages this restriction to fold the subtraction in the &lt;code&gt;return&lt;/code&gt; expression (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/mmo8uJ"&gt;Transitivity of restrict qualifier&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; void g (void *); int f (int * restrict a, void * b) { int t = *&lt;span style="color: #ff0000"&gt;a&lt;/span&gt;; g (b); // can be assumed not to modify *a return *&lt;span style="color: #ff0000"&gt;a&lt;/span&gt; - t; // can be folded to zero }&lt;/pre&gt; &lt;p&gt;This optimization is possible regardless of what type &lt;code&gt;b&lt;/code&gt; points to, or whether &lt;code&gt;b&lt;/code&gt; is declared with the &lt;code&gt;restrict&lt;/code&gt; keyword. Note, however, that for clarity, it&amp;#8217;s best to declare &lt;code&gt;restrict&lt;/code&gt; for all pointer arguments that you intend to be subject to this restriction.&lt;/p&gt; &lt;h3 id="common-initial-sequence"&gt;Common initial sequence&lt;/h3&gt; &lt;p&gt;As I mentioned earlier, the requirement to access every object by an lvalue of its type also rules out accessing a member of one &lt;code&gt;struct&lt;/code&gt; using a pointer to another &lt;code&gt;struct&lt;/code&gt;, even if both members have the same type. However, it turns out that this form of aliasing can be useful between members of the same union. To enable this use case, C and C++ offer the special exemption that when two &lt;code&gt;struct&lt;/code&gt;s are members of the same union, accessing their common initial sequence is valid. Programmers can use this special exception to modify the initial members of otherwise incompatible &lt;code&gt;struct&lt;/code&gt; types, as shown here (see&lt;i&gt; &lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/qo3izJ"&gt;Common initial sequence&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; struct A { int num, a[2]; }; struct B { int cnt, a[4]; }; union U { struct A a; struct B b; }; int f (struct A *a, struct B *b) { int t = &lt;span style="color: #ff0000"&gt;a-&amp;#62;num&lt;/span&gt;; ((union U*)b)-&amp;#62;&lt;span style="color: #339966"&gt;b.cnt&lt;/span&gt; = 0; // may change a-&amp;#62;num return &lt;span style="color: #ff0000"&gt;a-&amp;#62;num&lt;/span&gt; - t; // cannot be folded }&lt;/pre&gt; &lt;p&gt;In this case, it&amp;#8217;s valid to call &lt;code&gt;f&lt;/code&gt; with both arguments pointing to the same object. Conversely, what if a compiler was compiling a call to a function that took pointers to distinct &lt;code&gt;struct&lt;/code&gt;s as arguments? In that case, the compiler would have to assume that the call could modify the initial sequence of the &lt;code&gt;struct&lt;/code&gt; members.&lt;/p&gt; &lt;h4&gt;Implementation notes&lt;/h4&gt; &lt;p&gt;One thing to note is that the common initial sequence consists of members that have compatible types. For arrays, the compatible type includes their size. The sequence ends with the first occurrence of a pair of members whose types are not strictly compatible. The sequence in the example consists of just the two members &lt;code&gt;a-&amp;#62;num&lt;/code&gt; and &lt;code&gt;b-&amp;#62;cnt&lt;/code&gt;. It doesn&amp;#8217;t extend to the first two elements of the &lt;code&gt;a-&amp;#62;a&lt;/code&gt; and &lt;code&gt;b-&amp;#62;a&lt;/code&gt; arrays, however, although they have the same type. The reason is that the types of the arrays are not compatible—&lt;code&gt;int[2]&lt;/code&gt; is not compatible with &lt;code&gt;int[4]&lt;/code&gt;, or even with &lt;code&gt;int[]&lt;/code&gt;, for that matter.&lt;/p&gt; &lt;p&gt;Another thing to note is that the common initial sequence rule isn&amp;#8217;t consistently interpreted by all implementers. As a result, different compilers might disagree about how to handle access to initial members of a union. In the most conservative interpretation, the mere definition of a union type implies that any accesses to &lt;code&gt;struct&lt;/code&gt; objects that share a common initial sequence should be assumed to alias unless proven otherwise. On the other side, the most restrictive interpretation says that the access must involve a cast to the union type. The latter implementation, which is shown in the example, is the safest approach for portable code. The GNU Compiler Collection (GCC) uses this interpretation.&lt;/p&gt; &lt;h3 id="type-punning-via-unions"&gt;Type punning via a union&lt;/h3&gt; &lt;p&gt;The &lt;i&gt;common initial sequence&lt;/i&gt; exemption says that when two &lt;code&gt;struct&lt;/code&gt;s are members of the same union, accessing their common initial sequence is valid. As an extension of this rule, it is also acceptable to access an object of one type via an lvalue of another type, if both types are members of the same union. This kind of access—reading an object by an lvalue of a type other than that of its stored value—is called &lt;i&gt;type punning&lt;/i&gt;. It&amp;#8217;s permitted in standard C but disallowed in C++.&lt;/p&gt; &lt;p&gt;GCC supports type punning in both languages with a restrictive interpretation similar to what it offers for the common initial sequence. In this case, the access expression must involve the union type. See the &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Optimize-Options.html#Type-punning"&gt;comments about type punning in the GCC manual&lt;/a&gt;.&lt;/p&gt; &lt;h3 id="attribute-may_alias"&gt;Attribute &lt;code&gt;may_alias&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;By extending the exemption for &lt;code&gt;unsigned char&lt;/code&gt;, it is possible to use GCC&amp;#8217;s &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Common-Type-Attributes.html#Common-Type-Attributes#index-may_005falias-type-attribute"&gt;may_alias&lt;/a&gt;&lt;/code&gt; type attribute to define a type that is exempt from type-based aliasing restrictions. Like &lt;code&gt;unsigned char&lt;/code&gt;, we can use lvalues of a type declared with this attribute to access objects of any type (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/y5-GZr"&gt;Access via a &lt;code&gt;may_alias&lt;/code&gt; type&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; int f (int *a, long *b) { int t = *&lt;span style="color: #ff0000"&gt;a&lt;/span&gt;; typedef __attribute__ ((may_alias)) long AliasLong; *(AliasLong*)&lt;span style="color: #339966"&gt;b&lt;/span&gt; = 0; return *&lt;span style="color: #ff0000"&gt;a&lt;/span&gt; - t; }&lt;/pre&gt; &lt;p&gt;Used this way, &lt;code&gt;may_alias&lt;/code&gt; prevents the optimization found in the example of &lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/Cmg5a3"&gt;Accesses via pointers to incompatible types&lt;/a&gt;. The compiler can&amp;#8217;t fold the &lt;code&gt;return&lt;/code&gt; expression in this example because it&amp;#8217;s now valid for &lt;code&gt;b&lt;/code&gt; to point to the same object as &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt; &lt;h2 id="aliases-and-weak-symbols"&gt;Aliases and weak symbols&lt;/h2&gt; &lt;p&gt;To support low-level programs and libraries, GCC and compatible compilers provide several extensions that make it possible to define aliases for functions, as well as variables. Like &lt;code&gt;may_alias&lt;/code&gt;, you will see that these extensions typically take the form of attributes, or sometimes of pragmas.&lt;/p&gt; &lt;h3 id="attribute-alias"&gt;Attribute &lt;code&gt;alias&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;When applied to a declaration of a function or variable, the attribute &lt;code&gt;alias&lt;/code&gt; tells the compiler that the declared symbol provides an &lt;em&gt;alias&lt;/em&gt;, or alternate identity, for the symbol being named. The named symbol is known as the alias &lt;i&gt;target&lt;/i&gt;. The target must be defined in the same translation unit as the alias; the alias itself can only be declared, it cannot be defined. Typically, especially in libraries, the alias is declared as an ordinary symbol, without the attribute. This declaration is placed in a header, which a program can include. The target usually is not declared in a public header.&lt;/p&gt; &lt;p&gt;Aliases are most commonly used to provide an alternative name for a function, but they also work for variables. For instance, because in the example below &lt;code&gt;b&lt;/code&gt; is declared as an alias—or as another name for the array &lt;code&gt;a&lt;/code&gt;—the compiler can no longer fold the &lt;code&gt;return&lt;/code&gt; expression to zero (see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/aB4Akp"&gt;Attribute alias on a variable&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; int a[8]; extern __attribute__ ((alias ("a"))) int b[8]; int f (int i, int j) { int t = &lt;span style="color: #ff0000"&gt;a&lt;/span&gt;[i]; &lt;span style="color: #339966"&gt;b&lt;/span&gt;[j] = 0; // modifies a return &lt;span style="color: #ff0000"&gt;a&lt;/span&gt;[i] - t; // cannot be folded }&lt;/pre&gt; &lt;p&gt;The alias declaration is a definition even when also declared &lt;code&gt;extern&lt;/code&gt;. The alias target must be defined in the same translation unit as the alias declaration. Consequently, in the general case, there is no way to declare an alias in a header to let the compiler know that the two refer to the same symbol. This fact violates one of the basic principles of the C and C++ object models, that distinct declarations must designate distinct entities.&lt;/p&gt; &lt;p&gt;If a compiler relies on this principle (as they all inevitably do), using the &lt;code&gt;alias&lt;/code&gt; attribute can lead to surprising results. As an example, say that both the alias and the target are declared in a header and used in a program. The compiler might fold the subtraction in the &lt;code&gt;return&lt;/code&gt; statement to zero in a function. This would be just like &lt;code&gt;f&lt;/code&gt; in the example above, but in a different source file.&lt;/p&gt; &lt;p&gt;Aliases are useful and important, but without extreme care, using them can lead to subtle bugs.&lt;/p&gt; &lt;h3 id="attribute-weak"&gt;Attribute &lt;code&gt;weak&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Common-Function-Attributes.html#index-weak-function-attribute"&gt;weak&lt;/a&gt;&lt;/code&gt; attribute is similar to the &lt;code&gt;alias&lt;/code&gt; attribute: It declares that the function or variable it is attached to denotes a &lt;em&gt;&lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Weak_symbol"&gt;weak symbol&lt;/a&gt;&lt;/em&gt;, which may (but need not be) defined elsewhere in the program. If the symbol is not defined, its address is equal to null. Like &lt;code&gt;alias&lt;/code&gt;, the &lt;code&gt;weak&lt;/code&gt; attribute is also intended primarily to provide a mechanism to declare &amp;#8220;special&amp;#8221; library functions.&lt;/p&gt; &lt;p&gt;The typical example is the &lt;code&gt;malloc&lt;/code&gt; family of functions, which Unix-based implementations of the C library allow programs to replace with alternatives of their own. In this case, the &amp;#8220;strong&amp;#8221; definition would be used in place of the weak one. Specifying the &lt;code&gt;weak&lt;/code&gt; attribute on a variable declaration has the same meaning as it would on a function. Unlike &lt;code&gt;alias&lt;/code&gt;, however, weak symbols need not be defined. In those instances, the address of such an undefined weak symbol (either function or variable) is null, and so using such a symbol must be preceded by a test for its address being non-null.&lt;/p&gt; &lt;p&gt;This rule is in conflict with the C and C++ standards, which require that the address of every function and object in a program must be non-null. However, as long as the tested declaration is known to be a weak symbol (meaning, it has the attribute &lt;code&gt;weak&lt;/code&gt;), compilers will not use the standard requirement to remove such a test.&lt;/p&gt; &lt;p&gt;You can see an example in the following function, where &lt;code&gt;a&lt;/code&gt; is not declared as a weak symbol, and so is considered to declare an ordinary or strong symbol. The tests for &lt;code&gt;a&lt;/code&gt; are removed, but the test for &lt;code&gt;b&lt;/code&gt; is retained (also see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/UFqHFJ"&gt;Testing address of symbols for equality to null&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; extern int a[8]; extern __attribute__ ((weak)) int b[8]; int f (int i, int j) { int t = a ? &lt;span style="color: #ff0000"&gt;a&lt;/span&gt;[i] : 0; // replaced by 'int t = a[i];' if (&lt;span style="color: #339966"&gt;b&lt;/span&gt;) // test emitted &lt;span style="color: #339966"&gt;b&lt;/span&gt;[j] = 0; // may modify a return a ? &lt;span style="color: #ff0000"&gt;a&lt;/span&gt;[i] - t : 0; // folded to zero }&lt;/pre&gt; &lt;h4&gt;Weak declarations&lt;/h4&gt; &lt;p&gt;Any symbol can be declared &lt;code&gt;weak&lt;/code&gt;. If we were to declare &lt;code&gt;a&lt;/code&gt; to be &lt;code&gt;weak&lt;/code&gt; in a different file, eliminating the tests again would lead to surprising results. Consequently, if one declaration declares a symbol weak, they all should. Compilers tend to translate programs one source file at a time, so issuing warnings for code that does otherwise is rarely feasible.&lt;/p&gt; &lt;p&gt;Additionally, because an external symbol can also be declared to be an alias, if &lt;code&gt;b&lt;/code&gt; were declared an alias for &lt;code&gt;a&lt;/code&gt; in another source file, the results would be surprising, and likely incorrect. To illustrate the risks, imagine that we compiled the above file and linked it to a complete program with a file containing the following declarations:&lt;/p&gt; &lt;pre&gt; #include &amp;#60;stdio.h&amp;#62; int b[8] = { 0, 1 }; extern __attribute__ ((alias ("b"))) int a[8]; int f (int, int); int main (void) { int n = f (1, 1); printf ("%i %i\n", b[1], n); }&lt;/pre&gt; &lt;p&gt;Although the complete program compiles and links with no warnings, when we run it, it behaves as if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; were distinct objects, even though they are one and the same.&lt;/p&gt; &lt;h2 id="zero-length-arrays"&gt;Zero-length arrays&lt;/h2&gt; &lt;p&gt;In contrast to the extensions discussed so far, GCC&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Zero-Length.html"&gt;zero-length array&lt;/a&gt; feature isn&amp;#8217;t meant to provide an escape hatch from aliasing rules. Rather, it&amp;#8217;s an ancient mechanism designed to get around the absence of flexible-array members, which were first introduced in C99. The goal of both a zero-length array and a flexible-array member is to declare a structure with a size that is determined at runtime. It allows the last member of such a structure to be an array with an unspecified number of zero or more elements. However, unlike a flexible-array member, which must always be the last member of a structure object, zero-length arrays are accepted in any context—even serving as interior structure members that are followed by other members.&lt;/p&gt; &lt;p&gt;With the exception of padding, an access to an element of an interior zero-length array is actually an access to a subsequent member. This is not an intended feature, but rather a consequence of overly permissive design. Compilers can (and GCC does) assume that such overlapping accesses do not take place. As a result, GCC 10 uses the new &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Warning-Options.html#index-Wzero-length-bounds"&gt;-Wzero-length-bounds&lt;/a&gt;&lt;/code&gt; warning to diagnose accesses to interior zero-length arrays.&lt;/p&gt; &lt;p&gt;The next example illustrates both the invalid assumption that array accesses may alias other members of the same object, as well the warning that detects it (also see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/xWDRH7"&gt;Aliasing by zero-length array&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; struct A { int n, &lt;span style="color: #339966"&gt;a[0]&lt;/span&gt;; }; struct B { struct A a; int x; }; int f (struct B *p, int i) { int t = p-&amp;#62;&lt;span style="color: #ff0000"&gt;x&lt;/span&gt;; p-&amp;#62;a.&lt;span style="color: #339966"&gt;a&lt;/span&gt;[i] = 0; // -Wzero-length-bounds return p-&amp;#62;&lt;span style="color: #ff0000"&gt;x&lt;/span&gt; - t; // can be folded to zero }&lt;/pre&gt; &lt;h2 id="opting-out-of-aliasing-rules"&gt;Opting out of aliasing rules&lt;/h2&gt; &lt;p&gt;As the examples so far show, C and C++ outline exact requirements about the identity of symbols and objects in programs. Programs that abide by these requirements benefit by reducing the number of memory accesses required to reload unchanged values. But what about programs that were not written with these requirements in mind? Legacy software and poorly written code both omit aliasing requirements, albeit for different reasons. Is there some way for these programs to opt-out of aliasing rules?&lt;/p&gt; &lt;p&gt;Although you might think the answer would be yes, it turns out that, for the most part, the answer is no. GCC and compatible compilers do provide the &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Optimize-Options.html#index-fstrict-aliasing"&gt;-fno-strict-aliasing&lt;/a&gt;&lt;/code&gt; option, but it only applies to a subset of the rules; namely, type-based aliasing. The &lt;code&gt;-fno-strict-aliasing&lt;/code&gt; option doesn&amp;#8217;t prevent GCC from making other assumptions I&amp;#8217;ve discussed, including those about the identity of objects and the absence of other forms of aliasing (such as with zero-length arrays).&lt;/p&gt; &lt;h2 id="the-price-of-aliasing-exemptions"&gt;The price of aliasing exemptions&lt;/h2&gt; &lt;p&gt;As with most exceptions to the rules, permission for other types to access objects of any type comes at a price. A particular use of the C++ &lt;code&gt;std::string&lt;/code&gt; container nicely illustrates this problem. Given that &lt;code&gt;std::string&lt;/code&gt; is little more than a wrapper for a character pointer—specifically, &lt;code&gt;const char*&lt;/code&gt;—the compiler assumes that any modification to a &lt;code&gt;std::string&lt;/code&gt; object could potentially modify any object that may be reachable by that pointer in the program. The only exception would be if a compiler could track the value of the wrapped pointer (or, using a more technical phrase, &lt;i&gt;track its provenance&lt;/i&gt;) and prove otherwise. This rule holds even though the class guarantees that the wrapped pointer never points to anything but an internal buffer, which is managed by the object.&lt;/p&gt; &lt;p&gt;You can see this pitfall illustrated in the next example, where we would like the compiler to fold the &lt;code&gt;return&lt;/code&gt; expression to zero. Because of the exemption, no compiler is able to do it (also see &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/bGqEzd"&gt;Access by std::string aliases anything&lt;/a&gt;&lt;/i&gt;):&lt;/p&gt; &lt;pre&gt; #include &amp;#60;string&amp;#62; int x; int f (std::string &amp;#38;&lt;span style="color: #339966"&gt;str&lt;/span&gt;) { int t = &lt;span style="color: #ff0000"&gt;x&lt;/span&gt;; &lt;span style="color: #339966"&gt;str&lt;/span&gt; = ""; // assumed to alias x return t - &lt;span style="color: #ff0000"&gt;x&lt;/span&gt;; // not folded to zero }&lt;/pre&gt; &lt;p&gt;The price, in this case, is an efficiency penalty, and the problem isn&amp;#8217;t limited to &lt;code&gt;std::string&lt;/code&gt;. It affects any C or C++ container type that embeds an internal pointer that it uses to access data. With pointers to other types such as &lt;code&gt;int*&lt;/code&gt;, the scope of the problem is limited to objects of just the compatible types. So, in this example, we must assume that &lt;code&gt;std::vector&amp;#60;int&amp;#62;&lt;/code&gt; modifies any reachable variable of type &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Besides the loss of efficiency, exemptions from otherwise tight rules have another consequence: They limit the ability to detect and diagnose coding bugs. For instance, by accepting declarations of zero-length arrays even when they are followed by another member, compilers introduce the possibility of bugs into any code that accesses such members (also see &lt;em&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/5iHLRf"&gt;Access by zero-length array&lt;/a&gt;&lt;/em&gt;):&lt;/p&gt; &lt;pre&gt; struct A { int x, &lt;span style="color: #339966"&gt;a[0]&lt;/span&gt;, &lt;span style="color: #ff0000"&gt;y&lt;/span&gt;; }; int f (struct A *a) { int t = a-&amp;#62;&lt;span style="color: #ff0000"&gt;y&lt;/span&gt;; a-&amp;#62;&lt;span style="color: #339966"&gt;a&lt;/span&gt;[0] = 123; // overlaps with a-&amp;#62;y return t - a-&amp;#62;&lt;span style="color: #ff0000"&gt;y&lt;/span&gt;; // folded to zero }&lt;/pre&gt; &lt;p&gt;With the exception of Visual C++, which doesn&amp;#8217;t support the extension, all tested compilers fold the &lt;code&gt;return&lt;/code&gt; expression in this example to zero. Yet, when called with the address of an object whose member &lt;code&gt;y&lt;/code&gt; is set to any value but &lt;code&gt;123&lt;/code&gt;, the function returns an unexpected result: also zero. GCC 10 is the only compiler that detects this likely bug; it does so by issuing the &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Warning-Options.html#index-Wzero-length-bounds"&gt;-Wzero-length-bounds&lt;/a&gt;&lt;/code&gt; warning. Unfortunately, GCC 10 is impotent against instances of the same bug when the zero-length array is the last member of a &lt;code&gt;struct&lt;/code&gt; sub-object, which is then followed by another member in some other &lt;code&gt;struct&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This is not a problem with standard flexible-array members. The C language requires those to be defined last in the outermost enclosing struct. That also means that a struct with a flexible array member cannot be used to declare a member of another struct. Regrettably, GCC accepts such invalid uses as another extension, with the possibility of causing the same bug (see &lt;em&gt;&lt;a target="_blank" rel="nofollow" href="https://godbolt.org/z/V_Z849"&gt;Aliasing access by flexible array member&lt;/a&gt;&lt;/em&gt;):&lt;/p&gt; &lt;pre&gt; struct A { int x, &lt;span style="color: #339966"&gt;a[]&lt;/span&gt;; }; struct B { struct A a; int &lt;span style="color: #ff0000"&gt;y&lt;/span&gt;; }; int f (struct A *a, struct B *b) { int t = b-&amp;#62;&lt;span style="color: #ff0000"&gt;y&lt;/span&gt;; a-&amp;#62;&lt;span style="color: #339966"&gt;a&lt;/span&gt;[1] = 123; // overlaps with b-&amp;#62;y return t - b-&amp;#62;&lt;span style="color: #ff0000"&gt;y&lt;/span&gt;; // folded to zero }&lt;/pre&gt; &lt;h3 id="detecting-aliasing-bugs"&gt;Warnings to detect aliasing bugs&lt;/h3&gt; &lt;p&gt;None of the popular compilers tested for this article detects any of the aliasing bugs we&amp;#8217;ve discussed. However, GCC and compatible compilers expose two warning options, which are designed to detect disjoint subsets of these bugs: &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Warning-Options.html#index-Wstrict-aliasing"&gt;-Wstrict-aliasing&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Warning-Options.html#index-Wrestrict"&gt;-Wrestrict&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;-Wstrict-aliasing&lt;/code&gt; is a multi-level option designed to detect basic violations of type-based aliasing rules. &lt;code&gt;-Wrestrict&lt;/code&gt;, on the other hand, detects overlapping accesses by &lt;code&gt;restrict&lt;/code&gt;-qualified pointers in a subset of string-manipulation functions known to GCC, as well as passing the same pointers to &lt;code&gt;restrict&lt;/code&gt;-qualified arguments in user-defined functions.&lt;/p&gt; &lt;p&gt;Additionally, GCC 10 includes the new &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc-10.1.0/gcc/Warning-Options.html#index-Wzero-length-bounds"&gt;-Wzero-length-bounds&lt;/a&gt;&lt;/code&gt; warnings, which are used to detect accesses to zero-length arrays.&lt;/p&gt; &lt;p&gt;All three warnings are included in GCC&amp;#8217;s &lt;code&gt;-Wall&lt;/code&gt;. While current implementations still leave much room for improvement, they are a sign that compiler implementers are moving in the right direction and attempting to detect these bugs that are otherwise hard to catch.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this two-part series, you have learned that carefully following aliasing rules in C and C++ can benefit runtime efficiency. At the same time, it&amp;#8217;s quite easy to bypass the rules, either by necessity or by mistake. As many of the examples highlight, these exceptions often come with considerable risks. Using them incorrectly or carelessly can lead to bugs that are hard to find.&lt;/p&gt; &lt;p&gt;Using exemptions means that the compiler can only rely on the rules if it can prove that no exemption was exercised. Otherwise, the compiler must conservatively assume that the rules have been bypassed. Given that compilers have limited visibility into programs, such conservative assumptions typically result in suboptimal performance. This is especially unfortunate when we consider that most code &lt;em&gt;does&lt;/em&gt; follow the rules, and only a small fraction of it uses exemptions.&lt;/p&gt; &lt;p&gt;Historically, C and C++ compilers were developed with the philosophy of trusting the programmer. As a result, few resources were devoted to verifying that code meets the underlying assumptions of our optimizations. This picture is starting to change as a result of widely publicized bugs. Still, compilers are only slowly adding checks before optimizing, to verify that the code is valid and that no exemptions have been misused. The efficacy of such checks also tends to be quite limited. Almost none have visibility into whole programs so that they can analyze at most one source file at a time.&lt;/p&gt; &lt;p&gt;To maximize the benefit of aliasing rules and minimize the risks of falling into the many traps I&amp;#8217;ve outlined in this series, I recommend writing code that strictly follows the rules and avoids relying on exemptions and extensions, unless it is necessary. Also, I suggest using the &lt;code&gt;-Wall&lt;/code&gt;, &lt;code&gt;-Wextra&lt;/code&gt;, or equivalent compiler options to enable warnings and resolve all of their instances.&lt;/p&gt; &lt;p&gt;Keep in mind that compilers are improving in their ability to uncover problems with every release. Always upgrade to the newest compiler version as early as it is feasible. Finally, if you find a bug that you think your compiler should be able to detect, submit a test case to the GCC &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/bugzilla/"&gt;Bugzilla&lt;/a&gt; (first-time submitters should read &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/bugs/"&gt;how to report bugs or enhancement requests&lt;/a&gt;) and ask the compiler&amp;#8217;s implementer to diagnose it. With increasing sensitivity to the consequences of undefined behavior, the chances are that someone will make an effort to ensure that bug is detectable in a future version of the compiler.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#38;linkname=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F03%2Fthe-joys-and-perils-of-aliasing-in-c-and-c-part-2%2F&amp;#038;title=The%20joys%20and%20perils%20of%20aliasing%20in%20C%20and%20C%2B%2B%2C%20Part%202" data-a2a-url="https://developers.redhat.com/blog/2020/06/03/the-joys-and-perils-of-aliasing-in-c-and-c-part-2/" data-a2a-title="The joys and perils of aliasing in C and C++, Part 2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/03/the-joys-and-perils-of-aliasing-in-c-and-c-part-2/"&gt;The joys and perils of aliasing in C and C++, Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JbEoSdUb1R4" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In the previous article, I discussed the benefits of C and C++ language restrictions in optimized code. In this second half, I present a variety of programming language exemptions and compiler extensions that developers can use to get around aliasing restrictions more or less safely. I will also discuss the common pitfalls of aliasing, both [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/03/the-joys-and-perils-of-aliasing-in-c-and-c-part-2/"&gt;The joys and perils of aliasing in C and C++, Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">722377</post-id><dc:creator>Martin Sebor</dc:creator><dc:date>2020-06-03T07:00:06Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/03/the-joys-and-perils-of-aliasing-in-c-and-c-part-2/</feedburner:origLink></entry><entry><title>Open Data Hub 0.6.1: Bug fix release to smooth out redesign regressions</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_NVu5P24-dw/" /><category term="Big Data" /><category term="CI/CD" /><category term="Machine Learning" /><category term="Operator" /><category term="AI/ML" /><category term="JupyterHub" /><category term="Kubeflow" /><category term="Open Data Hub" /><category term="openshift" /><author><name>Václav Pavlín</name></author><id>https://developers.redhat.com/blog/?p=723147</id><updated>2020-06-02T07:00:56Z</updated><published>2020-06-02T07:00:56Z</published><content type="html">&lt;p&gt;It is just a few short weeks since we &lt;a href="https://developers.redhat.com/blog/2020/05/07/open-data-hub-0-6-brings-component-updates-and-kubeflow-architecture/"&gt;released Open Data Hub (ODH) 0.6.0&lt;/a&gt;, bringing many changes to the underlying architecture and some new features. We found &lt;a target="_blank" rel="nofollow" href="https://github.com/orgs/opendatahub-io/projects/3"&gt;a few issues&lt;/a&gt; in this new version with the Kubeflow Operator and a few regressions that came in with the new JupyterHub updates. To make sure your experience with ODH 0.6 does not suffer because we wanted to release early, we offer a new (mostly) bugfix release: Open Data Hub 0.6.1.&lt;/p&gt; &lt;h2&gt;Operator&lt;/h2&gt; &lt;p&gt;Probably the most important bug fix went into the &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/opendatahub-operator/"&gt;Operator&amp;#8217;s code&lt;/a&gt; itself. The changes there are important for the project not only because of what they fix, but also because they prove our relationship with the Kubeflow community, since most of the code went directly &lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/kfctl"&gt;upstream&lt;/a&gt;. We have also rebased our repository to make sure any new features in the Operator get in. Let’s take a look at a few things which have been fixed.&lt;/p&gt; &lt;h3&gt;Deleting namespace with the instance&lt;/h3&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/kfctl/issues/241"&gt;This issue&lt;/a&gt; caused something you do not expect from the application in general. When a user deleted the KFDef custom resource, the Operator also deleted the namespace where the Open Data Hub had been deployed. This is definitely something we do not want since there might be other applications running in the namespace which ODH does not control. We filed the issue and worked with the community to get the Operator to behave correctly.&lt;/p&gt; &lt;h3&gt;Caches and collisions&lt;/h3&gt; &lt;p&gt;Kubeflow’s &lt;code&gt;kfctl&lt;/code&gt; tool downloads and caches the manifests locally so you do not need to download them on each command run. It also generates the Kustomize structure and manifests based on the KFDef content.&lt;/p&gt; &lt;p&gt;This flow works fine locally where you can manually move things around, but in the Operator it means that all of the KFDef custom resources use the same cache as the first one. After that, all of the instances were also deployed from the same generated Kustomize manifests. That behavior is obviously not right and causes &lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/kfctl/issues/242"&gt;a lot of problems&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The new version of the Operator handles this problem much better. It puts the cache and Kustomize manifests in directories based on the namespace and KFDef name, and it also reloads the cache whenever necessary to accommodate any potential manifest changes.&lt;/p&gt; &lt;h3&gt;Building the Operator image&lt;/h3&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/kfctl/pull/321"&gt;The last change&lt;/a&gt; we needed in the Operator is about how the image gets built. Since &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/operator-framework/operator-sdk"&gt;operator-sdk&lt;/a&gt;&lt;/code&gt; names the manager binary based on the cloned directory name, we needed to parameterize that in the Dockerfile to accommodate the change from &lt;code&gt;kfctl&lt;/code&gt; to &lt;code&gt;opendatahub-operator&lt;/code&gt;. Another change is our preference to run on top of the Universal Base Image (UBI), which is not the case with Kubeflow Operator, so we made the build process customizable to plug in &lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/kfctl/blob/master/build/Dockerfile.ubi"&gt;alternative Dockerfiles&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Manifests&lt;/h2&gt; &lt;p&gt;We made a few updates in the &lt;code&gt;odh-manifests&lt;/code&gt; repository mainly to accommodate missing components and improve the documentation.&lt;/p&gt; &lt;h3&gt;READMEs&lt;/h3&gt; &lt;p&gt;We added basic descriptions to all of the components in the READMEs. Simply &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/odh-manifests/"&gt;go to the repository&lt;/a&gt; and click on the component. You will see a README talking about the component purpose, its dependencies and configuration options, and examples on how to enable the component in the KFDef resource.&lt;/p&gt; &lt;h3&gt;JupyterHub&lt;/h3&gt; &lt;p&gt;As mentioned in our announcement for ODH 0.6.0, one of the JupyterHub dependencies—&lt;a target="_blank" rel="nofollow" href="https://github.com/vpavlin/jupyterhub-singleuser-profiles/"&gt;JupyterHub Singleuser Profiles&lt;/a&gt;—went through some changes and we found &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/odh-manifests/issues/44"&gt;a few regressions&lt;/a&gt;. They were all fixed, including one that blocked the successful deployment of Jupyter notebook servers on GPU enabled nodes.&lt;/p&gt; &lt;h3&gt;AI Library and Seldon&lt;/h3&gt; &lt;p&gt;We omitted &lt;a target="_blank" rel="nofollow" href="http://opendatahub.io/docs/ai-library.html"&gt;AI Library&lt;/a&gt; from the previous release because we were missing Seldon, which is a dependency of AI Library. Since &lt;a target="_blank" rel="nofollow" href="https://catalog.redhat.com/software/operators/detail/5e9f1a3769aea31642b613f4"&gt;Seldon Operator&lt;/a&gt; was successfully certified recently, we were able to add it via the Operator Lifecycle Manager and thus enable AI Library again.&lt;/p&gt; &lt;h2&gt;Testing and continuous integration&lt;/h2&gt; &lt;p&gt;One of the main long-standing issues with Open Data Hub development and maintenance was the lack of automated testing for incoming pull requests (PRs). Because of this issue, all of our verifications were manual and took a lot of time. Since we began planning our move to GitHub, we held high hopes for OpenShift CI as a viable solution for our continuous integration infrastructure.&lt;/p&gt; &lt;p&gt;We are happy to share that we are now &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/odh-manifests/blob/master/tests/TESTING.md"&gt;hooked into OpenShift CI&lt;/a&gt; and the &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/odh-manifests/tree/master/tests"&gt;tests&lt;/a&gt; are running on all of the PRs in the &lt;code&gt;odh-manifests&lt;/code&gt; repository. We will work on adding more tests and keep an eye on new PRs to make sure they come with tests to avoid introducing regressions in the future.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#38;linkname=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F02%2Fopen-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions%2F&amp;#038;title=Open%20Data%20Hub%200.6.1%3A%20Bug%20fix%20release%20to%20smooth%20out%20redesign%20regressions" data-a2a-url="https://developers.redhat.com/blog/2020/06/02/open-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions/" data-a2a-title="Open Data Hub 0.6.1: Bug fix release to smooth out redesign regressions"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/02/open-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions/"&gt;Open Data Hub 0.6.1: Bug fix release to smooth out redesign regressions&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_NVu5P24-dw" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;It is just a few short weeks since we released Open Data Hub (ODH) 0.6.0, bringing many changes to the underlying architecture and some new features. We found a few issues in this new version with the Kubeflow Operator and a few regressions that came in with the new JupyterHub updates. To make sure your [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/02/open-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions/"&gt;Open Data Hub 0.6.1: Bug fix release to smooth out redesign regressions&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">723147</post-id><dc:creator>Václav Pavlín</dc:creator><dc:date>2020-06-02T07:00:56Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/02/open-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions/</feedburner:origLink></entry></feed>
